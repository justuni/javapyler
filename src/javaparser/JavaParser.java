// $ANTLR 3.3 Nov 30, 2010 12:50:56 Java.g 2011-03-30 17:17:53

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *         
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AdditiveExpression", "Annotation", "AnnotationArgument", "AnnotationMethodDeclaration", "Annotations", "AnnotationTypeBody", "AnnotationTypeDeclaration", "Arguments", "ArrayAccess", "ArrayCreator", "ArrayInitializer", "AssignExpr", "BitAndExpression", "BitOrExpression", "BitXorExpression", "Block", "CastExpression", "ClassBody", "ClassBlock", "ClassCreator", "ClassDeclaration", "ClassOrInterfaceType", "CompilationUnit", "ConditionalAndExpression", "ConditionalExpression", "ConditionalOrExpression", "ElementValueArrayInitializer", "EnhancedForVar", "EnhancedForExpr", "EnhancedForStmt", "EnumBody", "EnumConstant", "EnumDeclaration", "EqualityExpression", "Expression", "FieldDeclaration", "ForInit", "ForExpr", "ForUpdate", "ForStmt", "FormalParameters", "InnerCreator", "InterfaceBody", "InterfaceDeclaration", "InterfaceFieldDeclaration", "InterfaceMethodDeclaration", "Label", "LocalVariableDeclaration", "MethodDeclaration", "Modifiers", "MultiplicativeExpression", "ParameterDecl", "ParExpression", "PostOperator", "QualifiedName", "PrimitiveType", "RelationalExpression", "Selector", "ShiftExpression", "Statement", "SuperSuffix", "SwitchEntry", "Type", "TypeArguments", "TypedSuffix", "TypeList", "TypeParameters", "UnaryExpression", "VariableDeclarator", "IDENTIFIER", "INTLITERAL", "LONGLITERAL", "FLOATLITERAL", "DOUBLELITERAL", "CHARLITERAL", "STRINGLITERAL", "TRUE", "FALSE", "NULL", "IntegerNumber", "LongSuffix", "HexPrefix", "HexDigit", "Exponent", "NonIntegerNumber", "FloatSuffix", "DoubleSuffix", "EscapeSequence", "WS", "COMMENT", "LINE_COMMENT", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "GOTO", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMI", "COMMA", "DOT", "ELLIPSIS", "EQ", "BANG", "TILDE", "QUES", "COLON", "EQEQ", "AMPAMP", "BARBAR", "PLUSPLUS", "SUBSUB", "PLUS", "SUB", "STAR", "SLASH", "AMP", "BAR", "CARET", "PERCENT", "PLUSEQ", "SUBEQ", "STAREQ", "SLASHEQ", "AMPEQ", "BAREQ", "CARETEQ", "PERCENTEQ", "MONKEYS_AT", "BANGEQ", "GT", "LT", "IdentifierStart", "IdentifierPart", "SurrogateIdentifer"
    };
    public static final int EOF=-1;
    public static final int AdditiveExpression=4;
    public static final int Annotation=5;
    public static final int AnnotationArgument=6;
    public static final int AnnotationMethodDeclaration=7;
    public static final int Annotations=8;
    public static final int AnnotationTypeBody=9;
    public static final int AnnotationTypeDeclaration=10;
    public static final int Arguments=11;
    public static final int ArrayAccess=12;
    public static final int ArrayCreator=13;
    public static final int ArrayInitializer=14;
    public static final int AssignExpr=15;
    public static final int BitAndExpression=16;
    public static final int BitOrExpression=17;
    public static final int BitXorExpression=18;
    public static final int Block=19;
    public static final int CastExpression=20;
    public static final int ClassBody=21;
    public static final int ClassBlock=22;
    public static final int ClassCreator=23;
    public static final int ClassDeclaration=24;
    public static final int ClassOrInterfaceType=25;
    public static final int CompilationUnit=26;
    public static final int ConditionalAndExpression=27;
    public static final int ConditionalExpression=28;
    public static final int ConditionalOrExpression=29;
    public static final int ElementValueArrayInitializer=30;
    public static final int EnhancedForVar=31;
    public static final int EnhancedForExpr=32;
    public static final int EnhancedForStmt=33;
    public static final int EnumBody=34;
    public static final int EnumConstant=35;
    public static final int EnumDeclaration=36;
    public static final int EqualityExpression=37;
    public static final int Expression=38;
    public static final int FieldDeclaration=39;
    public static final int ForInit=40;
    public static final int ForExpr=41;
    public static final int ForUpdate=42;
    public static final int ForStmt=43;
    public static final int FormalParameters=44;
    public static final int InnerCreator=45;
    public static final int InterfaceBody=46;
    public static final int InterfaceDeclaration=47;
    public static final int InterfaceFieldDeclaration=48;
    public static final int InterfaceMethodDeclaration=49;
    public static final int Label=50;
    public static final int LocalVariableDeclaration=51;
    public static final int MethodDeclaration=52;
    public static final int Modifiers=53;
    public static final int MultiplicativeExpression=54;
    public static final int ParameterDecl=55;
    public static final int ParExpression=56;
    public static final int PostOperator=57;
    public static final int QualifiedName=58;
    public static final int PrimitiveType=59;
    public static final int RelationalExpression=60;
    public static final int Selector=61;
    public static final int ShiftExpression=62;
    public static final int Statement=63;
    public static final int SuperSuffix=64;
    public static final int SwitchEntry=65;
    public static final int Type=66;
    public static final int TypeArguments=67;
    public static final int TypedSuffix=68;
    public static final int TypeList=69;
    public static final int TypeParameters=70;
    public static final int UnaryExpression=71;
    public static final int VariableDeclarator=72;
    public static final int IDENTIFIER=73;
    public static final int INTLITERAL=74;
    public static final int LONGLITERAL=75;
    public static final int FLOATLITERAL=76;
    public static final int DOUBLELITERAL=77;
    public static final int CHARLITERAL=78;
    public static final int STRINGLITERAL=79;
    public static final int TRUE=80;
    public static final int FALSE=81;
    public static final int NULL=82;
    public static final int IntegerNumber=83;
    public static final int LongSuffix=84;
    public static final int HexPrefix=85;
    public static final int HexDigit=86;
    public static final int Exponent=87;
    public static final int NonIntegerNumber=88;
    public static final int FloatSuffix=89;
    public static final int DoubleSuffix=90;
    public static final int EscapeSequence=91;
    public static final int WS=92;
    public static final int COMMENT=93;
    public static final int LINE_COMMENT=94;
    public static final int ABSTRACT=95;
    public static final int ASSERT=96;
    public static final int BOOLEAN=97;
    public static final int BREAK=98;
    public static final int BYTE=99;
    public static final int CASE=100;
    public static final int CATCH=101;
    public static final int CHAR=102;
    public static final int CLASS=103;
    public static final int CONST=104;
    public static final int CONTINUE=105;
    public static final int DEFAULT=106;
    public static final int DO=107;
    public static final int DOUBLE=108;
    public static final int ELSE=109;
    public static final int ENUM=110;
    public static final int EXTENDS=111;
    public static final int FINAL=112;
    public static final int FINALLY=113;
    public static final int FLOAT=114;
    public static final int FOR=115;
    public static final int GOTO=116;
    public static final int IF=117;
    public static final int IMPLEMENTS=118;
    public static final int IMPORT=119;
    public static final int INSTANCEOF=120;
    public static final int INT=121;
    public static final int INTERFACE=122;
    public static final int LONG=123;
    public static final int NATIVE=124;
    public static final int NEW=125;
    public static final int PACKAGE=126;
    public static final int PRIVATE=127;
    public static final int PROTECTED=128;
    public static final int PUBLIC=129;
    public static final int RETURN=130;
    public static final int SHORT=131;
    public static final int STATIC=132;
    public static final int STRICTFP=133;
    public static final int SUPER=134;
    public static final int SWITCH=135;
    public static final int SYNCHRONIZED=136;
    public static final int THIS=137;
    public static final int THROW=138;
    public static final int THROWS=139;
    public static final int TRANSIENT=140;
    public static final int TRY=141;
    public static final int VOID=142;
    public static final int VOLATILE=143;
    public static final int WHILE=144;
    public static final int LPAREN=145;
    public static final int RPAREN=146;
    public static final int LBRACE=147;
    public static final int RBRACE=148;
    public static final int LBRACKET=149;
    public static final int RBRACKET=150;
    public static final int SEMI=151;
    public static final int COMMA=152;
    public static final int DOT=153;
    public static final int ELLIPSIS=154;
    public static final int EQ=155;
    public static final int BANG=156;
    public static final int TILDE=157;
    public static final int QUES=158;
    public static final int COLON=159;
    public static final int EQEQ=160;
    public static final int AMPAMP=161;
    public static final int BARBAR=162;
    public static final int PLUSPLUS=163;
    public static final int SUBSUB=164;
    public static final int PLUS=165;
    public static final int SUB=166;
    public static final int STAR=167;
    public static final int SLASH=168;
    public static final int AMP=169;
    public static final int BAR=170;
    public static final int CARET=171;
    public static final int PERCENT=172;
    public static final int PLUSEQ=173;
    public static final int SUBEQ=174;
    public static final int STAREQ=175;
    public static final int SLASHEQ=176;
    public static final int AMPEQ=177;
    public static final int BAREQ=178;
    public static final int CARETEQ=179;
    public static final int PERCENTEQ=180;
    public static final int MONKEYS_AT=181;
    public static final int BANGEQ=182;
    public static final int GT=183;
    public static final int LT=184;
    public static final int IdentifierStart=185;
    public static final int IdentifierPart=186;
    public static final int SurrogateIdentifer=187;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[394+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "Java.g"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // Java.g:366:1: compilationUnit : ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ^( CompilationUnit ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotations_return annotations1 = null;

        JavaParser.packageDeclaration_return packageDeclaration2 = null;

        JavaParser.importDeclaration_return importDeclaration3 = null;

        JavaParser.typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // Java.g:371:5: ( ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ^( CompilationUnit ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) )
            // Java.g:371:9: ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
            {
            // Java.g:371:9: ( ( annotations )? packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // Java.g:371:13: ( annotations )? packageDeclaration
                    {
                    // Java.g:371:13: ( annotations )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==MONKEYS_AT) ) {
                        alt1=1;
                    }
                    switch (alt1) {
                        case 1 :
                            // Java.g:371:14: annotations
                            {
                            pushFollow(FOLLOW_annotations_in_compilationUnit586);
                            annotations1=annotations();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotations.add(annotations1.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit615);
                    packageDeclaration2=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }

            // Java.g:375:9: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==IMPORT) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // Java.g:375:10: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit637);
            	    importDeclaration3=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // Java.g:377:9: ( typeDeclaration )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==ABSTRACT||LA4_0==CLASS||LA4_0==ENUM||LA4_0==FINAL||LA4_0==INTERFACE||LA4_0==NATIVE||(LA4_0>=PRIVATE && LA4_0<=PUBLIC)||(LA4_0>=STATIC && LA4_0<=STRICTFP)||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||LA4_0==VOLATILE||LA4_0==SEMI||LA4_0==MONKEYS_AT) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // Java.g:377:10: typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit659);
            	    typeDeclaration4=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);



            // AST REWRITE
            // elements: typeDeclaration, importDeclaration, annotations, packageDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:9: -> ^( CompilationUnit ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
            {
                // Java.g:379:12: ^( CompilationUnit ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CompilationUnit, "CompilationUnit"), root_1);

                // Java.g:380:13: ( ( annotations )? packageDeclaration )?
                if ( stream_annotations.hasNext()||stream_packageDeclaration.hasNext() ) {
                    // Java.g:380:14: ( annotations )?
                    if ( stream_annotations.hasNext() ) {
                        adaptor.addChild(root_1, stream_annotations.nextTree());

                    }
                    stream_annotations.reset();
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_annotations.reset();
                stream_packageDeclaration.reset();
                // Java.g:381:13: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                // Java.g:381:34: ( typeDeclaration )*
                while ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // Java.g:384:1: packageDeclaration : 'package' qualifiedName ';' -> ^( 'package' qualifiedName ) ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        JavaParser.qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_PACKAGE=new RewriteRuleTokenStream(adaptor,"token PACKAGE");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // Java.g:385:5: ( 'package' qualifiedName ';' -> ^( 'package' qualifiedName ) )
            // Java.g:385:9: 'package' qualifiedName ';'
            {
            string_literal5=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PACKAGE.add(string_literal5);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration750);
            qualifiedName6=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            char_literal7=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal7);



            // AST REWRITE
            // elements: PACKAGE, qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:13: -> ^( 'package' qualifiedName )
            {
                // Java.g:386:16: ^( 'package' qualifiedName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_PACKAGE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // Java.g:389:1: importDeclaration : 'import' importDeclaration1 ';' -> ^( 'import' importDeclaration1 ) ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token char_literal10=null;
        JavaParser.importDeclaration1_return importDeclaration19 = null;


        Object string_literal8_tree=null;
        Object char_literal10_tree=null;
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_importDeclaration1=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // Java.g:390:5: ( 'import' importDeclaration1 ';' -> ^( 'import' importDeclaration1 ) )
            // Java.g:390:9: 'import' importDeclaration1 ';'
            {
            string_literal8=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(string_literal8);

            pushFollow(FOLLOW_importDeclaration1_in_importDeclaration799);
            importDeclaration19=importDeclaration1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_importDeclaration1.add(importDeclaration19.getTree());
            char_literal10=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal10);



            // AST REWRITE
            // elements: IMPORT, importDeclaration1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:9: -> ^( 'import' importDeclaration1 )
            {
                // Java.g:393:12: ^( 'import' importDeclaration1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_IMPORT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_importDeclaration1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class importDeclaration1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration1"
    // Java.g:396:1: importDeclaration1 : ( ( 'static' )? IDENTIFIER '.' '*' | ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? );
    public final JavaParser.importDeclaration1_return importDeclaration1() throws RecognitionException {
        JavaParser.importDeclaration1_return retval = new JavaParser.importDeclaration1_return();
        retval.start = input.LT(1);
        int importDeclaration1_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal11=null;
        Token IDENTIFIER12=null;
        Token char_literal13=null;
        Token char_literal14=null;
        Token string_literal15=null;
        Token IDENTIFIER16=null;
        Token char_literal17=null;
        Token IDENTIFIER18=null;
        Token char_literal19=null;
        Token char_literal20=null;

        Object string_literal11_tree=null;
        Object IDENTIFIER12_tree=null;
        Object char_literal13_tree=null;
        Object char_literal14_tree=null;
        Object string_literal15_tree=null;
        Object IDENTIFIER16_tree=null;
        Object char_literal17_tree=null;
        Object IDENTIFIER18_tree=null;
        Object char_literal19_tree=null;
        Object char_literal20_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // Java.g:397:5: ( ( 'static' )? IDENTIFIER '.' '*' | ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==STATIC) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==IDENTIFIER) ) {
                    int LA9_2 = input.LA(3);

                    if ( (LA9_2==DOT) ) {
                        int LA9_3 = input.LA(4);

                        if ( (LA9_3==STAR) ) {
                            alt9=1;
                        }
                        else if ( (LA9_3==IDENTIFIER) ) {
                            alt9=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 9, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 9, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA9_0==IDENTIFIER) ) {
                int LA9_2 = input.LA(2);

                if ( (LA9_2==DOT) ) {
                    int LA9_3 = input.LA(3);

                    if ( (LA9_3==STAR) ) {
                        alt9=1;
                    }
                    else if ( (LA9_3==IDENTIFIER) ) {
                        alt9=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 9, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // Java.g:397:9: ( 'static' )? IDENTIFIER '.' '*'
                    {
                    root_0 = (Object)adaptor.nil();

                    // Java.g:397:9: ( 'static' )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==STATIC) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // Java.g:397:10: 'static'
                            {
                            string_literal11=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration1845); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal11_tree = (Object)adaptor.create(string_literal11);
                            adaptor.addChild(root_0, string_literal11_tree);
                            }

                            }
                            break;

                    }

                    IDENTIFIER12=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_importDeclaration1866); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER12_tree = (Object)adaptor.create(IDENTIFIER12);
                    adaptor.addChild(root_0, IDENTIFIER12_tree);
                    }
                    char_literal13=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration1868); if (state.failed) return retval;
                    char_literal14=(Token)match(input,STAR,FOLLOW_STAR_in_importDeclaration1871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal14_tree = (Object)adaptor.create(char_literal14);
                    adaptor.addChild(root_0, char_literal14_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:400:9: ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // Java.g:400:9: ( 'static' )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==STATIC) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // Java.g:400:10: 'static'
                            {
                            string_literal15=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration1882); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal15_tree = (Object)adaptor.create(string_literal15);
                            adaptor.addChild(root_0, string_literal15_tree);
                            }

                            }
                            break;

                    }

                    IDENTIFIER16=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_importDeclaration1903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER16_tree = (Object)adaptor.create(IDENTIFIER16);
                    adaptor.addChild(root_0, IDENTIFIER16_tree);
                    }
                    // Java.g:403:9: ( '.' IDENTIFIER )+
                    int cnt7=0;
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==DOT) ) {
                            int LA7_1 = input.LA(2);

                            if ( (LA7_1==IDENTIFIER) ) {
                                alt7=1;
                            }


                        }


                        switch (alt7) {
                    	case 1 :
                    	    // Java.g:403:10: '.' IDENTIFIER
                    	    {
                    	    char_literal17=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration1914); if (state.failed) return retval;
                    	    IDENTIFIER18=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_importDeclaration1917); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    IDENTIFIER18_tree = (Object)adaptor.create(IDENTIFIER18);
                    	    adaptor.addChild(root_0, IDENTIFIER18_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt7 >= 1 ) break loop7;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(7, input);
                                throw eee;
                        }
                        cnt7++;
                    } while (true);

                    // Java.g:405:9: ( '.' '*' )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==DOT) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // Java.g:405:10: '.' '*'
                            {
                            char_literal19=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration1939); if (state.failed) return retval;
                            char_literal20=(Token)match(input,STAR,FOLLOW_STAR_in_importDeclaration1942); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal20_tree = (Object)adaptor.create(char_literal20);
                            adaptor.addChild(root_0, char_literal20_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, importDeclaration1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration1"

    public static class qualifiedImportName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedImportName"
    // Java.g:409:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
    public final JavaParser.qualifiedImportName_return qualifiedImportName() throws RecognitionException {
        JavaParser.qualifiedImportName_return retval = new JavaParser.qualifiedImportName_return();
        retval.start = input.LT(1);
        int qualifiedImportName_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER21=null;
        Token char_literal22=null;
        Token IDENTIFIER23=null;

        Object IDENTIFIER21_tree=null;
        Object char_literal22_tree=null;
        Object IDENTIFIER23_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // Java.g:410:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
            // Java.g:410:9: IDENTIFIER ( '.' IDENTIFIER )*
            {
            root_0 = (Object)adaptor.nil();

            IDENTIFIER21=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedImportName973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER21_tree = (Object)adaptor.create(IDENTIFIER21);
            adaptor.addChild(root_0, IDENTIFIER21_tree);
            }
            // Java.g:411:9: ( '.' IDENTIFIER )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==DOT) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // Java.g:411:10: '.' IDENTIFIER
            	    {
            	    char_literal22=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedImportName984); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal22_tree = (Object)adaptor.create(char_literal22);
            	    adaptor.addChild(root_0, char_literal22_tree);
            	    }
            	    IDENTIFIER23=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedImportName986); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    IDENTIFIER23_tree = (Object)adaptor.create(IDENTIFIER23);
            	    adaptor.addChild(root_0, IDENTIFIER23_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, qualifiedImportName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedImportName"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // Java.g:415:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal25=null;
        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration24 = null;


        Object char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // Java.g:416:5: ( classOrInterfaceDeclaration | ';' )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==EOF||LA11_0==IDENTIFIER||LA11_0==ABSTRACT||LA11_0==BOOLEAN||LA11_0==BYTE||(LA11_0>=CHAR && LA11_0<=CLASS)||LA11_0==DOUBLE||LA11_0==ENUM||LA11_0==FINAL||LA11_0==FLOAT||(LA11_0>=INT && LA11_0<=NATIVE)||(LA11_0>=PRIVATE && LA11_0<=PUBLIC)||(LA11_0>=SHORT && LA11_0<=STRICTFP)||LA11_0==SYNCHRONIZED||LA11_0==TRANSIENT||(LA11_0>=VOID && LA11_0<=VOLATILE)||LA11_0==MONKEYS_AT||LA11_0==LT) ) {
                alt11=1;
            }
            else if ( (LA11_0==SEMI) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // Java.g:416:9: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration1017);
                    classOrInterfaceDeclaration24=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration24.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:417:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration1027); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // Java.g:420:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.classDeclaration_return classDeclaration26 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration27 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // Java.g:421:5: ( classDeclaration | interfaceDeclaration )
            int alt12=2;
            alt12 = dfa12.predict(input);
            switch (alt12) {
                case 1 :
                    // Java.g:421:10: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration1049);
                    classDeclaration26=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration26.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:422:9: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration1059);
                    interfaceDeclaration27=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // Java.g:426:1: modifiers : ( ( modifiers1 )? ) -> ^( Modifiers ( modifiers1 )? ) ;
    public final JavaParser.modifiers_return modifiers() throws RecognitionException {
        JavaParser.modifiers_return retval = new JavaParser.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifiers1_return modifiers128 = null;


        RewriteRuleSubtreeStream stream_modifiers1=new RewriteRuleSubtreeStream(adaptor,"rule modifiers1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // Java.g:427:5: ( ( ( modifiers1 )? ) -> ^( Modifiers ( modifiers1 )? ) )
            // Java.g:427:9: ( ( modifiers1 )? )
            {
            // Java.g:427:9: ( ( modifiers1 )? )
            // Java.g:427:10: ( modifiers1 )?
            {
            // Java.g:427:10: ( modifiers1 )?
            int alt13=2;
            alt13 = dfa13.predict(input);
            switch (alt13) {
                case 1 :
                    // Java.g:0:0: modifiers1
                    {
                    pushFollow(FOLLOW_modifiers1_in_modifiers1086);
                    modifiers128=modifiers1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers1.add(modifiers128.getTree());

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: modifiers1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:9: -> ^( Modifiers ( modifiers1 )? )
            {
                // Java.g:428:12: ^( Modifiers ( modifiers1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Modifiers, "Modifiers"), root_1);

                // Java.g:428:24: ( modifiers1 )?
                if ( stream_modifiers1.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifiers1.nextTree());

                }
                stream_modifiers1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public static class modifiers1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers1"
    // Java.g:431:1: modifiers1 : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* ;
    public final JavaParser.modifiers1_return modifiers1() throws RecognitionException {
        JavaParser.modifiers1_return retval = new JavaParser.modifiers1_return();
        retval.start = input.LT(1);
        int modifiers1_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal30=null;
        Token string_literal31=null;
        Token string_literal32=null;
        Token string_literal33=null;
        Token string_literal34=null;
        Token string_literal35=null;
        Token string_literal36=null;
        Token string_literal37=null;
        Token string_literal38=null;
        Token string_literal39=null;
        Token string_literal40=null;
        JavaParser.annotation_return annotation29 = null;


        Object string_literal30_tree=null;
        Object string_literal31_tree=null;
        Object string_literal32_tree=null;
        Object string_literal33_tree=null;
        Object string_literal34_tree=null;
        Object string_literal35_tree=null;
        Object string_literal36_tree=null;
        Object string_literal37_tree=null;
        Object string_literal38_tree=null;
        Object string_literal39_tree=null;
        Object string_literal40_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // Java.g:432:5: ( ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* )
            // Java.g:433:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
            {
            root_0 = (Object)adaptor.nil();

            // Java.g:433:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
            loop14:
            do {
                int alt14=13;
                alt14 = dfa14.predict(input);
                switch (alt14) {
            	case 1 :
            	    // Java.g:433:10: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_modifiers11133);
            	    annotation29=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation29.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Java.g:434:9: 'public'
            	    {
            	    string_literal30=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifiers11143); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal30_tree = (Object)adaptor.create(string_literal30);
            	    adaptor.addChild(root_0, string_literal30_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // Java.g:435:9: 'protected'
            	    {
            	    string_literal31=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifiers11153); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal31_tree = (Object)adaptor.create(string_literal31);
            	    adaptor.addChild(root_0, string_literal31_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // Java.g:436:9: 'private'
            	    {
            	    string_literal32=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifiers11163); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal32_tree = (Object)adaptor.create(string_literal32);
            	    adaptor.addChild(root_0, string_literal32_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // Java.g:437:9: 'static'
            	    {
            	    string_literal33=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifiers11173); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal33_tree = (Object)adaptor.create(string_literal33);
            	    adaptor.addChild(root_0, string_literal33_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // Java.g:438:9: 'abstract'
            	    {
            	    string_literal34=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifiers11183); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal34_tree = (Object)adaptor.create(string_literal34);
            	    adaptor.addChild(root_0, string_literal34_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // Java.g:439:9: 'final'
            	    {
            	    string_literal35=(Token)match(input,FINAL,FOLLOW_FINAL_in_modifiers11193); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal35_tree = (Object)adaptor.create(string_literal35);
            	    adaptor.addChild(root_0, string_literal35_tree);
            	    }

            	    }
            	    break;
            	case 8 :
            	    // Java.g:440:9: 'native'
            	    {
            	    string_literal36=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifiers11203); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal36_tree = (Object)adaptor.create(string_literal36);
            	    adaptor.addChild(root_0, string_literal36_tree);
            	    }

            	    }
            	    break;
            	case 9 :
            	    // Java.g:441:9: 'synchronized'
            	    {
            	    string_literal37=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifiers11213); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal37_tree = (Object)adaptor.create(string_literal37);
            	    adaptor.addChild(root_0, string_literal37_tree);
            	    }

            	    }
            	    break;
            	case 10 :
            	    // Java.g:442:9: 'transient'
            	    {
            	    string_literal38=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifiers11223); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal38_tree = (Object)adaptor.create(string_literal38);
            	    adaptor.addChild(root_0, string_literal38_tree);
            	    }

            	    }
            	    break;
            	case 11 :
            	    // Java.g:443:9: 'volatile'
            	    {
            	    string_literal39=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifiers11233); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal39_tree = (Object)adaptor.create(string_literal39);
            	    adaptor.addChild(root_0, string_literal39_tree);
            	    }

            	    }
            	    break;
            	case 12 :
            	    // Java.g:444:9: 'strictfp'
            	    {
            	    string_literal40=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifiers11243); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal40_tree = (Object)adaptor.create(string_literal40);
            	    adaptor.addChild(root_0, string_literal40_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, modifiers1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers1"

    public static class variableModifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifiers"
    // Java.g:449:1: variableModifiers : ( 'final' | annotation )* ;
    public final JavaParser.variableModifiers_return variableModifiers() throws RecognitionException {
        JavaParser.variableModifiers_return retval = new JavaParser.variableModifiers_return();
        retval.start = input.LT(1);
        int variableModifiers_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal41=null;
        JavaParser.annotation_return annotation42 = null;


        Object string_literal41_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // Java.g:450:5: ( ( 'final' | annotation )* )
            // Java.g:450:9: ( 'final' | annotation )*
            {
            root_0 = (Object)adaptor.nil();

            // Java.g:450:9: ( 'final' | annotation )*
            loop15:
            do {
                int alt15=3;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==FINAL) ) {
                    alt15=1;
                }
                else if ( (LA15_0==MONKEYS_AT) ) {
                    alt15=2;
                }


                switch (alt15) {
            	case 1 :
            	    // Java.g:450:13: 'final'
            	    {
            	    string_literal41=(Token)match(input,FINAL,FOLLOW_FINAL_in_variableModifiers1275); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal41_tree = (Object)adaptor.create(string_literal41);
            	    adaptor.addChild(root_0, string_literal41_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // Java.g:451:13: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_variableModifiers1289);
            	    annotation42=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation42.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, variableModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifiers"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // Java.g:456:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.normalClassDeclaration_return normalClassDeclaration43 = null;

        JavaParser.enumDeclaration_return enumDeclaration44 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // Java.g:457:5: ( normalClassDeclaration | enumDeclaration )
            int alt16=2;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    // Java.g:457:9: normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration1325);
                    normalClassDeclaration43=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalClassDeclaration43.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:458:9: enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration1335);
                    enumDeclaration44=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration44.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // Java.g:461:1: normalClassDeclaration : modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( ClassDeclaration modifiers IDENTIFIER ( typeParameters )? classBody ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? ) ;
    public final JavaParser.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        JavaParser.normalClassDeclaration_return retval = new JavaParser.normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal46=null;
        Token IDENTIFIER47=null;
        Token string_literal49=null;
        Token string_literal51=null;
        JavaParser.modifiers_return modifiers45 = null;

        JavaParser.typeParameters_return typeParameters48 = null;

        JavaParser.type_return type50 = null;

        JavaParser.typeList_return typeList52 = null;

        JavaParser.classBody_return classBody53 = null;


        Object string_literal46_tree=null;
        Object IDENTIFIER47_tree=null;
        Object string_literal49_tree=null;
        Object string_literal51_tree=null;
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // Java.g:462:5: ( modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( ClassDeclaration modifiers IDENTIFIER ( typeParameters )? classBody ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? ) )
            // Java.g:462:9: modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            pushFollow(FOLLOW_modifiers_in_normalClassDeclaration1355);
            modifiers45=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers45.getTree());
            string_literal46=(Token)match(input,CLASS,FOLLOW_CLASS_in_normalClassDeclaration1358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(string_literal46);

            IDENTIFIER47=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_normalClassDeclaration1360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER47);

            // Java.g:463:9: ( typeParameters )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==LT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // Java.g:463:10: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration1371);
                    typeParameters48=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters48.getTree());

                    }
                    break;

            }

            // Java.g:465:9: ( 'extends' type )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==EXTENDS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Java.g:465:10: 'extends' type
                    {
                    string_literal49=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_normalClassDeclaration1393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTENDS.add(string_literal49);

                    pushFollow(FOLLOW_type_in_normalClassDeclaration1395);
                    type50=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type50.getTree());

                    }
                    break;

            }

            // Java.g:467:9: ( 'implements' typeList )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==IMPLEMENTS) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Java.g:467:10: 'implements' typeList
                    {
                    string_literal51=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_normalClassDeclaration1417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IMPLEMENTS.add(string_literal51);

                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1419);
                    typeList52=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList52.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1452);
            classBody53=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody53.getTree());


            // AST REWRITE
            // elements: IMPLEMENTS, type, typeParameters, IDENTIFIER, modifiers, EXTENDS, classBody, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:9: -> ^( ClassDeclaration modifiers IDENTIFIER ( typeParameters )? classBody ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? )
            {
                // Java.g:470:12: ^( ClassDeclaration modifiers IDENTIFIER ( typeParameters )? classBody ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ClassDeclaration, "ClassDeclaration"), root_1);

                adaptor.addChild(root_1, stream_modifiers.nextTree());
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:470:52: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();
                adaptor.addChild(root_1, stream_classBody.nextTree());
                // Java.g:472:13: ( ^( 'extends' type ) )?
                if ( stream_type.hasNext()||stream_EXTENDS.hasNext() ) {
                    // Java.g:472:13: ^( 'extends' type )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_EXTENDS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_type.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_type.reset();
                stream_EXTENDS.reset();
                // Java.g:473:13: ( ^( 'implements' typeList ) )?
                if ( stream_IMPLEMENTS.hasNext()||stream_typeList.hasNext() ) {
                    // Java.g:473:13: ^( 'implements' typeList )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_IMPLEMENTS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_IMPLEMENTS.reset();
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // Java.g:478:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' -> ^( TypeParameters typeParameter ( typeParameter )* ) ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal54=null;
        Token char_literal56=null;
        Token char_literal58=null;
        JavaParser.typeParameter_return typeParameter55 = null;

        JavaParser.typeParameter_return typeParameter57 = null;


        Object char_literal54_tree=null;
        Object char_literal56_tree=null;
        Object char_literal58_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // Java.g:479:5: ( '<' typeParameter ( ',' typeParameter )* '>' -> ^( TypeParameters typeParameter ( typeParameter )* ) )
            // Java.g:479:9: '<' typeParameter ( ',' typeParameter )* '>'
            {
            char_literal54=(Token)match(input,LT,FOLLOW_LT_in_typeParameters1557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(char_literal54);

            pushFollow(FOLLOW_typeParameter_in_typeParameters1571);
            typeParameter55=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(typeParameter55.getTree());
            // Java.g:481:13: ( ',' typeParameter )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==COMMA) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // Java.g:481:14: ',' typeParameter
            	    {
            	    char_literal56=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters1586); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal56);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters1588);
            	    typeParameter57=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(typeParameter57.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            char_literal58=(Token)match(input,GT,FOLLOW_GT_in_typeParameters1613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GT.add(char_literal58);



            // AST REWRITE
            // elements: typeParameter, typeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:9: -> ^( TypeParameters typeParameter ( typeParameter )* )
            {
                // Java.g:484:12: ^( TypeParameters typeParameter ( typeParameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypeParameters, "TypeParameters"), root_1);

                adaptor.addChild(root_1, stream_typeParameter.nextTree());
                // Java.g:484:43: ( typeParameter )*
                while ( stream_typeParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameter.nextTree());

                }
                stream_typeParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // Java.g:487:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? -> ^( IDENTIFIER ( typeBound )? ) ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER59=null;
        Token string_literal60=null;
        JavaParser.typeBound_return typeBound61 = null;


        Object IDENTIFIER59_tree=null;
        Object string_literal60_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeBound=new RewriteRuleSubtreeStream(adaptor,"rule typeBound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // Java.g:488:5: ( IDENTIFIER ( 'extends' typeBound )? -> ^( IDENTIFIER ( typeBound )? ) )
            // Java.g:488:9: IDENTIFIER ( 'extends' typeBound )?
            {
            IDENTIFIER59=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_typeParameter1654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER59);

            // Java.g:489:9: ( 'extends' typeBound )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==EXTENDS) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Java.g:489:10: 'extends' typeBound
                    {
                    string_literal60=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_typeParameter1665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTENDS.add(string_literal60);

                    pushFollow(FOLLOW_typeBound_in_typeParameter1667);
                    typeBound61=typeBound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeBound.add(typeBound61.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: IDENTIFIER, typeBound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:9: -> ^( IDENTIFIER ( typeBound )? )
            {
                // Java.g:491:12: ^( IDENTIFIER ( typeBound )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_IDENTIFIER.nextNode(), root_1);

                // Java.g:491:25: ( typeBound )?
                if ( stream_typeBound.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeBound.nextTree());

                }
                stream_typeBound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class typeBound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBound"
    // Java.g:495:1: typeBound : type ( '&' type )* ;
    public final JavaParser.typeBound_return typeBound() throws RecognitionException {
        JavaParser.typeBound_return retval = new JavaParser.typeBound_return();
        retval.start = input.LT(1);
        int typeBound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal63=null;
        JavaParser.type_return type62 = null;

        JavaParser.type_return type64 = null;


        Object char_literal63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // Java.g:496:5: ( type ( '&' type )* )
            // Java.g:496:9: type ( '&' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeBound1718);
            type62=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type62.getTree());
            // Java.g:497:9: ( '&' type )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==AMP) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // Java.g:497:10: '&' type
            	    {
            	    char_literal63=(Token)match(input,AMP,FOLLOW_AMP_in_typeBound1729); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeBound1732);
            	    type64=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type64.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, typeBound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeBound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // Java.g:502:1: enumDeclaration : modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody -> ^( EnumDeclaration modifiers IDENTIFIER ( ^( 'implements' typeList ) )? enumBody ) ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal66=null;
        Token IDENTIFIER67=null;
        Token string_literal68=null;
        JavaParser.modifiers_return modifiers65 = null;

        JavaParser.typeList_return typeList69 = null;

        JavaParser.enumBody_return enumBody70 = null;


        Object string_literal66_tree=null;
        Object IDENTIFIER67_tree=null;
        Object string_literal68_tree=null;
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // Java.g:503:5: ( modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody -> ^( EnumDeclaration modifiers IDENTIFIER ( ^( 'implements' typeList ) )? enumBody ) )
            // Java.g:503:9: modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
            {
            pushFollow(FOLLOW_modifiers_in_enumDeclaration1764);
            modifiers65=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers65.getTree());
            // Java.g:504:9: ( 'enum' )
            // Java.g:504:10: 'enum'
            {
            string_literal66=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(string_literal66);


            }

            IDENTIFIER67=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumDeclaration1797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER67);

            // Java.g:507:9: ( 'implements' typeList )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==IMPLEMENTS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // Java.g:507:10: 'implements' typeList
                    {
                    string_literal68=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_enumDeclaration1808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IMPLEMENTS.add(string_literal68);

                    pushFollow(FOLLOW_typeList_in_enumDeclaration1810);
                    typeList69=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList69.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1831);
            enumBody70=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody70.getTree());


            // AST REWRITE
            // elements: IDENTIFIER, typeList, IMPLEMENTS, modifiers, enumBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:9: -> ^( EnumDeclaration modifiers IDENTIFIER ( ^( 'implements' typeList ) )? enumBody )
            {
                // Java.g:510:12: ^( EnumDeclaration modifiers IDENTIFIER ( ^( 'implements' typeList ) )? enumBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EnumDeclaration, "EnumDeclaration"), root_1);

                adaptor.addChild(root_1, stream_modifiers.nextTree());
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:510:51: ( ^( 'implements' typeList ) )?
                if ( stream_typeList.hasNext()||stream_IMPLEMENTS.hasNext() ) {
                    // Java.g:510:51: ^( 'implements' typeList )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_IMPLEMENTS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeList.reset();
                stream_IMPLEMENTS.reset();
                adaptor.addChild(root_1, stream_enumBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // Java.g:515:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ^( EnumBody ( enumConstants )? ( enumBodyDeclarations )? ) ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal71=null;
        Token char_literal73=null;
        Token char_literal75=null;
        JavaParser.enumConstants_return enumConstants72 = null;

        JavaParser.enumBodyDeclarations_return enumBodyDeclarations74 = null;


        Object char_literal71_tree=null;
        Object char_literal73_tree=null;
        Object char_literal75_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // Java.g:516:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ^( EnumBody ( enumConstants )? ( enumBodyDeclarations )? ) )
            // Java.g:516:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
            char_literal71=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_enumBody1896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal71);

            // Java.g:517:9: ( enumConstants )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==IDENTIFIER||LA24_0==MONKEYS_AT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Java.g:517:10: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1907);
                    enumConstants72=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstants.add(enumConstants72.getTree());

                    }
                    break;

            }

            // Java.g:519:9: ( ',' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==COMMA) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // Java.g:0:0: ','
                    {
                    char_literal73=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumBody1929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal73);


                    }
                    break;

            }

            // Java.g:520:9: ( enumBodyDeclarations )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SEMI) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // Java.g:520:10: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody1942);
                    enumBodyDeclarations74=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations74.getTree());

                    }
                    break;

            }

            char_literal75=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_enumBody1964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal75);



            // AST REWRITE
            // elements: enumBodyDeclarations, enumConstants
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:9: -> ^( EnumBody ( enumConstants )? ( enumBodyDeclarations )? )
            {
                // Java.g:523:12: ^( EnumBody ( enumConstants )? ( enumBodyDeclarations )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EnumBody, "EnumBody"), root_1);

                // Java.g:523:23: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumConstants.nextTree());

                }
                stream_enumConstants.reset();
                // Java.g:523:40: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    adaptor.addChild(root_1, stream_enumBodyDeclarations.nextTree());

                }
                stream_enumBodyDeclarations.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // Java.g:526:1: enumConstants : enumConstant ( ',' enumConstant )* ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal77=null;
        JavaParser.enumConstant_return enumConstant76 = null;

        JavaParser.enumConstant_return enumConstant78 = null;


        Object char_literal77_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // Java.g:527:5: ( enumConstant ( ',' enumConstant )* )
            // Java.g:527:9: enumConstant ( ',' enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants2008);
            enumConstant76=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant76.getTree());
            // Java.g:528:9: ( ',' enumConstant )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==COMMA) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==IDENTIFIER||LA27_1==MONKEYS_AT) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // Java.g:528:10: ',' enumConstant
            	    {
            	    char_literal77=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants2019); if (state.failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants2022);
            	    enumConstant78=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant78.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // Java.g:532:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? -> ^( EnumConstant ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ) ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER80=null;
        JavaParser.annotations_return annotations79 = null;

        JavaParser.arguments_return arguments81 = null;

        JavaParser.classBody_return classBody82 = null;


        Object IDENTIFIER80_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // Java.g:537:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? -> ^( EnumConstant ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ) )
            // Java.g:537:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
            {
            // Java.g:537:9: ( annotations )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==MONKEYS_AT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // Java.g:537:10: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant2056);
                    annotations79=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations79.getTree());

                    }
                    break;

            }

            IDENTIFIER80=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumConstant2077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER80);

            // Java.g:540:9: ( arguments )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==LPAREN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // Java.g:540:10: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant2088);
                    arguments81=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments81.getTree());

                    }
                    break;

            }

            // Java.g:542:9: ( classBody )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==LBRACE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // Java.g:542:10: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant2110);
                    classBody82=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody82.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classBody, IDENTIFIER, annotations, arguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:9: -> ^( EnumConstant ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
            {
                // Java.g:546:12: ^( EnumConstant ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EnumConstant, "EnumConstant"), root_1);

                // Java.g:546:27: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:546:53: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // Java.g:546:66: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // Java.g:549:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal83=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration84 = null;


        Object char_literal83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // Java.g:550:5: ( ';' ( classBodyDeclaration )* )
            // Java.g:550:9: ';' ( classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            char_literal83=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumBodyDeclarations2182); if (state.failed) return retval;
            // Java.g:551:9: ( classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==IDENTIFIER||LA31_0==ABSTRACT||LA31_0==BOOLEAN||LA31_0==BYTE||(LA31_0>=CHAR && LA31_0<=CLASS)||LA31_0==DOUBLE||LA31_0==ENUM||LA31_0==FINAL||LA31_0==FLOAT||(LA31_0>=INT && LA31_0<=NATIVE)||(LA31_0>=PRIVATE && LA31_0<=PUBLIC)||(LA31_0>=SHORT && LA31_0<=STRICTFP)||LA31_0==SYNCHRONIZED||LA31_0==TRANSIENT||(LA31_0>=VOID && LA31_0<=VOLATILE)||LA31_0==LBRACE||LA31_0==SEMI||LA31_0==MONKEYS_AT||LA31_0==LT) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Java.g:551:10: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations2194);
            	    classBodyDeclaration84=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration84.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // Java.g:555:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final JavaParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        JavaParser.interfaceDeclaration_return retval = new JavaParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration85 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration86 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // Java.g:556:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // Java.g:556:9: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration2225);
                    normalInterfaceDeclaration85=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration85.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:557:9: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration2235);
                    annotationTypeDeclaration86=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration86.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // Java.g:560:1: normalInterfaceDeclaration : modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( InterfaceDeclaration modifiers IDENTIFIER ( typeParameters )? interfaceBody ( ^( 'extends' typeList ) )? ) ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal88=null;
        Token IDENTIFIER89=null;
        Token string_literal91=null;
        JavaParser.modifiers_return modifiers87 = null;

        JavaParser.typeParameters_return typeParameters90 = null;

        JavaParser.typeList_return typeList92 = null;

        JavaParser.interfaceBody_return interfaceBody93 = null;


        Object string_literal88_tree=null;
        Object IDENTIFIER89_tree=null;
        Object string_literal91_tree=null;
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // Java.g:561:5: ( modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( InterfaceDeclaration modifiers IDENTIFIER ( typeParameters )? interfaceBody ( ^( 'extends' typeList ) )? ) )
            // Java.g:561:9: modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            pushFollow(FOLLOW_modifiers_in_normalInterfaceDeclaration2259);
            modifiers87=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers87.getTree());
            string_literal88=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_normalInterfaceDeclaration2261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal88);

            IDENTIFIER89=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_normalInterfaceDeclaration2263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER89);

            // Java.g:562:9: ( typeParameters )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==LT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Java.g:562:10: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration2274);
                    typeParameters90=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters90.getTree());

                    }
                    break;

            }

            // Java.g:564:9: ( 'extends' typeList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==EXTENDS) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // Java.g:564:10: 'extends' typeList
                    {
                    string_literal91=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_normalInterfaceDeclaration2296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTENDS.add(string_literal91);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration2298);
                    typeList92=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList92.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration2319);
            interfaceBody93=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody93.getTree());


            // AST REWRITE
            // elements: typeList, interfaceBody, typeParameters, EXTENDS, modifiers, IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:9: -> ^( InterfaceDeclaration modifiers IDENTIFIER ( typeParameters )? interfaceBody ( ^( 'extends' typeList ) )? )
            {
                // Java.g:567:12: ^( InterfaceDeclaration modifiers IDENTIFIER ( typeParameters )? interfaceBody ( ^( 'extends' typeList ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(InterfaceDeclaration, "InterfaceDeclaration"), root_1);

                adaptor.addChild(root_1, stream_modifiers.nextTree());
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:567:56: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();
                adaptor.addChild(root_1, stream_interfaceBody.nextTree());
                // Java.g:569:13: ( ^( 'extends' typeList ) )?
                if ( stream_typeList.hasNext()||stream_EXTENDS.hasNext() ) {
                    // Java.g:569:13: ^( 'extends' typeList )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_EXTENDS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeList.reset();
                stream_EXTENDS.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // Java.g:573:1: typeList : type ( ',' type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal95=null;
        JavaParser.type_return type94 = null;

        JavaParser.type_return type96 = null;


        Object char_literal95_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // Java.g:574:5: ( type ( ',' type )* )
            // Java.g:574:9: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList2404);
            type94=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type94.getTree());
            // Java.g:575:9: ( ',' type )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==COMMA) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Java.g:575:10: ',' type
            	    {
            	    char_literal95=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList2415); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList2418);
            	    type96=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type96.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // Java.g:579:1: classBody : '{' ( classBodyDeclaration )* '}' -> ^( ClassBody ( classBodyDeclaration )* ) ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal97=null;
        Token char_literal99=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration98 = null;


        Object char_literal97_tree=null;
        Object char_literal99_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // Java.g:580:5: ( '{' ( classBodyDeclaration )* '}' -> ^( ClassBody ( classBodyDeclaration )* ) )
            // Java.g:580:9: '{' ( classBodyDeclaration )* '}'
            {
            char_literal97=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_classBody2449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal97);

            // Java.g:581:9: ( classBodyDeclaration )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==EOF||LA36_0==IDENTIFIER||LA36_0==ABSTRACT||LA36_0==BOOLEAN||LA36_0==BYTE||(LA36_0>=CHAR && LA36_0<=CLASS)||LA36_0==DOUBLE||LA36_0==ENUM||LA36_0==FINAL||LA36_0==FLOAT||(LA36_0>=INT && LA36_0<=NATIVE)||(LA36_0>=PRIVATE && LA36_0<=PUBLIC)||(LA36_0>=SHORT && LA36_0<=STRICTFP)||LA36_0==SYNCHRONIZED||LA36_0==TRANSIENT||(LA36_0>=VOID && LA36_0<=VOLATILE)||LA36_0==LBRACE||LA36_0==SEMI||LA36_0==MONKEYS_AT||LA36_0==LT) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Java.g:581:10: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody2461);
            	    classBodyDeclaration98=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration98.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            char_literal99=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_classBody2483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal99);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:9: -> ^( ClassBody ( classBodyDeclaration )* )
            {
                // Java.g:584:12: ^( ClassBody ( classBodyDeclaration )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ClassBody, "ClassBody"), root_1);

                // Java.g:584:24: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBodyDeclaration.nextTree());

                }
                stream_classBodyDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // Java.g:587:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' -> ^( InterfaceBody ( interfaceBodyDeclaration )* ) ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal100=null;
        Token char_literal102=null;
        JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration101 = null;


        Object char_literal100_tree=null;
        Object char_literal102_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_interfaceBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // Java.g:588:5: ( '{' ( interfaceBodyDeclaration )* '}' -> ^( InterfaceBody ( interfaceBodyDeclaration )* ) )
            // Java.g:588:9: '{' ( interfaceBodyDeclaration )* '}'
            {
            char_literal100=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_interfaceBody2522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal100);

            // Java.g:589:9: ( interfaceBodyDeclaration )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==EOF||LA37_0==IDENTIFIER||LA37_0==ABSTRACT||LA37_0==BOOLEAN||LA37_0==BYTE||(LA37_0>=CHAR && LA37_0<=CLASS)||LA37_0==DOUBLE||LA37_0==ENUM||LA37_0==FINAL||LA37_0==FLOAT||(LA37_0>=INT && LA37_0<=NATIVE)||(LA37_0>=PRIVATE && LA37_0<=PUBLIC)||(LA37_0>=SHORT && LA37_0<=STRICTFP)||LA37_0==SYNCHRONIZED||LA37_0==TRANSIENT||(LA37_0>=VOID && LA37_0<=VOLATILE)||LA37_0==SEMI||LA37_0==MONKEYS_AT||LA37_0==LT) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // Java.g:589:10: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody2534);
            	    interfaceBodyDeclaration101=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_interfaceBodyDeclaration.add(interfaceBodyDeclaration101.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            char_literal102=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_interfaceBody2556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal102);



            // AST REWRITE
            // elements: interfaceBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:9: -> ^( InterfaceBody ( interfaceBodyDeclaration )* )
            {
                // Java.g:592:12: ^( InterfaceBody ( interfaceBodyDeclaration )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(InterfaceBody, "InterfaceBody"), root_1);

                // Java.g:592:28: ( interfaceBodyDeclaration )*
                while ( stream_interfaceBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_interfaceBodyDeclaration.nextTree());

                }
                stream_interfaceBodyDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // Java.g:595:1: classBodyDeclaration : ( ';' | ( 'static' )? block -> ^( ClassBlock ( 'static' )? block ) | memberDecl );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal103=null;
        Token string_literal104=null;
        JavaParser.block_return block105 = null;

        JavaParser.memberDecl_return memberDecl106 = null;


        Object char_literal103_tree=null;
        Object string_literal104_tree=null;
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // Java.g:596:5: ( ';' | ( 'static' )? block -> ^( ClassBlock ( 'static' )? block ) | memberDecl )
            int alt39=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt39=1;
                }
                break;
            case STATIC:
                {
                int LA39_2 = input.LA(2);

                if ( (LA39_2==LBRACE) ) {
                    alt39=2;
                }
                else if ( (LA39_2==IDENTIFIER||LA39_2==ABSTRACT||LA39_2==BOOLEAN||LA39_2==BYTE||(LA39_2>=CHAR && LA39_2<=CLASS)||LA39_2==DOUBLE||LA39_2==ENUM||LA39_2==FINAL||LA39_2==FLOAT||(LA39_2>=INT && LA39_2<=NATIVE)||(LA39_2>=PRIVATE && LA39_2<=PUBLIC)||(LA39_2>=SHORT && LA39_2<=STRICTFP)||LA39_2==SYNCHRONIZED||LA39_2==TRANSIENT||(LA39_2>=VOID && LA39_2<=VOLATILE)||LA39_2==MONKEYS_AT||LA39_2==LT) ) {
                    alt39=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;
                }
                }
                break;
            case LBRACE:
                {
                alt39=2;
                }
                break;
            case IDENTIFIER:
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case ENUM:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOID:
            case VOLATILE:
            case MONKEYS_AT:
            case LT:
                {
                alt39=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // Java.g:596:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal103=(Token)match(input,SEMI,FOLLOW_SEMI_in_classBodyDeclaration2595); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // Java.g:597:9: ( 'static' )? block
                    {
                    // Java.g:597:9: ( 'static' )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==STATIC) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // Java.g:597:10: 'static'
                            {
                            string_literal104=(Token)match(input,STATIC,FOLLOW_STATIC_in_classBodyDeclaration2607); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STATIC.add(string_literal104);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration2629);
                    block105=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block105.getTree());


                    // AST REWRITE
                    // elements: block, STATIC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 600:9: -> ^( ClassBlock ( 'static' )? block )
                    {
                        // Java.g:600:12: ^( ClassBlock ( 'static' )? block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ClassBlock, "ClassBlock"), root_1);

                        // Java.g:600:25: ( 'static' )?
                        if ( stream_STATIC.hasNext() ) {
                            adaptor.addChild(root_1, stream_STATIC.nextNode());

                        }
                        stream_STATIC.reset();
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:601:9: memberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2660);
                    memberDecl106=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberDecl106.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class memberDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // Java.g:604:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
    public final JavaParser.memberDecl_return memberDecl() throws RecognitionException {
        JavaParser.memberDecl_return retval = new JavaParser.memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.fieldDeclaration_return fieldDeclaration107 = null;

        JavaParser.methodDeclaration_return methodDeclaration108 = null;

        JavaParser.classDeclaration_return classDeclaration109 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration110 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // Java.g:605:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
            int alt40=4;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // Java.g:605:10: fieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl2681);
                    fieldDeclaration107=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration107.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:606:10: methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl2692);
                    methodDeclaration108=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaration108.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:607:10: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl2703);
                    classDeclaration109=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration109.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:608:10: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl2714);
                    interfaceDeclaration110=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration110.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // Java.g:612:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? formalParameters ( ^( 'throws' qualifiedNameList ) )? ^( Block ( explicitConstructorInvocation )? ( blockStatement )* ) ) | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? blockOrSemi -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? blockOrSemi ) );
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER113=null;
        Token string_literal115=null;
        Token char_literal117=null;
        Token char_literal120=null;
        Token string_literal124=null;
        Token IDENTIFIER125=null;
        Token char_literal127=null;
        Token char_literal128=null;
        Token string_literal129=null;
        JavaParser.modifiers_return modifiers111 = null;

        JavaParser.typeParameters_return typeParameters112 = null;

        JavaParser.formalParameters_return formalParameters114 = null;

        JavaParser.qualifiedNameList_return qualifiedNameList116 = null;

        JavaParser.explicitConstructorInvocation_return explicitConstructorInvocation118 = null;

        JavaParser.blockStatement_return blockStatement119 = null;

        JavaParser.modifiers_return modifiers121 = null;

        JavaParser.typeParameters_return typeParameters122 = null;

        JavaParser.type_return type123 = null;

        JavaParser.formalParameters_return formalParameters126 = null;

        JavaParser.qualifiedNameList_return qualifiedNameList130 = null;

        JavaParser.blockOrSemi_return blockOrSemi131 = null;


        Object IDENTIFIER113_tree=null;
        Object string_literal115_tree=null;
        Object char_literal117_tree=null;
        Object char_literal120_tree=null;
        Object string_literal124_tree=null;
        Object IDENTIFIER125_tree=null;
        Object char_literal127_tree=null;
        Object char_literal128_tree=null;
        Object string_literal129_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_blockOrSemi=new RewriteRuleSubtreeStream(adaptor,"rule blockOrSemi");
        RewriteRuleSubtreeStream stream_explicitConstructorInvocation=new RewriteRuleSubtreeStream(adaptor,"rule explicitConstructorInvocation");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // Java.g:613:5: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? formalParameters ( ^( 'throws' qualifiedNameList ) )? ^( Block ( explicitConstructorInvocation )? ( blockStatement )* ) ) | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? blockOrSemi -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? blockOrSemi ) )
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // Java.g:615:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
                    {
                    pushFollow(FOLLOW_modifiers_in_methodDeclaration2752);
                    modifiers111=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers111.getTree());
                    // Java.g:616:9: ( typeParameters )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==LT) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // Java.g:616:10: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_methodDeclaration2763);
                            typeParameters112=typeParameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters112.getTree());

                            }
                            break;

                    }

                    IDENTIFIER113=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodDeclaration2784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER113);

                    pushFollow(FOLLOW_formalParameters_in_methodDeclaration2794);
                    formalParameters114=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters114.getTree());
                    // Java.g:620:9: ( 'throws' qualifiedNameList )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==THROWS) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // Java.g:620:10: 'throws' qualifiedNameList
                            {
                            string_literal115=(Token)match(input,THROWS,FOLLOW_THROWS_in_methodDeclaration2805); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THROWS.add(string_literal115);

                            pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaration2807);
                            qualifiedNameList116=qualifiedNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList116.getTree());

                            }
                            break;

                    }

                    char_literal117=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_methodDeclaration2828); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(char_literal117);

                    // Java.g:623:9: ( explicitConstructorInvocation )?
                    int alt43=2;
                    alt43 = dfa43.predict(input);
                    switch (alt43) {
                        case 1 :
                            // Java.g:623:10: explicitConstructorInvocation
                            {
                            pushFollow(FOLLOW_explicitConstructorInvocation_in_methodDeclaration2840);
                            explicitConstructorInvocation118=explicitConstructorInvocation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicitConstructorInvocation.add(explicitConstructorInvocation118.getTree());

                            }
                            break;

                    }

                    // Java.g:625:9: ( blockStatement )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==EOF||(LA44_0>=IDENTIFIER && LA44_0<=NULL)||(LA44_0>=ABSTRACT && LA44_0<=BYTE)||(LA44_0>=CHAR && LA44_0<=CLASS)||LA44_0==CONTINUE||(LA44_0>=DO && LA44_0<=DOUBLE)||LA44_0==ENUM||LA44_0==FINAL||(LA44_0>=FLOAT && LA44_0<=FOR)||LA44_0==IF||(LA44_0>=INT && LA44_0<=NEW)||(LA44_0>=PRIVATE && LA44_0<=THROW)||(LA44_0>=TRANSIENT && LA44_0<=LPAREN)||LA44_0==LBRACE||LA44_0==SEMI||(LA44_0>=BANG && LA44_0<=TILDE)||(LA44_0>=PLUSPLUS && LA44_0<=SUB)||LA44_0==MONKEYS_AT||LA44_0==LT) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Java.g:625:10: blockStatement
                    	    {
                    	    pushFollow(FOLLOW_blockStatement_in_methodDeclaration2862);
                    	    blockStatement119=blockStatement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement119.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);

                    char_literal120=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_methodDeclaration2883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(char_literal120);



                    // AST REWRITE
                    // elements: modifiers, explicitConstructorInvocation, qualifiedNameList, formalParameters, THROWS, blockStatement, typeParameters, IDENTIFIER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 628:9: -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? formalParameters ( ^( 'throws' qualifiedNameList ) )? ^( Block ( explicitConstructorInvocation )? ( blockStatement )* ) )
                    {
                        // Java.g:628:12: ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? formalParameters ( ^( 'throws' qualifiedNameList ) )? ^( Block ( explicitConstructorInvocation )? ( blockStatement )* ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MethodDeclaration, "MethodDeclaration"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        adaptor.addChild(root_1, stream_modifiers.nextTree());
                        // Java.g:628:53: ( typeParameters )?
                        if ( stream_typeParameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeParameters.nextTree());

                        }
                        stream_typeParameters.reset();
                        adaptor.addChild(root_1, stream_formalParameters.nextTree());
                        // Java.g:630:13: ( ^( 'throws' qualifiedNameList ) )?
                        if ( stream_qualifiedNameList.hasNext()||stream_THROWS.hasNext() ) {
                            // Java.g:630:13: ^( 'throws' qualifiedNameList )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(stream_THROWS.nextNode(), root_2);

                            adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_qualifiedNameList.reset();
                        stream_THROWS.reset();
                        // Java.g:631:13: ^( Block ( explicitConstructorInvocation )? ( blockStatement )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(Block, "Block"), root_2);

                        // Java.g:631:21: ( explicitConstructorInvocation )?
                        if ( stream_explicitConstructorInvocation.hasNext() ) {
                            adaptor.addChild(root_2, stream_explicitConstructorInvocation.nextTree());

                        }
                        stream_explicitConstructorInvocation.reset();
                        // Java.g:631:54: ( blockStatement )*
                        while ( stream_blockStatement.hasNext() ) {
                            adaptor.addChild(root_2, stream_blockStatement.nextTree());

                        }
                        stream_blockStatement.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:632:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? blockOrSemi
                    {
                    pushFollow(FOLLOW_modifiers_in_methodDeclaration2975);
                    modifiers121=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers121.getTree());
                    // Java.g:633:9: ( typeParameters )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==LT) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // Java.g:633:10: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_methodDeclaration2986);
                            typeParameters122=typeParameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters122.getTree());

                            }
                            break;

                    }

                    // Java.g:635:9: ( type | 'void' )
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==IDENTIFIER||LA46_0==BOOLEAN||LA46_0==BYTE||LA46_0==CHAR||LA46_0==DOUBLE||LA46_0==FLOAT||LA46_0==INT||LA46_0==LONG||LA46_0==SHORT) ) {
                        alt46=1;
                    }
                    else if ( (LA46_0==VOID) ) {
                        alt46=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 0, input);

                        throw nvae;
                    }
                    switch (alt46) {
                        case 1 :
                            // Java.g:635:10: type
                            {
                            pushFollow(FOLLOW_type_in_methodDeclaration3008);
                            type123=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type123.getTree());

                            }
                            break;
                        case 2 :
                            // Java.g:636:13: 'void'
                            {
                            string_literal124=(Token)match(input,VOID,FOLLOW_VOID_in_methodDeclaration3022); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_VOID.add(string_literal124);


                            }
                            break;

                    }

                    IDENTIFIER125=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodDeclaration3042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER125);

                    pushFollow(FOLLOW_formalParameters_in_methodDeclaration3052);
                    formalParameters126=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters126.getTree());
                    // Java.g:640:9: ( '[' ']' )*
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==LBRACKET) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // Java.g:640:10: '[' ']'
                    	    {
                    	    char_literal127=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_methodDeclaration3063); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal127);

                    	    char_literal128=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_methodDeclaration3065); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal128);


                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);

                    // Java.g:642:9: ( 'throws' qualifiedNameList )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==THROWS) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // Java.g:642:10: 'throws' qualifiedNameList
                            {
                            string_literal129=(Token)match(input,THROWS,FOLLOW_THROWS_in_methodDeclaration3087); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THROWS.add(string_literal129);

                            pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaration3089);
                            qualifiedNameList130=qualifiedNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList130.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_blockOrSemi_in_methodDeclaration3122);
                    blockOrSemi131=blockOrSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blockOrSemi.add(blockOrSemi131.getTree());


                    // AST REWRITE
                    // elements: blockOrSemi, qualifiedNameList, LBRACKET, type, modifiers, THROWS, IDENTIFIER, typeParameters, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 645:9: -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? blockOrSemi )
                    {
                        // Java.g:645:12: ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? blockOrSemi )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MethodDeclaration, "MethodDeclaration"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        adaptor.addChild(root_1, stream_modifiers.nextTree());
                        // Java.g:645:53: ( typeParameters )?
                        if ( stream_typeParameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeParameters.nextTree());

                        }
                        stream_typeParameters.reset();
                        // Java.g:645:71: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_type.nextTree());

                        }
                        stream_type.reset();
                        adaptor.addChild(root_1, stream_formalParameters.nextTree());
                        // Java.g:646:30: ( '[' )*
                        while ( stream_LBRACKET.hasNext() ) {
                            adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                        }
                        stream_LBRACKET.reset();
                        // Java.g:647:13: ( ^( 'throws' qualifiedNameList ) )?
                        if ( stream_qualifiedNameList.hasNext()||stream_THROWS.hasNext() ) {
                            // Java.g:647:13: ^( 'throws' qualifiedNameList )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(stream_THROWS.nextNode(), root_2);

                            adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_qualifiedNameList.reset();
                        stream_THROWS.reset();
                        adaptor.addChild(root_1, stream_blockOrSemi.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class blockOrSemi_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockOrSemi"
    // Java.g:651:1: blockOrSemi : ( ';' | block );
    public final JavaParser.blockOrSemi_return blockOrSemi() throws RecognitionException {
        JavaParser.blockOrSemi_return retval = new JavaParser.blockOrSemi_return();
        retval.start = input.LT(1);
        int blockOrSemi_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal132=null;
        JavaParser.block_return block133 = null;


        Object char_literal132_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // Java.g:652:5: ( ';' | block )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==SEMI) ) {
                alt50=1;
            }
            else if ( (LA50_0==LBRACE) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // Java.g:652:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal132=(Token)match(input,SEMI,FOLLOW_SEMI_in_blockOrSemi3221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal132_tree = (Object)adaptor.create(char_literal132);
                    adaptor.addChild(root_0, char_literal132_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:653:9: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_blockOrSemi3231);
                    block133=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block133.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, blockOrSemi_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockOrSemi"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // Java.g:656:1: fieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' -> ^( FieldDeclaration modifiers type ( variableDeclarator )* ) ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal137=null;
        Token char_literal139=null;
        JavaParser.modifiers_return modifiers134 = null;

        JavaParser.type_return type135 = null;

        JavaParser.variableDeclarator_return variableDeclarator136 = null;

        JavaParser.variableDeclarator_return variableDeclarator138 = null;


        Object char_literal137_tree=null;
        Object char_literal139_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // Java.g:657:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' -> ^( FieldDeclaration modifiers type ( variableDeclarator )* ) )
            // Java.g:657:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
            {
            pushFollow(FOLLOW_modifiers_in_fieldDeclaration3251);
            modifiers134=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers134.getTree());
            pushFollow(FOLLOW_type_in_fieldDeclaration3261);
            type135=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type135.getTree());
            pushFollow(FOLLOW_variableDeclarator_in_fieldDeclaration3271);
            variableDeclarator136=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator136.getTree());
            // Java.g:660:9: ( ',' variableDeclarator )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMA) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // Java.g:660:10: ',' variableDeclarator
            	    {
            	    char_literal137=(Token)match(input,COMMA,FOLLOW_COMMA_in_fieldDeclaration3282); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal137);

            	    pushFollow(FOLLOW_variableDeclarator_in_fieldDeclaration3284);
            	    variableDeclarator138=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator138.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            char_literal139=(Token)match(input,SEMI,FOLLOW_SEMI_in_fieldDeclaration3305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal139);



            // AST REWRITE
            // elements: type, modifiers, variableDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:9: -> ^( FieldDeclaration modifiers type ( variableDeclarator )* )
            {
                // Java.g:663:12: ^( FieldDeclaration modifiers type ( variableDeclarator )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FieldDeclaration, "FieldDeclaration"), root_1);

                adaptor.addChild(root_1, stream_modifiers.nextTree());
                adaptor.addChild(root_1, stream_type.nextTree());
                // Java.g:663:46: ( variableDeclarator )*
                while ( stream_variableDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());

                }
                stream_variableDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // Java.g:666:1: variableDeclarator : IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? -> ^( VariableDeclarator IDENTIFIER ( '[' )* ( variableInitializer )? ) ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER140=null;
        Token char_literal141=null;
        Token char_literal142=null;
        Token char_literal143=null;
        JavaParser.variableInitializer_return variableInitializer144 = null;


        Object IDENTIFIER140_tree=null;
        Object char_literal141_tree=null;
        Object char_literal142_tree=null;
        Object char_literal143_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // Java.g:667:5: ( IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? -> ^( VariableDeclarator IDENTIFIER ( '[' )* ( variableInitializer )? ) )
            // Java.g:667:9: IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )?
            {
            IDENTIFIER140=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variableDeclarator3348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER140);

            // Java.g:668:9: ( '[' ']' )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==LBRACKET) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // Java.g:668:10: '[' ']'
            	    {
            	    char_literal141=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_variableDeclarator3359); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal141);

            	    char_literal142=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_variableDeclarator3361); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal142);


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            // Java.g:670:9: ( '=' variableInitializer )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EQ) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // Java.g:670:10: '=' variableInitializer
                    {
                    char_literal143=(Token)match(input,EQ,FOLLOW_EQ_in_variableDeclarator3383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQ.add(char_literal143);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator3385);
                    variableInitializer144=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer144.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableInitializer, LBRACKET, IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:9: -> ^( VariableDeclarator IDENTIFIER ( '[' )* ( variableInitializer )? )
            {
                // Java.g:672:12: ^( VariableDeclarator IDENTIFIER ( '[' )* ( variableInitializer )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VariableDeclarator, "VariableDeclarator"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:672:44: ( '[' )*
                while ( stream_LBRACKET.hasNext() ) {
                    adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                }
                stream_LBRACKET.reset();
                // Java.g:672:51: ( variableInitializer )?
                if ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // Java.g:675:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal149=null;
        JavaParser.interfaceFieldDeclaration_return interfaceFieldDeclaration145 = null;

        JavaParser.interfaceMethodDeclaration_return interfaceMethodDeclaration146 = null;

        JavaParser.interfaceDeclaration_return interfaceDeclaration147 = null;

        JavaParser.classDeclaration_return classDeclaration148 = null;


        Object char_literal149_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // Java.g:679:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
            int alt54=5;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // Java.g:680:9: interfaceFieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceFieldDeclaration_in_interfaceBodyDeclaration3450);
                    interfaceFieldDeclaration145=interfaceFieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFieldDeclaration145.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:681:9: interfaceMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodDeclaration_in_interfaceBodyDeclaration3460);
                    interfaceMethodDeclaration146=interfaceMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaration146.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:682:9: interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration3470);
                    interfaceDeclaration147=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration147.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:683:9: classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration3480);
                    classDeclaration148=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration148.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:684:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal149=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceBodyDeclaration3490); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class interfaceMethodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaration"
    // Java.g:687:1: interfaceMethodDeclaration : modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' -> ^( InterfaceMethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? ) ;
    public final JavaParser.interfaceMethodDeclaration_return interfaceMethodDeclaration() throws RecognitionException {
        JavaParser.interfaceMethodDeclaration_return retval = new JavaParser.interfaceMethodDeclaration_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal153=null;
        Token IDENTIFIER154=null;
        Token char_literal156=null;
        Token char_literal157=null;
        Token string_literal158=null;
        Token char_literal160=null;
        JavaParser.modifiers_return modifiers150 = null;

        JavaParser.typeParameters_return typeParameters151 = null;

        JavaParser.type_return type152 = null;

        JavaParser.formalParameters_return formalParameters155 = null;

        JavaParser.qualifiedNameList_return qualifiedNameList159 = null;


        Object string_literal153_tree=null;
        Object IDENTIFIER154_tree=null;
        Object char_literal156_tree=null;
        Object char_literal157_tree=null;
        Object string_literal158_tree=null;
        Object char_literal160_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // Java.g:688:5: ( modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' -> ^( InterfaceMethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? ) )
            // Java.g:688:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
            {
            pushFollow(FOLLOW_modifiers_in_interfaceMethodDeclaration3511);
            modifiers150=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers150.getTree());
            // Java.g:689:9: ( typeParameters )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==LT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // Java.g:689:10: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_interfaceMethodDeclaration3522);
                    typeParameters151=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters151.getTree());

                    }
                    break;

            }

            // Java.g:691:9: ( type | 'void' )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==IDENTIFIER||LA56_0==BOOLEAN||LA56_0==BYTE||LA56_0==CHAR||LA56_0==DOUBLE||LA56_0==FLOAT||LA56_0==INT||LA56_0==LONG||LA56_0==SHORT) ) {
                alt56=1;
            }
            else if ( (LA56_0==VOID) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // Java.g:691:10: type
                    {
                    pushFollow(FOLLOW_type_in_interfaceMethodDeclaration3544);
                    type152=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type152.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:692:10: 'void'
                    {
                    string_literal153=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceMethodDeclaration3555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(string_literal153);


                    }
                    break;

            }

            IDENTIFIER154=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interfaceMethodDeclaration3575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER154);

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaration3585);
            formalParameters155=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters155.getTree());
            // Java.g:696:9: ( '[' ']' )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==LBRACKET) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Java.g:696:10: '[' ']'
            	    {
            	    char_literal156=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_interfaceMethodDeclaration3596); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal156);

            	    char_literal157=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_interfaceMethodDeclaration3598); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal157);


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            // Java.g:698:9: ( 'throws' qualifiedNameList )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==THROWS) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // Java.g:698:10: 'throws' qualifiedNameList
                    {
                    string_literal158=(Token)match(input,THROWS,FOLLOW_THROWS_in_interfaceMethodDeclaration3620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROWS.add(string_literal158);

                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaration3622);
                    qualifiedNameList159=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList159.getTree());

                    }
                    break;

            }

            char_literal160=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceMethodDeclaration3635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal160);



            // AST REWRITE
            // elements: IDENTIFIER, formalParameters, typeParameters, LBRACKET, modifiers, THROWS, qualifiedNameList, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 700:9: -> ^( InterfaceMethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? )
            {
                // Java.g:700:12: ^( InterfaceMethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(InterfaceMethodDeclaration, "InterfaceMethodDeclaration"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                adaptor.addChild(root_1, stream_modifiers.nextTree());
                // Java.g:700:62: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();
                // Java.g:701:13: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();
                adaptor.addChild(root_1, stream_formalParameters.nextTree());
                // Java.g:701:38: ( '[' )*
                while ( stream_LBRACKET.hasNext() ) {
                    adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                }
                stream_LBRACKET.reset();
                // Java.g:701:45: ( ^( 'throws' qualifiedNameList ) )?
                if ( stream_THROWS.hasNext()||stream_qualifiedNameList.hasNext() ) {
                    // Java.g:701:45: ^( 'throws' qualifiedNameList )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_THROWS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_THROWS.reset();
                stream_qualifiedNameList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, interfaceMethodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaration"

    public static class interfaceFieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclaration"
    // Java.g:704:1: interfaceFieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' -> ^( InterfaceFieldDeclaration ( modifiers )? type ( variableDeclarator )+ ) ;
    public final JavaParser.interfaceFieldDeclaration_return interfaceFieldDeclaration() throws RecognitionException {
        JavaParser.interfaceFieldDeclaration_return retval = new JavaParser.interfaceFieldDeclaration_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal164=null;
        Token char_literal166=null;
        JavaParser.modifiers_return modifiers161 = null;

        JavaParser.type_return type162 = null;

        JavaParser.variableDeclarator_return variableDeclarator163 = null;

        JavaParser.variableDeclarator_return variableDeclarator165 = null;


        Object char_literal164_tree=null;
        Object char_literal166_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // Java.g:710:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' -> ^( InterfaceFieldDeclaration ( modifiers )? type ( variableDeclarator )+ ) )
            // Java.g:710:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
            {
            pushFollow(FOLLOW_modifiers_in_interfaceFieldDeclaration3711);
            modifiers161=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers161.getTree());
            pushFollow(FOLLOW_type_in_interfaceFieldDeclaration3713);
            type162=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type162.getTree());
            pushFollow(FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3715);
            variableDeclarator163=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator163.getTree());
            // Java.g:711:9: ( ',' variableDeclarator )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==COMMA) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // Java.g:711:10: ',' variableDeclarator
            	    {
            	    char_literal164=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaration3726); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal164);

            	    pushFollow(FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3728);
            	    variableDeclarator165=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator165.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            char_literal166=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceFieldDeclaration3749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal166);



            // AST REWRITE
            // elements: modifiers, type, variableDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:9: -> ^( InterfaceFieldDeclaration ( modifiers )? type ( variableDeclarator )+ )
            {
                // Java.g:714:12: ^( InterfaceFieldDeclaration ( modifiers )? type ( variableDeclarator )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(InterfaceFieldDeclaration, "InterfaceFieldDeclaration"), root_1);

                // Java.g:714:40: ( modifiers )?
                if ( stream_modifiers.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifiers.nextTree());

                }
                stream_modifiers.reset();
                adaptor.addChild(root_1, stream_type.nextTree());
                if ( !(stream_variableDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variableDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());

                }
                stream_variableDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, interfaceFieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaration"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // Java.g:718:1: type : ( classOrInterfaceType ( '[' ']' )* -> ^( Type classOrInterfaceType ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( Type primitiveType ( '[' )* ) );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal168=null;
        Token char_literal169=null;
        Token char_literal171=null;
        Token char_literal172=null;
        JavaParser.classOrInterfaceType_return classOrInterfaceType167 = null;

        JavaParser.primitiveType_return primitiveType170 = null;


        Object char_literal168_tree=null;
        Object char_literal169_tree=null;
        Object char_literal171_tree=null;
        Object char_literal172_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classOrInterfaceType=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // Java.g:719:5: ( classOrInterfaceType ( '[' ']' )* -> ^( Type classOrInterfaceType ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( Type primitiveType ( '[' )* ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==IDENTIFIER) ) {
                alt62=1;
            }
            else if ( (LA62_0==BOOLEAN||LA62_0==BYTE||LA62_0==CHAR||LA62_0==DOUBLE||LA62_0==FLOAT||LA62_0==INT||LA62_0==LONG||LA62_0==SHORT) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // Java.g:719:9: classOrInterfaceType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_classOrInterfaceType_in_type3796);
                    classOrInterfaceType167=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classOrInterfaceType.add(classOrInterfaceType167.getTree());
                    // Java.g:720:9: ( '[' ']' )*
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( (LA60_0==LBRACKET) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // Java.g:720:10: '[' ']'
                    	    {
                    	    char_literal168=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_type3807); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal168);

                    	    char_literal169=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_type3809); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal169);


                    	    }
                    	    break;

                    	default :
                    	    break loop60;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: LBRACKET, classOrInterfaceType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 722:9: -> ^( Type classOrInterfaceType ( '[' )* )
                    {
                        // Java.g:722:12: ^( Type classOrInterfaceType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Type, "Type"), root_1);

                        adaptor.addChild(root_1, stream_classOrInterfaceType.nextTree());
                        // Java.g:722:40: ( '[' )*
                        while ( stream_LBRACKET.hasNext() ) {
                            adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                        }
                        stream_LBRACKET.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:723:9: primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type3851);
                    primitiveType170=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType170.getTree());
                    // Java.g:724:9: ( '[' ']' )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==LBRACKET) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // Java.g:724:10: '[' ']'
                    	    {
                    	    char_literal171=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_type3862); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal171);

                    	    char_literal172=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_type3864); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal172);


                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: LBRACKET, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 726:9: -> ^( Type primitiveType ( '[' )* )
                    {
                        // Java.g:726:12: ^( Type primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Type, "Type"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // Java.g:726:33: ( '[' )*
                        while ( stream_LBRACKET.hasNext() ) {
                            adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                        }
                        stream_LBRACKET.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // Java.g:730:1: classOrInterfaceType : classOrInterfaceType1 -> ^( ClassOrInterfaceType classOrInterfaceType1 ) ;
    public final JavaParser.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        JavaParser.classOrInterfaceType_return retval = new JavaParser.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.classOrInterfaceType1_return classOrInterfaceType1173 = null;


        RewriteRuleSubtreeStream stream_classOrInterfaceType1=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceType1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // Java.g:731:5: ( classOrInterfaceType1 -> ^( ClassOrInterfaceType classOrInterfaceType1 ) )
            // Java.g:731:9: classOrInterfaceType1
            {
            pushFollow(FOLLOW_classOrInterfaceType1_in_classOrInterfaceType3916);
            classOrInterfaceType1173=classOrInterfaceType1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classOrInterfaceType1.add(classOrInterfaceType1173.getTree());


            // AST REWRITE
            // elements: classOrInterfaceType1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 732:9: -> ^( ClassOrInterfaceType classOrInterfaceType1 )
            {
                // Java.g:732:12: ^( ClassOrInterfaceType classOrInterfaceType1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ClassOrInterfaceType, "ClassOrInterfaceType"), root_1);

                adaptor.addChild(root_1, stream_classOrInterfaceType1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class classOrInterfaceType1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType1"
    // Java.g:735:1: classOrInterfaceType1 : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
    public final JavaParser.classOrInterfaceType1_return classOrInterfaceType1() throws RecognitionException {
        JavaParser.classOrInterfaceType1_return retval = new JavaParser.classOrInterfaceType1_return();
        retval.start = input.LT(1);
        int classOrInterfaceType1_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER174=null;
        Token char_literal176=null;
        Token IDENTIFIER177=null;
        JavaParser.typeArguments_return typeArguments175 = null;

        JavaParser.typeArguments_return typeArguments178 = null;


        Object IDENTIFIER174_tree=null;
        Object char_literal176_tree=null;
        Object IDENTIFIER177_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // Java.g:736:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
            // Java.g:736:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
            {
            root_0 = (Object)adaptor.nil();

            IDENTIFIER174=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_classOrInterfaceType13951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER174_tree = (Object)adaptor.create(IDENTIFIER174);
            adaptor.addChild(root_0, IDENTIFIER174_tree);
            }
            // Java.g:737:9: ( typeArguments )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LT) ) {
                int LA63_1 = input.LA(2);

                if ( (LA63_1==IDENTIFIER||LA63_1==BOOLEAN||LA63_1==BYTE||LA63_1==CHAR||LA63_1==DOUBLE||LA63_1==FLOAT||LA63_1==INT||LA63_1==LONG||LA63_1==SHORT||LA63_1==QUES) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    // Java.g:737:10: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType13962);
                    typeArguments175=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments175.getTree());

                    }
                    break;

            }

            // Java.g:739:9: ( '.' IDENTIFIER ( typeArguments )? )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==DOT) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // Java.g:739:10: '.' IDENTIFIER ( typeArguments )?
            	    {
            	    char_literal176=(Token)match(input,DOT,FOLLOW_DOT_in_classOrInterfaceType13984); if (state.failed) return retval;
            	    IDENTIFIER177=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_classOrInterfaceType13987); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    IDENTIFIER177_tree = (Object)adaptor.create(IDENTIFIER177);
            	    adaptor.addChild(root_0, IDENTIFIER177_tree);
            	    }
            	    // Java.g:740:13: ( typeArguments )?
            	    int alt64=2;
            	    int LA64_0 = input.LA(1);

            	    if ( (LA64_0==LT) ) {
            	        int LA64_1 = input.LA(2);

            	        if ( (LA64_1==IDENTIFIER||LA64_1==BOOLEAN||LA64_1==BYTE||LA64_1==CHAR||LA64_1==DOUBLE||LA64_1==FLOAT||LA64_1==INT||LA64_1==LONG||LA64_1==SHORT||LA64_1==QUES) ) {
            	            alt64=1;
            	        }
            	    }
            	    switch (alt64) {
            	        case 1 :
            	            // Java.g:740:14: typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType14002);
            	            typeArguments178=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments178.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, classOrInterfaceType1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType1"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // Java.g:745:1: primitiveType : primitiveType1 -> ^( PrimitiveType primitiveType1 ) ;
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.primitiveType1_return primitiveType1179 = null;


        RewriteRuleSubtreeStream stream_primitiveType1=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // Java.g:746:5: ( primitiveType1 -> ^( PrimitiveType primitiveType1 ) )
            // Java.g:746:9: primitiveType1
            {
            pushFollow(FOLLOW_primitiveType1_in_primitiveType4047);
            primitiveType1179=primitiveType1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType1.add(primitiveType1179.getTree());


            // AST REWRITE
            // elements: primitiveType1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 747:9: -> ^( PrimitiveType primitiveType1 )
            {
                // Java.g:747:12: ^( PrimitiveType primitiveType1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrimitiveType, "PrimitiveType"), root_1);

                adaptor.addChild(root_1, stream_primitiveType1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class primitiveType1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType1"
    // Java.g:750:1: primitiveType1 : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final JavaParser.primitiveType1_return primitiveType1() throws RecognitionException {
        JavaParser.primitiveType1_return retval = new JavaParser.primitiveType1_return();
        retval.start = input.LT(1);
        int primitiveType1_StartIndex = input.index();
        Object root_0 = null;

        Token set180=null;

        Object set180_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // Java.g:751:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set180=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set180));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, primitiveType1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType1"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // Java.g:761:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' -> ^( TypeArguments ( typeArgument )* ) ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal181=null;
        Token char_literal183=null;
        Token char_literal185=null;
        JavaParser.typeArgument_return typeArgument182 = null;

        JavaParser.typeArgument_return typeArgument184 = null;


        Object char_literal181_tree=null;
        Object char_literal183_tree=null;
        Object char_literal185_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // Java.g:762:5: ( '<' typeArgument ( ',' typeArgument )* '>' -> ^( TypeArguments ( typeArgument )* ) )
            // Java.g:762:9: '<' typeArgument ( ',' typeArgument )* '>'
            {
            char_literal181=(Token)match(input,LT,FOLLOW_LT_in_typeArguments4172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(char_literal181);

            pushFollow(FOLLOW_typeArgument_in_typeArguments4174);
            typeArgument182=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(typeArgument182.getTree());
            // Java.g:763:9: ( ',' typeArgument )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==COMMA) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // Java.g:763:10: ',' typeArgument
            	    {
            	    char_literal183=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments4185); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal183);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments4187);
            	    typeArgument184=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(typeArgument184.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            char_literal185=(Token)match(input,GT,FOLLOW_GT_in_typeArguments4209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GT.add(char_literal185);



            // AST REWRITE
            // elements: typeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 766:9: -> ^( TypeArguments ( typeArgument )* )
            {
                // Java.g:766:12: ^( TypeArguments ( typeArgument )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypeArguments, "TypeArguments"), root_1);

                // Java.g:766:28: ( typeArgument )*
                while ( stream_typeArgument.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArgument.nextTree());

                }
                stream_typeArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // Java.g:769:1: typeArgument : ( type | '?' ( ( 'extends' | 'super' ) type )? );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal187=null;
        Token set188=null;
        JavaParser.type_return type186 = null;

        JavaParser.type_return type189 = null;


        Object char_literal187_tree=null;
        Object set188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // Java.g:770:5: ( type | '?' ( ( 'extends' | 'super' ) type )? )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==IDENTIFIER||LA68_0==BOOLEAN||LA68_0==BYTE||LA68_0==CHAR||LA68_0==DOUBLE||LA68_0==FLOAT||LA68_0==INT||LA68_0==LONG||LA68_0==SHORT) ) {
                alt68=1;
            }
            else if ( (LA68_0==QUES) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // Java.g:770:9: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument4246);
                    type186=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type186.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:771:9: '?' ( ( 'extends' | 'super' ) type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal187=(Token)match(input,QUES,FOLLOW_QUES_in_typeArgument4256); if (state.failed) return retval;
                    // Java.g:772:9: ( ( 'extends' | 'super' ) type )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==EXTENDS||LA67_0==SUPER) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // Java.g:773:13: ( 'extends' | 'super' ) type
                            {
                            set188=(Token)input.LT(1);
                            if ( input.LA(1)==EXTENDS||input.LA(1)==SUPER ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set188));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }

                            pushFollow(FOLLOW_type_in_typeArgument4325);
                            type189=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type189.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // Java.g:780:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal191=null;
        JavaParser.qualifiedName_return qualifiedName190 = null;

        JavaParser.qualifiedName_return qualifiedName192 = null;


        Object char_literal191_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // Java.g:781:5: ( qualifiedName ( ',' qualifiedName )* )
            // Java.g:781:9: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4356);
            qualifiedName190=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName190.getTree());
            // Java.g:782:9: ( ',' qualifiedName )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Java.g:782:10: ',' qualifiedName
            	    {
            	    char_literal191=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedNameList4367); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal191_tree = (Object)adaptor.create(char_literal191);
            	    adaptor.addChild(root_0, char_literal191_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4369);
            	    qualifiedName192=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName192.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // Java.g:786:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ^( FormalParameters ( formalParameterDecls )? ) ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal193=null;
        Token char_literal195=null;
        JavaParser.formalParameterDecls_return formalParameterDecls194 = null;


        Object char_literal193_tree=null;
        Object char_literal195_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // Java.g:787:5: ( '(' ( formalParameterDecls )? ')' -> ^( FormalParameters ( formalParameterDecls )? ) )
            // Java.g:787:9: '(' ( formalParameterDecls )? ')'
            {
            char_literal193=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameters4400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal193);

            // Java.g:788:9: ( formalParameterDecls )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IDENTIFIER||LA70_0==BOOLEAN||LA70_0==BYTE||LA70_0==CHAR||LA70_0==DOUBLE||LA70_0==FINAL||LA70_0==FLOAT||LA70_0==INT||LA70_0==LONG||LA70_0==SHORT||LA70_0==MONKEYS_AT) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // Java.g:788:10: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters4411);
                    formalParameterDecls194=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls194.getTree());

                    }
                    break;

            }

            char_literal195=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameters4433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal195);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 791:9: -> ^( FormalParameters ( formalParameterDecls )? )
            {
                // Java.g:791:12: ^( FormalParameters ( formalParameterDecls )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FormalParameters, "FormalParameters"), root_1);

                // Java.g:791:31: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_1, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // Java.g:794:1: formalParameterDecls : ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl );
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal198=null;
        Token char_literal201=null;
        JavaParser.ellipsisParameterDecl_return ellipsisParameterDecl196 = null;

        JavaParser.normalParameterDecl_return normalParameterDecl197 = null;

        JavaParser.normalParameterDecl_return normalParameterDecl199 = null;

        JavaParser.normalParameterDecl_return normalParameterDecl200 = null;

        JavaParser.ellipsisParameterDecl_return ellipsisParameterDecl202 = null;


        Object char_literal198_tree=null;
        Object char_literal201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // Java.g:795:5: ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl )
            int alt73=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA73_1 = input.LA(2);

                if ( (synpred97_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred99_Java()) ) {
                    alt73=2;
                }
                else if ( (true) ) {
                    alt73=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 1, input);

                    throw nvae;
                }
                }
                break;
            case MONKEYS_AT:
                {
                int LA73_2 = input.LA(2);

                if ( (synpred97_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred99_Java()) ) {
                    alt73=2;
                }
                else if ( (true) ) {
                    alt73=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENTIFIER:
                {
                int LA73_3 = input.LA(2);

                if ( (synpred97_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred99_Java()) ) {
                    alt73=2;
                }
                else if ( (true) ) {
                    alt73=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 3, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA73_4 = input.LA(2);

                if ( (synpred97_Java()) ) {
                    alt73=1;
                }
                else if ( (synpred99_Java()) ) {
                    alt73=2;
                }
                else if ( (true) ) {
                    alt73=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 4, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // Java.g:795:9: ellipsisParameterDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4472);
                    ellipsisParameterDecl196=ellipsisParameterDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ellipsisParameterDecl196.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:796:9: normalParameterDecl ( ',' normalParameterDecl )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalParameterDecl_in_formalParameterDecls4482);
                    normalParameterDecl197=normalParameterDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalParameterDecl197.getTree());
                    // Java.g:797:9: ( ',' normalParameterDecl )*
                    loop71:
                    do {
                        int alt71=2;
                        int LA71_0 = input.LA(1);

                        if ( (LA71_0==COMMA) ) {
                            alt71=1;
                        }


                        switch (alt71) {
                    	case 1 :
                    	    // Java.g:797:10: ',' normalParameterDecl
                    	    {
                    	    char_literal198=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterDecls4493); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_normalParameterDecl_in_formalParameterDecls4496);
                    	    normalParameterDecl199=normalParameterDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalParameterDecl199.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // Java.g:799:9: ( normalParameterDecl ',' )+ ellipsisParameterDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    // Java.g:799:9: ( normalParameterDecl ',' )+
                    int cnt72=0;
                    loop72:
                    do {
                        int alt72=2;
                        switch ( input.LA(1) ) {
                        case FINAL:
                            {
                            int LA72_1 = input.LA(2);

                            if ( (synpred100_Java()) ) {
                                alt72=1;
                            }


                            }
                            break;
                        case MONKEYS_AT:
                            {
                            int LA72_2 = input.LA(2);

                            if ( (synpred100_Java()) ) {
                                alt72=1;
                            }


                            }
                            break;
                        case IDENTIFIER:
                            {
                            int LA72_3 = input.LA(2);

                            if ( (synpred100_Java()) ) {
                                alt72=1;
                            }


                            }
                            break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                            {
                            int LA72_4 = input.LA(2);

                            if ( (synpred100_Java()) ) {
                                alt72=1;
                            }


                            }
                            break;

                        }

                        switch (alt72) {
                    	case 1 :
                    	    // Java.g:799:10: normalParameterDecl ','
                    	    {
                    	    pushFollow(FOLLOW_normalParameterDecl_in_formalParameterDecls4518);
                    	    normalParameterDecl200=normalParameterDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalParameterDecl200.getTree());
                    	    char_literal201=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterDecls4528); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt72 >= 1 ) break loop72;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(72, input);
                                throw eee;
                        }
                        cnt72++;
                    } while (true);

                    pushFollow(FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4551);
                    ellipsisParameterDecl202=ellipsisParameterDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ellipsisParameterDecl202.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class normalParameterDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalParameterDecl"
    // Java.g:805:1: normalParameterDecl : variableModifiers type IDENTIFIER ( '[' ']' )* -> ^( ParameterDecl IDENTIFIER ( variableModifiers )? type ( '[' )* ) ;
    public final JavaParser.normalParameterDecl_return normalParameterDecl() throws RecognitionException {
        JavaParser.normalParameterDecl_return retval = new JavaParser.normalParameterDecl_return();
        retval.start = input.LT(1);
        int normalParameterDecl_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER205=null;
        Token char_literal206=null;
        Token char_literal207=null;
        JavaParser.variableModifiers_return variableModifiers203 = null;

        JavaParser.type_return type204 = null;


        Object IDENTIFIER205_tree=null;
        Object char_literal206_tree=null;
        Object char_literal207_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // Java.g:806:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* -> ^( ParameterDecl IDENTIFIER ( variableModifiers )? type ( '[' )* ) )
            // Java.g:806:9: variableModifiers type IDENTIFIER ( '[' ']' )*
            {
            pushFollow(FOLLOW_variableModifiers_in_normalParameterDecl4571);
            variableModifiers203=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers203.getTree());
            pushFollow(FOLLOW_type_in_normalParameterDecl4573);
            type204=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type204.getTree());
            IDENTIFIER205=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_normalParameterDecl4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER205);

            // Java.g:807:9: ( '[' ']' )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==LBRACKET) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // Java.g:807:10: '[' ']'
            	    {
            	    char_literal206=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_normalParameterDecl4586); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal206);

            	    char_literal207=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_normalParameterDecl4588); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal207);


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);



            // AST REWRITE
            // elements: type, LBRACKET, IDENTIFIER, variableModifiers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:9: -> ^( ParameterDecl IDENTIFIER ( variableModifiers )? type ( '[' )* )
            {
                // Java.g:809:12: ^( ParameterDecl IDENTIFIER ( variableModifiers )? type ( '[' )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ParameterDecl, "ParameterDecl"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:809:39: ( variableModifiers )?
                if ( stream_variableModifiers.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableModifiers.nextTree());

                }
                stream_variableModifiers.reset();
                adaptor.addChild(root_1, stream_type.nextTree());
                // Java.g:809:65: ( '[' )*
                while ( stream_LBRACKET.hasNext() ) {
                    adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                }
                stream_LBRACKET.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, normalParameterDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalParameterDecl"

    public static class ellipsisParameterDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ellipsisParameterDecl"
    // Java.g:812:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER -> ^( ParameterDecl IDENTIFIER ( variableModifiers )? type '...' ) ;
    public final JavaParser.ellipsisParameterDecl_return ellipsisParameterDecl() throws RecognitionException {
        JavaParser.ellipsisParameterDecl_return retval = new JavaParser.ellipsisParameterDecl_return();
        retval.start = input.LT(1);
        int ellipsisParameterDecl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal210=null;
        Token IDENTIFIER211=null;
        JavaParser.variableModifiers_return variableModifiers208 = null;

        JavaParser.type_return type209 = null;


        Object string_literal210_tree=null;
        Object IDENTIFIER211_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // Java.g:813:5: ( variableModifiers type '...' IDENTIFIER -> ^( ParameterDecl IDENTIFIER ( variableModifiers )? type '...' ) )
            // Java.g:813:9: variableModifiers type '...' IDENTIFIER
            {
            pushFollow(FOLLOW_variableModifiers_in_ellipsisParameterDecl4647);
            variableModifiers208=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers208.getTree());
            pushFollow(FOLLOW_type_in_ellipsisParameterDecl4657);
            type209=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type209.getTree());
            string_literal210=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_ellipsisParameterDecl4660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(string_literal210);

            IDENTIFIER211=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ellipsisParameterDecl4670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER211);



            // AST REWRITE
            // elements: variableModifiers, IDENTIFIER, ELLIPSIS, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 816:9: -> ^( ParameterDecl IDENTIFIER ( variableModifiers )? type '...' )
            {
                // Java.g:816:12: ^( ParameterDecl IDENTIFIER ( variableModifiers )? type '...' )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ParameterDecl, "ParameterDecl"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:816:39: ( variableModifiers )?
                if ( stream_variableModifiers.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableModifiers.nextTree());

                }
                stream_variableModifiers.reset();
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_ELLIPSIS.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, ellipsisParameterDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ellipsisParameterDecl"

    public static class explicitConstructorInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitConstructorInvocation"
    // Java.g:820:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? thisOrSuper arguments ';' -> ^( thisOrSuper arguments ( nonWildcardTypeArguments )? ) | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' -> ^( 'super' arguments ( nonWildcardTypeArguments )? primary ) );
    public final JavaParser.explicitConstructorInvocation_return explicitConstructorInvocation() throws RecognitionException {
        JavaParser.explicitConstructorInvocation_return retval = new JavaParser.explicitConstructorInvocation_return();
        retval.start = input.LT(1);
        int explicitConstructorInvocation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal215=null;
        Token char_literal217=null;
        Token string_literal219=null;
        Token char_literal221=null;
        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments212 = null;

        JavaParser.thisOrSuper_return thisOrSuper213 = null;

        JavaParser.arguments_return arguments214 = null;

        JavaParser.primary_return primary216 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments218 = null;

        JavaParser.arguments_return arguments220 = null;


        Object char_literal215_tree=null;
        Object char_literal217_tree=null;
        Object string_literal219_tree=null;
        Object char_literal221_tree=null;
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_thisOrSuper=new RewriteRuleSubtreeStream(adaptor,"rule thisOrSuper");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // Java.g:821:5: ( ( nonWildcardTypeArguments )? thisOrSuper arguments ';' -> ^( thisOrSuper arguments ( nonWildcardTypeArguments )? ) | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' -> ^( 'super' arguments ( nonWildcardTypeArguments )? primary ) )
            int alt77=2;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // Java.g:821:9: ( nonWildcardTypeArguments )? thisOrSuper arguments ';'
                    {
                    // Java.g:821:9: ( nonWildcardTypeArguments )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==LT) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // Java.g:821:10: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4717);
                            nonWildcardTypeArguments212=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments212.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_thisOrSuper_in_explicitConstructorInvocation4743);
                    thisOrSuper213=thisOrSuper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_thisOrSuper.add(thisOrSuper213.getTree());
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4753);
                    arguments214=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments214.getTree());
                    char_literal215=(Token)match(input,SEMI,FOLLOW_SEMI_in_explicitConstructorInvocation4755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal215);



                    // AST REWRITE
                    // elements: thisOrSuper, arguments, nonWildcardTypeArguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 825:9: -> ^( thisOrSuper arguments ( nonWildcardTypeArguments )? )
                    {
                        // Java.g:825:13: ^( thisOrSuper arguments ( nonWildcardTypeArguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_thisOrSuper.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());
                        // Java.g:825:37: ( nonWildcardTypeArguments )?
                        if ( stream_nonWildcardTypeArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());

                        }
                        stream_nonWildcardTypeArguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:827:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
                    {
                    pushFollow(FOLLOW_primary_in_explicitConstructorInvocation4788);
                    primary216=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary216.getTree());
                    char_literal217=(Token)match(input,DOT,FOLLOW_DOT_in_explicitConstructorInvocation4798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal217);

                    // Java.g:829:9: ( nonWildcardTypeArguments )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==LT) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // Java.g:829:10: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4809);
                            nonWildcardTypeArguments218=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments218.getTree());

                            }
                            break;

                    }

                    string_literal219=(Token)match(input,SUPER,FOLLOW_SUPER_in_explicitConstructorInvocation4830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(string_literal219);

                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4840);
                    arguments220=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments220.getTree());
                    char_literal221=(Token)match(input,SEMI,FOLLOW_SEMI_in_explicitConstructorInvocation4842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal221);



                    // AST REWRITE
                    // elements: primary, arguments, SUPER, nonWildcardTypeArguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 833:9: -> ^( 'super' arguments ( nonWildcardTypeArguments )? primary )
                    {
                        // Java.g:833:13: ^( 'super' arguments ( nonWildcardTypeArguments )? primary )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_SUPER.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_arguments.nextTree());
                        // Java.g:833:33: ( nonWildcardTypeArguments )?
                        if ( stream_nonWildcardTypeArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());

                        }
                        stream_nonWildcardTypeArguments.reset();
                        adaptor.addChild(root_1, stream_primary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, explicitConstructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class thisOrSuper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "thisOrSuper"
    // Java.g:836:1: thisOrSuper : ( 'this' | 'super' ) ;
    public final JavaParser.thisOrSuper_return thisOrSuper() throws RecognitionException {
        JavaParser.thisOrSuper_return retval = new JavaParser.thisOrSuper_return();
        retval.start = input.LT(1);
        int thisOrSuper_StartIndex = input.index();
        Object root_0 = null;

        Token set222=null;

        Object set222_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // Java.g:837:5: ( ( 'this' | 'super' ) )
            // Java.g:837:9: ( 'this' | 'super' )
            {
            root_0 = (Object)adaptor.nil();

            set222=(Token)input.LT(1);
            if ( input.LA(1)==SUPER||input.LA(1)==THIS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set222));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, thisOrSuper_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "thisOrSuper"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // Java.g:840:1: qualifiedName : IDENTIFIER ( '.' IDENTIFIER )* -> ^( QualifiedName ( IDENTIFIER )+ ) ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER223=null;
        Token char_literal224=null;
        Token IDENTIFIER225=null;

        Object IDENTIFIER223_tree=null;
        Object char_literal224_tree=null;
        Object IDENTIFIER225_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // Java.g:841:5: ( IDENTIFIER ( '.' IDENTIFIER )* -> ^( QualifiedName ( IDENTIFIER )+ ) )
            // Java.g:841:9: IDENTIFIER ( '.' IDENTIFIER )*
            {
            IDENTIFIER223=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedName4911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER223);

            // Java.g:842:9: ( '.' IDENTIFIER )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==DOT) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // Java.g:842:10: '.' IDENTIFIER
            	    {
            	    char_literal224=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedName4922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(char_literal224);

            	    IDENTIFIER225=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedName4924); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER225);


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);



            // AST REWRITE
            // elements: IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:9: -> ^( QualifiedName ( IDENTIFIER )+ )
            {
                // Java.g:844:12: ^( QualifiedName ( IDENTIFIER )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QualifiedName, "QualifiedName"), root_1);

                if ( !(stream_IDENTIFIER.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_IDENTIFIER.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                }
                stream_IDENTIFIER.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // Java.g:847:1: annotations : ( annotation )+ -> ^( Annotations ( annotation )+ ) ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotation_return annotation226 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // Java.g:848:5: ( ( annotation )+ -> ^( Annotations ( annotation )+ ) )
            // Java.g:848:9: ( annotation )+
            {
            // Java.g:848:9: ( annotation )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==MONKEYS_AT) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // Java.g:848:10: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations4975);
            	    annotation226=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation226.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 850:9: -> ^( Annotations ( annotation )+ )
            {
                // Java.g:850:12: ^( Annotations ( annotation )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Annotations, "Annotations"), root_1);

                if ( !(stream_annotation.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_annotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotation.nextTree());

                }
                stream_annotation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // Java.g:853:1: annotation : '@' qualifiedName ( '(' ( annotationArgument )? ')' )? -> ^( Annotation qualifiedName ( ^( AnnotationArgument ( annotationArgument )? ) )? ) ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal227=null;
        Token char_literal229=null;
        Token char_literal231=null;
        JavaParser.qualifiedName_return qualifiedName228 = null;

        JavaParser.annotationArgument_return annotationArgument230 = null;


        Object char_literal227_tree=null;
        Object char_literal229_tree=null;
        Object char_literal231_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MONKEYS_AT=new RewriteRuleTokenStream(adaptor,"token MONKEYS_AT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        RewriteRuleSubtreeStream stream_annotationArgument=new RewriteRuleSubtreeStream(adaptor,"rule annotationArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // Java.g:858:5: ( '@' qualifiedName ( '(' ( annotationArgument )? ')' )? -> ^( Annotation qualifiedName ( ^( AnnotationArgument ( annotationArgument )? ) )? ) )
            // Java.g:858:9: '@' qualifiedName ( '(' ( annotationArgument )? ')' )?
            {
            char_literal227=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_annotation5027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MONKEYS_AT.add(char_literal227);

            pushFollow(FOLLOW_qualifiedName_in_annotation5029);
            qualifiedName228=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName228.getTree());
            // Java.g:859:9: ( '(' ( annotationArgument )? ')' )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==LPAREN) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // Java.g:859:13: '(' ( annotationArgument )? ')'
                    {
                    char_literal229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotation5043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal229);

                    // Java.g:860:19: ( annotationArgument )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( ((LA80_0>=IDENTIFIER && LA80_0<=NULL)||LA80_0==BOOLEAN||LA80_0==BYTE||LA80_0==CHAR||LA80_0==DOUBLE||LA80_0==FLOAT||LA80_0==INT||LA80_0==LONG||LA80_0==NEW||LA80_0==SHORT||LA80_0==SUPER||LA80_0==THIS||LA80_0==VOID||LA80_0==LPAREN||LA80_0==LBRACE||(LA80_0>=BANG && LA80_0<=TILDE)||(LA80_0>=PLUSPLUS && LA80_0<=SUB)||LA80_0==MONKEYS_AT) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // Java.g:860:20: annotationArgument
                            {
                            pushFollow(FOLLOW_annotationArgument_in_annotation5067);
                            annotationArgument230=annotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotationArgument.add(annotationArgument230.getTree());

                            }
                            break;

                    }

                    char_literal231=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotation5083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal231);


                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifiedName, annotationArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 863:9: -> ^( Annotation qualifiedName ( ^( AnnotationArgument ( annotationArgument )? ) )? )
            {
                // Java.g:863:12: ^( Annotation qualifiedName ( ^( AnnotationArgument ( annotationArgument )? ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Annotation, "Annotation"), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());
                // Java.g:864:13: ( ^( AnnotationArgument ( annotationArgument )? ) )?
                if ( stream_annotationArgument.hasNext() ) {
                    // Java.g:864:13: ^( AnnotationArgument ( annotationArgument )? )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AnnotationArgument, "AnnotationArgument"), root_2);

                    // Java.g:864:34: ( annotationArgument )?
                    if ( stream_annotationArgument.hasNext() ) {
                        adaptor.addChild(root_2, stream_annotationArgument.nextTree());

                    }
                    stream_annotationArgument.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_annotationArgument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationArgument"
    // Java.g:867:1: annotationArgument : ( elementValuePairs | elementValue );
    public final JavaParser.annotationArgument_return annotationArgument() throws RecognitionException {
        JavaParser.annotationArgument_return retval = new JavaParser.annotationArgument_return();
        retval.start = input.LT(1);
        int annotationArgument_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.elementValuePairs_return elementValuePairs232 = null;

        JavaParser.elementValue_return elementValue233 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // Java.g:868:5: ( elementValuePairs | elementValue )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==IDENTIFIER) ) {
                int LA82_1 = input.LA(2);

                if ( (LA82_1==EQ) ) {
                    alt82=1;
                }
                else if ( (LA82_1==EOF||LA82_1==INSTANCEOF||(LA82_1>=LPAREN && LA82_1<=RPAREN)||LA82_1==LBRACKET||LA82_1==DOT||LA82_1==QUES||(LA82_1>=EQEQ && LA82_1<=PERCENT)||(LA82_1>=BANGEQ && LA82_1<=LT)) ) {
                    alt82=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA82_0>=INTLITERAL && LA82_0<=NULL)||LA82_0==BOOLEAN||LA82_0==BYTE||LA82_0==CHAR||LA82_0==DOUBLE||LA82_0==FLOAT||LA82_0==INT||LA82_0==LONG||LA82_0==NEW||LA82_0==SHORT||LA82_0==SUPER||LA82_0==THIS||LA82_0==VOID||LA82_0==LPAREN||LA82_0==LBRACE||(LA82_0>=BANG && LA82_0<=TILDE)||(LA82_0>=PLUSPLUS && LA82_0<=SUB)||LA82_0==MONKEYS_AT) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // Java.g:868:9: elementValuePairs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValuePairs_in_annotationArgument5153);
                    elementValuePairs232=elementValuePairs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairs232.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:868:29: elementValue
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValue_in_annotationArgument5157);
                    elementValue233=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue233.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, annotationArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationArgument"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // Java.g:871:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal235=null;
        JavaParser.elementValuePair_return elementValuePair234 = null;

        JavaParser.elementValuePair_return elementValuePair236 = null;


        Object char_literal235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // Java.g:872:5: ( elementValuePair ( ',' elementValuePair )* )
            // Java.g:872:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs5177);
            elementValuePair234=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair234.getTree());
            // Java.g:873:9: ( ',' elementValuePair )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // Java.g:873:10: ',' elementValuePair
            	    {
            	    char_literal235=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairs5188); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal235_tree = (Object)adaptor.create(char_literal235);
            	    adaptor.addChild(root_0, char_literal235_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs5190);
            	    elementValuePair236=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair236.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // Java.g:877:1: elementValuePair : IDENTIFIER '=' elementValue ;
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER237=null;
        Token char_literal238=null;
        JavaParser.elementValue_return elementValue239 = null;


        Object IDENTIFIER237_tree=null;
        Object char_literal238_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // Java.g:878:5: ( IDENTIFIER '=' elementValue )
            // Java.g:878:9: IDENTIFIER '=' elementValue
            {
            root_0 = (Object)adaptor.nil();

            IDENTIFIER237=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_elementValuePair5221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER237_tree = (Object)adaptor.create(IDENTIFIER237);
            adaptor.addChild(root_0, IDENTIFIER237_tree);
            }
            char_literal238=(Token)match(input,EQ,FOLLOW_EQ_in_elementValuePair5223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal238_tree = (Object)adaptor.create(char_literal238);
            adaptor.addChild(root_0, char_literal238_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair5225);
            elementValue239=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue239.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // Java.g:881:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression240 = null;

        JavaParser.annotation_return annotation241 = null;

        JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer242 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // Java.g:882:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt84=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case INTLITERAL:
            case LONGLITERAL:
            case FLOATLITERAL:
            case DOUBLELITERAL:
            case CHARLITERAL:
            case STRINGLITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case LPAREN:
            case BANG:
            case TILDE:
            case PLUSPLUS:
            case SUBSUB:
            case PLUS:
            case SUB:
                {
                alt84=1;
                }
                break;
            case MONKEYS_AT:
                {
                alt84=2;
                }
                break;
            case LBRACE:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // Java.g:882:9: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue5245);
                    conditionalExpression240=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression240.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:883:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue5255);
                    annotation241=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation241.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:884:9: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue5265);
                    elementValueArrayInitializer242=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer242.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // Java.g:887:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' -> ^( ElementValueArrayInitializer ( elementValue )* ) ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal243=null;
        Token char_literal245=null;
        Token char_literal247=null;
        Token char_literal248=null;
        JavaParser.elementValue_return elementValue244 = null;

        JavaParser.elementValue_return elementValue246 = null;


        Object char_literal243_tree=null;
        Object char_literal245_tree=null;
        Object char_literal247_tree=null;
        Object char_literal248_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // Java.g:888:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' -> ^( ElementValueArrayInitializer ( elementValue )* ) )
            // Java.g:888:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            char_literal243=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_elementValueArrayInitializer5285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal243);

            // Java.g:889:9: ( elementValue ( ',' elementValue )* )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( ((LA86_0>=IDENTIFIER && LA86_0<=NULL)||LA86_0==BOOLEAN||LA86_0==BYTE||LA86_0==CHAR||LA86_0==DOUBLE||LA86_0==FLOAT||LA86_0==INT||LA86_0==LONG||LA86_0==NEW||LA86_0==SHORT||LA86_0==SUPER||LA86_0==THIS||LA86_0==VOID||LA86_0==LPAREN||LA86_0==LBRACE||(LA86_0>=BANG && LA86_0<=TILDE)||(LA86_0>=PLUSPLUS && LA86_0<=SUB)||LA86_0==MONKEYS_AT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // Java.g:889:10: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5296);
                    elementValue244=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue244.getTree());
                    // Java.g:890:13: ( ',' elementValue )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            int LA85_1 = input.LA(2);

                            if ( ((LA85_1>=IDENTIFIER && LA85_1<=NULL)||LA85_1==BOOLEAN||LA85_1==BYTE||LA85_1==CHAR||LA85_1==DOUBLE||LA85_1==FLOAT||LA85_1==INT||LA85_1==LONG||LA85_1==NEW||LA85_1==SHORT||LA85_1==SUPER||LA85_1==THIS||LA85_1==VOID||LA85_1==LPAREN||LA85_1==LBRACE||(LA85_1>=BANG && LA85_1<=TILDE)||(LA85_1>=PLUSPLUS && LA85_1<=SUB)||LA85_1==MONKEYS_AT) ) {
                                alt85=1;
                            }


                        }


                        switch (alt85) {
                    	case 1 :
                    	    // Java.g:890:14: ',' elementValue
                    	    {
                    	    char_literal245=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer5311); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal245);

                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5313);
                    	    elementValue246=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValue.add(elementValue246.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);


                    }
                    break;

            }

            // Java.g:892:12: ( ',' )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==COMMA) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // Java.g:892:13: ','
                    {
                    char_literal247=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer5342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal247);


                    }
                    break;

            }

            char_literal248=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_elementValueArrayInitializer5346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal248);



            // AST REWRITE
            // elements: elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 893:9: -> ^( ElementValueArrayInitializer ( elementValue )* )
            {
                // Java.g:893:12: ^( ElementValueArrayInitializer ( elementValue )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ElementValueArrayInitializer, "ElementValueArrayInitializer"), root_1);

                // Java.g:893:43: ( elementValue )*
                while ( stream_elementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                }
                stream_elementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // Java.g:897:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody -> ^( AnnotationTypeDeclaration modifiers IDENTIFIER annotationTypeBody ) ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal250=null;
        Token string_literal251=null;
        Token IDENTIFIER252=null;
        JavaParser.modifiers_return modifiers249 = null;

        JavaParser.annotationTypeBody_return annotationTypeBody253 = null;


        Object char_literal250_tree=null;
        Object string_literal251_tree=null;
        Object IDENTIFIER252_tree=null;
        RewriteRuleTokenStream stream_MONKEYS_AT=new RewriteRuleTokenStream(adaptor,"token MONKEYS_AT");
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_annotationTypeBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // Java.g:901:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody -> ^( AnnotationTypeDeclaration modifiers IDENTIFIER annotationTypeBody ) )
            // Java.g:901:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
            {
            pushFollow(FOLLOW_modifiers_in_annotationTypeDeclaration5388);
            modifiers249=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers249.getTree());
            char_literal250=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_annotationTypeDeclaration5390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MONKEYS_AT.add(char_literal250);

            string_literal251=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration5400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal251);

            IDENTIFIER252=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_annotationTypeDeclaration5410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER252);

            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5420);
            annotationTypeBody253=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationTypeBody.add(annotationTypeBody253.getTree());


            // AST REWRITE
            // elements: annotationTypeBody, IDENTIFIER, modifiers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 905:9: -> ^( AnnotationTypeDeclaration modifiers IDENTIFIER annotationTypeBody )
            {
                // Java.g:905:12: ^( AnnotationTypeDeclaration modifiers IDENTIFIER annotationTypeBody )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AnnotationTypeDeclaration, "AnnotationTypeDeclaration"), root_1);

                adaptor.addChild(root_1, stream_modifiers.nextTree());
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                adaptor.addChild(root_1, stream_annotationTypeBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // Java.g:911:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' -> ^( AnnotationTypeBody ( annotationTypeElementDeclaration )* ) ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal254=null;
        Token char_literal256=null;
        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration255 = null;


        Object char_literal254_tree=null;
        Object char_literal256_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_annotationTypeElementDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeElementDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // Java.g:912:5: ( '{' ( annotationTypeElementDeclaration )* '}' -> ^( AnnotationTypeBody ( annotationTypeElementDeclaration )* ) )
            // Java.g:912:9: '{' ( annotationTypeElementDeclaration )* '}'
            {
            char_literal254=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_annotationTypeBody5482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal254);

            // Java.g:913:9: ( annotationTypeElementDeclaration )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==EOF||LA88_0==IDENTIFIER||LA88_0==ABSTRACT||LA88_0==BOOLEAN||LA88_0==BYTE||(LA88_0>=CHAR && LA88_0<=CLASS)||LA88_0==DOUBLE||LA88_0==ENUM||LA88_0==FINAL||LA88_0==FLOAT||(LA88_0>=INT && LA88_0<=NATIVE)||(LA88_0>=PRIVATE && LA88_0<=PUBLIC)||(LA88_0>=SHORT && LA88_0<=STRICTFP)||LA88_0==SYNCHRONIZED||LA88_0==TRANSIENT||(LA88_0>=VOID && LA88_0<=VOLATILE)||LA88_0==SEMI||LA88_0==MONKEYS_AT||LA88_0==LT) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Java.g:913:10: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5494);
            	    annotationTypeElementDeclaration255=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationTypeElementDeclaration.add(annotationTypeElementDeclaration255.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);

            char_literal256=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_annotationTypeBody5516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal256);



            // AST REWRITE
            // elements: annotationTypeElementDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:9: -> ^( AnnotationTypeBody ( annotationTypeElementDeclaration )* )
            {
                // Java.g:916:12: ^( AnnotationTypeBody ( annotationTypeElementDeclaration )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AnnotationTypeBody, "AnnotationTypeBody"), root_1);

                // Java.g:916:33: ( annotationTypeElementDeclaration )*
                while ( stream_annotationTypeElementDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationTypeElementDeclaration.nextTree());

                }
                stream_annotationTypeElementDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // Java.g:919:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal263=null;
        JavaParser.annotationMethodDeclaration_return annotationMethodDeclaration257 = null;

        JavaParser.interfaceFieldDeclaration_return interfaceFieldDeclaration258 = null;

        JavaParser.normalClassDeclaration_return normalClassDeclaration259 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration260 = null;

        JavaParser.enumDeclaration_return enumDeclaration261 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration262 = null;


        Object char_literal263_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // Java.g:923:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' )
            int alt89=7;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // Java.g:923:9: annotationMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodDeclaration_in_annotationTypeElementDeclaration5557);
                    annotationMethodDeclaration257=annotationMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodDeclaration257.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:924:9: interfaceFieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceFieldDeclaration_in_annotationTypeElementDeclaration5567);
                    interfaceFieldDeclaration258=interfaceFieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFieldDeclaration258.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:925:9: normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementDeclaration5577);
                    normalClassDeclaration259=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalClassDeclaration259.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:926:9: normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementDeclaration5587);
                    normalInterfaceDeclaration260=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration260.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:927:9: enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementDeclaration5597);
                    enumDeclaration261=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration261.getTree());

                    }
                    break;
                case 6 :
                    // Java.g:928:9: annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementDeclaration5607);
                    annotationTypeDeclaration262=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration262.getTree());

                    }
                    break;
                case 7 :
                    // Java.g:929:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal263=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationTypeElementDeclaration5617); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationMethodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodDeclaration"
    // Java.g:932:1: annotationMethodDeclaration : modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' -> ^( AnnotationMethodDeclaration ( modifiers )? type IDENTIFIER ( elementValue )? ) ;
    public final JavaParser.annotationMethodDeclaration_return annotationMethodDeclaration() throws RecognitionException {
        JavaParser.annotationMethodDeclaration_return retval = new JavaParser.annotationMethodDeclaration_return();
        retval.start = input.LT(1);
        int annotationMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER266=null;
        Token char_literal267=null;
        Token char_literal268=null;
        Token string_literal269=null;
        Token char_literal271=null;
        JavaParser.modifiers_return modifiers264 = null;

        JavaParser.type_return type265 = null;

        JavaParser.elementValue_return elementValue270 = null;


        Object IDENTIFIER266_tree=null;
        Object char_literal267_tree=null;
        Object char_literal268_tree=null;
        Object string_literal269_tree=null;
        Object char_literal271_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // Java.g:933:5: ( modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' -> ^( AnnotationMethodDeclaration ( modifiers )? type IDENTIFIER ( elementValue )? ) )
            // Java.g:933:9: modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
            {
            pushFollow(FOLLOW_modifiers_in_annotationMethodDeclaration5638);
            modifiers264=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modifiers.add(modifiers264.getTree());
            pushFollow(FOLLOW_type_in_annotationMethodDeclaration5640);
            type265=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type265.getTree());
            IDENTIFIER266=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_annotationMethodDeclaration5642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER266);

            char_literal267=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationMethodDeclaration5652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal267);

            char_literal268=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationMethodDeclaration5654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal268);

            // Java.g:934:17: ( 'default' elementValue )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DEFAULT) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // Java.g:934:18: 'default' elementValue
                    {
                    string_literal269=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationMethodDeclaration5657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(string_literal269);

                    pushFollow(FOLLOW_elementValue_in_annotationMethodDeclaration5659);
                    elementValue270=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue270.getTree());

                    }
                    break;

            }

            char_literal271=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationMethodDeclaration5688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal271);



            // AST REWRITE
            // elements: IDENTIFIER, modifiers, type, elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 937:9: -> ^( AnnotationMethodDeclaration ( modifiers )? type IDENTIFIER ( elementValue )? )
            {
                // Java.g:937:12: ^( AnnotationMethodDeclaration ( modifiers )? type IDENTIFIER ( elementValue )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AnnotationMethodDeclaration, "AnnotationMethodDeclaration"), root_1);

                // Java.g:937:42: ( modifiers )?
                if ( stream_modifiers.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifiers.nextTree());

                }
                stream_modifiers.reset();
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:938:13: ( elementValue )?
                if ( stream_elementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                }
                stream_elementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotationMethodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodDeclaration"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // Java.g:941:1: block : '{' ( blockStatement )* '}' -> ^( Block ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal272=null;
        Token char_literal274=null;
        JavaParser.blockStatement_return blockStatement273 = null;


        Object char_literal272_tree=null;
        Object char_literal274_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // Java.g:942:5: ( '{' ( blockStatement )* '}' -> ^( Block ( blockStatement )* ) )
            // Java.g:942:9: '{' ( blockStatement )* '}'
            {
            char_literal272=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_block5748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal272);

            // Java.g:943:9: ( blockStatement )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==EOF||(LA91_0>=IDENTIFIER && LA91_0<=NULL)||(LA91_0>=ABSTRACT && LA91_0<=BYTE)||(LA91_0>=CHAR && LA91_0<=CLASS)||LA91_0==CONTINUE||(LA91_0>=DO && LA91_0<=DOUBLE)||LA91_0==ENUM||LA91_0==FINAL||(LA91_0>=FLOAT && LA91_0<=FOR)||LA91_0==IF||(LA91_0>=INT && LA91_0<=NEW)||(LA91_0>=PRIVATE && LA91_0<=THROW)||(LA91_0>=TRANSIENT && LA91_0<=LPAREN)||LA91_0==LBRACE||LA91_0==SEMI||(LA91_0>=BANG && LA91_0<=TILDE)||(LA91_0>=PLUSPLUS && LA91_0<=SUB)||LA91_0==MONKEYS_AT||LA91_0==LT) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Java.g:943:10: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block5759);
            	    blockStatement273=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement273.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            char_literal274=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_block5780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal274);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 946:9: -> ^( Block ( blockStatement )* )
            {
                // Java.g:946:12: ^( Block ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Block, "Block"), root_1);

                // Java.g:946:20: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // Java.g:973:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclarationStatement_return localVariableDeclarationStatement275 = null;

        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration276 = null;

        JavaParser.statement_return statement277 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // Java.g:974:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
            int alt92=3;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // Java.g:974:9: localVariableDeclarationStatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement5821);
                    localVariableDeclarationStatement275=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclarationStatement275.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:975:9: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement5831);
                    classOrInterfaceDeclaration276=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration276.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:976:9: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement5841);
                    statement277=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement277.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclarationStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclarationStatement"
    // Java.g:980:1: localVariableDeclarationStatement : localVariableDeclaration ';' ;
    public final JavaParser.localVariableDeclarationStatement_return localVariableDeclarationStatement() throws RecognitionException {
        JavaParser.localVariableDeclarationStatement_return retval = new JavaParser.localVariableDeclarationStatement_return();
        retval.start = input.LT(1);
        int localVariableDeclarationStatement_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal279=null;
        JavaParser.localVariableDeclaration_return localVariableDeclaration278 = null;


        Object char_literal279_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // Java.g:981:5: ( localVariableDeclaration ';' )
            // Java.g:981:9: localVariableDeclaration ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5862);
            localVariableDeclaration278=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration278.getTree());
            char_literal279=(Token)match(input,SEMI,FOLLOW_SEMI_in_localVariableDeclarationStatement5872); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, localVariableDeclarationStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclarationStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // Java.g:985:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* -> ^( LocalVariableDeclaration ( variableModifiers )? type ( variableDeclarator )* ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal283=null;
        JavaParser.variableModifiers_return variableModifiers280 = null;

        JavaParser.type_return type281 = null;

        JavaParser.variableDeclarator_return variableDeclarator282 = null;

        JavaParser.variableDeclarator_return variableDeclarator284 = null;


        Object char_literal283_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // Java.g:986:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* -> ^( LocalVariableDeclaration ( variableModifiers )? type ( variableDeclarator )* ) )
            // Java.g:986:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
            {
            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration5893);
            variableModifiers280=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers280.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration5895);
            type281=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type281.getTree());
            pushFollow(FOLLOW_variableDeclarator_in_localVariableDeclaration5905);
            variableDeclarator282=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator282.getTree());
            // Java.g:988:9: ( ',' variableDeclarator )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Java.g:988:10: ',' variableDeclarator
            	    {
            	    char_literal283=(Token)match(input,COMMA,FOLLOW_COMMA_in_localVariableDeclaration5916); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal283);

            	    pushFollow(FOLLOW_variableDeclarator_in_localVariableDeclaration5918);
            	    variableDeclarator284=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator284.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);



            // AST REWRITE
            // elements: variableModifiers, type, variableDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 990:9: -> ^( LocalVariableDeclaration ( variableModifiers )? type ( variableDeclarator )* )
            {
                // Java.g:990:12: ^( LocalVariableDeclaration ( variableModifiers )? type ( variableDeclarator )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LocalVariableDeclaration, "LocalVariableDeclaration"), root_1);

                // Java.g:990:39: ( variableModifiers )?
                if ( stream_variableModifiers.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableModifiers.nextTree());

                }
                stream_variableModifiers.reset();
                adaptor.addChild(root_1, stream_type.nextTree());
                // Java.g:991:13: ( variableDeclarator )*
                while ( stream_variableDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());

                }
                stream_variableDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // Java.g:994:1: statement : statement1 -> ^( Statement ( statement1 )? ) ;
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.statement1_return statement1285 = null;


        RewriteRuleSubtreeStream stream_statement1=new RewriteRuleSubtreeStream(adaptor,"rule statement1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // Java.g:995:5: ( statement1 -> ^( Statement ( statement1 )? ) )
            // Java.g:995:9: statement1
            {
            pushFollow(FOLLOW_statement1_in_statement5988);
            statement1285=statement1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement1.add(statement1285.getTree());


            // AST REWRITE
            // elements: statement1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 996:9: -> ^( Statement ( statement1 )? )
            {
                // Java.g:996:12: ^( Statement ( statement1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Statement, "Statement"), root_1);

                // Java.g:996:24: ( statement1 )?
                if ( stream_statement1.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement1.nextTree());

                }
                stream_statement1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class statement1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement1"
    // Java.g:999:1: statement1 : ( block | 'assert' expression ( ':' expression )? ';' -> ^( 'assert' expression ( expression )? ) | 'if' parExpression statement ( 'else' statement )? -> ^( 'if' parExpression statement ( ^( 'else' statement ) )? ) | forstatement | 'while' parExpression statement -> ^( 'while' parExpression statement ) | 'do' statement 'while' parExpression ';' -> ^( 'do' statement parExpression ) | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( 'switch' parExpression switchBlockStatementGroups ) | 'synchronized' parExpression block -> ^( 'synchronized' parExpression block ) | 'return' ( expression )? ';' -> ^( 'return' ( expression )? ) | 'throw' expression ';' -> ^( 'throw' expression ) | 'break' ( IDENTIFIER )? ';' -> ^( 'break' ( IDENTIFIER )? ) | 'continue' ( IDENTIFIER )? ';' -> ^( 'continue' ( IDENTIFIER )? ) | expression ';' | IDENTIFIER ':' statement -> ^( Label IDENTIFIER statement ) | ';' );
    public final JavaParser.statement1_return statement1() throws RecognitionException {
        JavaParser.statement1_return retval = new JavaParser.statement1_return();
        retval.start = input.LT(1);
        int statement1_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal287=null;
        Token char_literal289=null;
        Token char_literal291=null;
        Token string_literal292=null;
        Token string_literal295=null;
        Token string_literal298=null;
        Token string_literal301=null;
        Token string_literal303=null;
        Token char_literal305=null;
        Token string_literal307=null;
        Token char_literal309=null;
        Token char_literal311=null;
        Token string_literal312=null;
        Token string_literal315=null;
        Token char_literal317=null;
        Token string_literal318=null;
        Token char_literal320=null;
        Token string_literal321=null;
        Token IDENTIFIER322=null;
        Token char_literal323=null;
        Token string_literal324=null;
        Token IDENTIFIER325=null;
        Token char_literal326=null;
        Token char_literal328=null;
        Token IDENTIFIER329=null;
        Token char_literal330=null;
        Token char_literal332=null;
        JavaParser.block_return block286 = null;

        JavaParser.expression_return expression288 = null;

        JavaParser.expression_return expression290 = null;

        JavaParser.parExpression_return parExpression293 = null;

        JavaParser.statement_return statement294 = null;

        JavaParser.statement_return statement296 = null;

        JavaParser.forstatement_return forstatement297 = null;

        JavaParser.parExpression_return parExpression299 = null;

        JavaParser.statement_return statement300 = null;

        JavaParser.statement_return statement302 = null;

        JavaParser.parExpression_return parExpression304 = null;

        JavaParser.trystatement_return trystatement306 = null;

        JavaParser.parExpression_return parExpression308 = null;

        JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups310 = null;

        JavaParser.parExpression_return parExpression313 = null;

        JavaParser.block_return block314 = null;

        JavaParser.expression_return expression316 = null;

        JavaParser.expression_return expression319 = null;

        JavaParser.expression_return expression327 = null;

        JavaParser.statement_return statement331 = null;


        Object string_literal287_tree=null;
        Object char_literal289_tree=null;
        Object char_literal291_tree=null;
        Object string_literal292_tree=null;
        Object string_literal295_tree=null;
        Object string_literal298_tree=null;
        Object string_literal301_tree=null;
        Object string_literal303_tree=null;
        Object char_literal305_tree=null;
        Object string_literal307_tree=null;
        Object char_literal309_tree=null;
        Object char_literal311_tree=null;
        Object string_literal312_tree=null;
        Object string_literal315_tree=null;
        Object char_literal317_tree=null;
        Object string_literal318_tree=null;
        Object char_literal320_tree=null;
        Object string_literal321_tree=null;
        Object IDENTIFIER322_tree=null;
        Object char_literal323_tree=null;
        Object string_literal324_tree=null;
        Object IDENTIFIER325_tree=null;
        Object char_literal326_tree=null;
        Object char_literal328_tree=null;
        Object IDENTIFIER329_tree=null;
        Object char_literal330_tree=null;
        Object char_literal332_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // Java.g:1000:5: ( block | 'assert' expression ( ':' expression )? ';' -> ^( 'assert' expression ( expression )? ) | 'if' parExpression statement ( 'else' statement )? -> ^( 'if' parExpression statement ( ^( 'else' statement ) )? ) | forstatement | 'while' parExpression statement -> ^( 'while' parExpression statement ) | 'do' statement 'while' parExpression ';' -> ^( 'do' statement parExpression ) | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( 'switch' parExpression switchBlockStatementGroups ) | 'synchronized' parExpression block -> ^( 'synchronized' parExpression block ) | 'return' ( expression )? ';' -> ^( 'return' ( expression )? ) | 'throw' expression ';' -> ^( 'throw' expression ) | 'break' ( IDENTIFIER )? ';' -> ^( 'break' ( IDENTIFIER )? ) | 'continue' ( IDENTIFIER )? ';' -> ^( 'continue' ( IDENTIFIER )? ) | expression ';' | IDENTIFIER ':' statement -> ^( Label IDENTIFIER statement ) | ';' )
            int alt99=16;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // Java.g:1000:9: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement16026);
                    block286=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block286.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1002:9: 'assert' expression ( ':' expression )? ';'
                    {
                    string_literal287=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement16049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(string_literal287);

                    pushFollow(FOLLOW_expression_in_statement16051);
                    expression288=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression288.getTree());
                    // Java.g:1002:29: ( ':' expression )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==COLON) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // Java.g:1002:30: ':' expression
                            {
                            char_literal289=(Token)match(input,COLON,FOLLOW_COLON_in_statement16054); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal289);

                            pushFollow(FOLLOW_expression_in_statement16056);
                            expression290=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());

                            }
                            break;

                    }

                    char_literal291=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal291);



                    // AST REWRITE
                    // elements: ASSERT, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1003:9: -> ^( 'assert' expression ( expression )? )
                    {
                        // Java.g:1003:12: ^( 'assert' expression ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        // Java.g:1003:34: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:1004:9: 'if' parExpression statement ( 'else' statement )?
                    {
                    string_literal292=(Token)match(input,IF,FOLLOW_IF_in_statement16091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(string_literal292);

                    pushFollow(FOLLOW_parExpression_in_statement16093);
                    parExpression293=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression293.getTree());
                    pushFollow(FOLLOW_statement_in_statement16095);
                    statement294=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement294.getTree());
                    // Java.g:1004:38: ( 'else' statement )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==ELSE) ) {
                        int LA95_1 = input.LA(2);

                        if ( (synpred132_Java()) ) {
                            alt95=1;
                        }
                    }
                    switch (alt95) {
                        case 1 :
                            // Java.g:1004:39: 'else' statement
                            {
                            string_literal295=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement16098); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(string_literal295);

                            pushFollow(FOLLOW_statement_in_statement16100);
                            statement296=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement296.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: IF, statement, statement, parExpression, ELSE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1005:9: -> ^( 'if' parExpression statement ( ^( 'else' statement ) )? )
                    {
                        // Java.g:1005:12: ^( 'if' parExpression statement ( ^( 'else' statement ) )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // Java.g:1005:43: ( ^( 'else' statement ) )?
                        if ( stream_statement.hasNext()||stream_ELSE.hasNext() ) {
                            // Java.g:1005:43: ^( 'else' statement )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(stream_ELSE.nextNode(), root_2);

                            adaptor.addChild(root_2, stream_statement.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_statement.reset();
                        stream_ELSE.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Java.g:1006:9: forstatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_forstatement_in_statement16147);
                    forstatement297=forstatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forstatement297.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:1007:9: 'while' parExpression statement
                    {
                    string_literal298=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement16157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(string_literal298);

                    pushFollow(FOLLOW_parExpression_in_statement16159);
                    parExpression299=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression299.getTree());
                    pushFollow(FOLLOW_statement_in_statement16161);
                    statement300=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement300.getTree());


                    // AST REWRITE
                    // elements: statement, WHILE, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1008:9: -> ^( 'while' parExpression statement )
                    {
                        // Java.g:1008:12: ^( 'while' parExpression statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Java.g:1009:9: 'do' statement 'while' parExpression ';'
                    {
                    string_literal301=(Token)match(input,DO,FOLLOW_DO_in_statement16189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(string_literal301);

                    pushFollow(FOLLOW_statement_in_statement16191);
                    statement302=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement302.getTree());
                    string_literal303=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement16193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(string_literal303);

                    pushFollow(FOLLOW_parExpression_in_statement16195);
                    parExpression304=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression304.getTree());
                    char_literal305=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal305);



                    // AST REWRITE
                    // elements: parExpression, DO, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1010:9: -> ^( 'do' statement parExpression )
                    {
                        // Java.g:1010:12: ^( 'do' statement parExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_DO.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());
                        adaptor.addChild(root_1, stream_parExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // Java.g:1011:9: trystatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_trystatement_in_statement16225);
                    trystatement306=trystatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trystatement306.getTree());

                    }
                    break;
                case 8 :
                    // Java.g:1012:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    string_literal307=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement16235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(string_literal307);

                    pushFollow(FOLLOW_parExpression_in_statement16237);
                    parExpression308=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression308.getTree());
                    char_literal309=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_statement16239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(char_literal309);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement16241);
                    switchBlockStatementGroups310=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups310.getTree());
                    char_literal311=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_statement16243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(char_literal311);



                    // AST REWRITE
                    // elements: switchBlockStatementGroups, parExpression, SWITCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1013:9: -> ^( 'switch' parExpression switchBlockStatementGroups )
                    {
                        // Java.g:1013:12: ^( 'switch' parExpression switchBlockStatementGroups )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_SWITCH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockStatementGroups.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // Java.g:1014:9: 'synchronized' parExpression block
                    {
                    string_literal312=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement16271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(string_literal312);

                    pushFollow(FOLLOW_parExpression_in_statement16273);
                    parExpression313=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression313.getTree());
                    pushFollow(FOLLOW_block_in_statement16275);
                    block314=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block314.getTree());


                    // AST REWRITE
                    // elements: parExpression, block, SYNCHRONIZED
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1015:9: -> ^( 'synchronized' parExpression block )
                    {
                        // Java.g:1015:12: ^( 'synchronized' parExpression block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // Java.g:1016:9: 'return' ( expression )? ';'
                    {
                    string_literal315=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement16303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(string_literal315);

                    // Java.g:1016:18: ( expression )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( ((LA96_0>=IDENTIFIER && LA96_0<=NULL)||LA96_0==BOOLEAN||LA96_0==BYTE||LA96_0==CHAR||LA96_0==DOUBLE||LA96_0==FLOAT||LA96_0==INT||LA96_0==LONG||LA96_0==NEW||LA96_0==SHORT||LA96_0==SUPER||LA96_0==THIS||LA96_0==VOID||LA96_0==LPAREN||(LA96_0>=BANG && LA96_0<=TILDE)||(LA96_0>=PLUSPLUS && LA96_0<=SUB)) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // Java.g:1016:19: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement16306);
                            expression316=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression316.getTree());

                            }
                            break;

                    }

                    char_literal317=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal317);



                    // AST REWRITE
                    // elements: RETURN, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1017:9: -> ^( 'return' ( expression )? )
                    {
                        // Java.g:1017:12: ^( 'return' ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_RETURN.nextNode(), root_1);

                        // Java.g:1017:23: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // Java.g:1018:9: 'throw' expression ';'
                    {
                    string_literal318=(Token)match(input,THROW,FOLLOW_THROW_in_statement16341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(string_literal318);

                    pushFollow(FOLLOW_expression_in_statement16343);
                    expression319=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression319.getTree());
                    char_literal320=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal320);



                    // AST REWRITE
                    // elements: expression, THROW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1019:9: -> ^( 'throw' expression )
                    {
                        // Java.g:1019:12: ^( 'throw' expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_THROW.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // Java.g:1020:9: 'break' ( IDENTIFIER )? ';'
                    {
                    string_literal321=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement16371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(string_literal321);

                    // Java.g:1021:13: ( IDENTIFIER )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==IDENTIFIER) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // Java.g:1021:14: IDENTIFIER
                            {
                            IDENTIFIER322=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_statement16386); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER322);


                            }
                            break;

                    }

                    char_literal323=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal323);



                    // AST REWRITE
                    // elements: IDENTIFIER, BREAK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1023:9: -> ^( 'break' ( IDENTIFIER )? )
                    {
                        // Java.g:1023:12: ^( 'break' ( IDENTIFIER )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                        // Java.g:1023:22: ( IDENTIFIER )?
                        if ( stream_IDENTIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                        }
                        stream_IDENTIFIER.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // Java.g:1024:9: 'continue' ( IDENTIFIER )? ';'
                    {
                    string_literal324=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement16432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(string_literal324);

                    // Java.g:1025:13: ( IDENTIFIER )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==IDENTIFIER) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // Java.g:1025:14: IDENTIFIER
                            {
                            IDENTIFIER325=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_statement16447); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER325);


                            }
                            break;

                    }

                    char_literal326=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal326);



                    // AST REWRITE
                    // elements: IDENTIFIER, CONTINUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1027:9: -> ^( 'continue' ( IDENTIFIER )? )
                    {
                        // Java.g:1027:12: ^( 'continue' ( IDENTIFIER )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                        // Java.g:1027:25: ( IDENTIFIER )?
                        if ( stream_IDENTIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                        }
                        stream_IDENTIFIER.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // Java.g:1028:9: expression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_statement16493);
                    expression327=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression327.getTree());
                    char_literal328=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16496); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // Java.g:1029:9: IDENTIFIER ':' statement
                    {
                    IDENTIFIER329=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_statement16507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER329);

                    char_literal330=(Token)match(input,COLON,FOLLOW_COLON_in_statement16509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal330);

                    pushFollow(FOLLOW_statement_in_statement16511);
                    statement331=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement331.getTree());


                    // AST REWRITE
                    // elements: statement, IDENTIFIER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1030:9: -> ^( Label IDENTIFIER statement )
                    {
                        // Java.g:1030:12: ^( Label IDENTIFIER statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Label, "Label"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // Java.g:1031:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal332=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement16539); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, statement1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement1"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // Java.g:1035:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup333 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // Java.g:1036:5: ( ( switchBlockStatementGroup )* )
            // Java.g:1036:9: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // Java.g:1036:9: ( switchBlockStatementGroup )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==CASE||LA100_0==DEFAULT) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // Java.g:1036:10: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6562);
            	    switchBlockStatementGroup333=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup333.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // Java.g:1039:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> ^( SwitchEntry switchLabel ( blockStatement )* ) ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchLabel_return switchLabel334 = null;

        JavaParser.blockStatement_return blockStatement335 = null;


        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // Java.g:1040:5: ( switchLabel ( blockStatement )* -> ^( SwitchEntry switchLabel ( blockStatement )* ) )
            // Java.g:1041:9: switchLabel ( blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup6591);
            switchLabel334=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabel.add(switchLabel334.getTree());
            // Java.g:1042:9: ( blockStatement )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( ((LA101_0>=IDENTIFIER && LA101_0<=NULL)||(LA101_0>=ABSTRACT && LA101_0<=BYTE)||(LA101_0>=CHAR && LA101_0<=CLASS)||LA101_0==CONTINUE||(LA101_0>=DO && LA101_0<=DOUBLE)||LA101_0==ENUM||LA101_0==FINAL||(LA101_0>=FLOAT && LA101_0<=FOR)||LA101_0==IF||(LA101_0>=INT && LA101_0<=NEW)||(LA101_0>=PRIVATE && LA101_0<=THROW)||(LA101_0>=TRANSIENT && LA101_0<=LPAREN)||LA101_0==LBRACE||LA101_0==SEMI||(LA101_0>=BANG && LA101_0<=TILDE)||(LA101_0>=PLUSPLUS && LA101_0<=SUB)||LA101_0==MONKEYS_AT) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // Java.g:1042:10: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup6602);
            	    blockStatement335=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement335.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);



            // AST REWRITE
            // elements: switchLabel, blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1044:9: -> ^( SwitchEntry switchLabel ( blockStatement )* )
            {
                // Java.g:1044:12: ^( SwitchEntry switchLabel ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SwitchEntry, "SwitchEntry"), root_1);

                adaptor.addChild(root_1, stream_switchLabel.nextTree());
                // Java.g:1044:38: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // Java.g:1047:1: switchLabel : ( 'case' expression ':' -> ^( 'case' expression ) | 'default' ':' );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal336=null;
        Token char_literal338=null;
        Token string_literal339=null;
        Token char_literal340=null;
        JavaParser.expression_return expression337 = null;


        Object string_literal336_tree=null;
        Object char_literal338_tree=null;
        Object string_literal339_tree=null;
        Object char_literal340_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // Java.g:1048:5: ( 'case' expression ':' -> ^( 'case' expression ) | 'default' ':' )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==CASE) ) {
                alt102=1;
            }
            else if ( (LA102_0==DEFAULT) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // Java.g:1048:9: 'case' expression ':'
                    {
                    string_literal336=(Token)match(input,CASE,FOLLOW_CASE_in_switchLabel6654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(string_literal336);

                    pushFollow(FOLLOW_expression_in_switchLabel6656);
                    expression337=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression337.getTree());
                    char_literal338=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal338);



                    // AST REWRITE
                    // elements: expression, CASE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1049:9: -> ^( 'case' expression )
                    {
                        // Java.g:1049:12: ^( 'case' expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_CASE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1050:9: 'default' ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal339=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchLabel6684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal339_tree = (Object)adaptor.create(string_literal339);
                    adaptor.addChild(root_0, string_literal339_tree);
                    }
                    char_literal340=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6686); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class trystatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trystatement"
    // Java.g:1054:1: trystatement : 'try' block ( catches 'finally' block | catches | 'finally' block ) -> ^( 'try' block ( catches )? ( ^( 'finally' block ) )? ) ;
    public final JavaParser.trystatement_return trystatement() throws RecognitionException {
        JavaParser.trystatement_return retval = new JavaParser.trystatement_return();
        retval.start = input.LT(1);
        int trystatement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal341=null;
        Token string_literal344=null;
        Token string_literal347=null;
        JavaParser.block_return block342 = null;

        JavaParser.catches_return catches343 = null;

        JavaParser.block_return block345 = null;

        JavaParser.catches_return catches346 = null;

        JavaParser.block_return block348 = null;


        Object string_literal341_tree=null;
        Object string_literal344_tree=null;
        Object string_literal347_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // Java.g:1055:5: ( 'try' block ( catches 'finally' block | catches | 'finally' block ) -> ^( 'try' block ( catches )? ( ^( 'finally' block ) )? ) )
            // Java.g:1055:9: 'try' block ( catches 'finally' block | catches | 'finally' block )
            {
            string_literal341=(Token)match(input,TRY,FOLLOW_TRY_in_trystatement6708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TRY.add(string_literal341);

            pushFollow(FOLLOW_block_in_trystatement6710);
            block342=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block342.getTree());
            // Java.g:1056:9: ( catches 'finally' block | catches | 'finally' block )
            int alt103=3;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==CATCH) ) {
                int LA103_1 = input.LA(2);

                if ( (synpred152_Java()) ) {
                    alt103=1;
                }
                else if ( (synpred153_Java()) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA103_0==FINALLY) ) {
                alt103=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    // Java.g:1056:13: catches 'finally' block
                    {
                    pushFollow(FOLLOW_catches_in_trystatement6724);
                    catches343=catches();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catches.add(catches343.getTree());
                    string_literal344=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_trystatement6726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FINALLY.add(string_literal344);

                    pushFollow(FOLLOW_block_in_trystatement6728);
                    block345=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block345.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1057:13: catches
                    {
                    pushFollow(FOLLOW_catches_in_trystatement6742);
                    catches346=catches();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catches.add(catches346.getTree());

                    }
                    break;
                case 3 :
                    // Java.g:1058:13: 'finally' block
                    {
                    string_literal347=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_trystatement6756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FINALLY.add(string_literal347);

                    pushFollow(FOLLOW_block_in_trystatement6758);
                    block348=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block348.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: TRY, block, catches, block, FINALLY
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:9: -> ^( 'try' block ( catches )? ( ^( 'finally' block ) )? )
            {
                // Java.g:1060:12: ^( 'try' block ( catches )? ( ^( 'finally' block ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                adaptor.addChild(root_1, stream_block.nextTree());
                // Java.g:1060:26: ( catches )?
                if ( stream_catches.hasNext() ) {
                    adaptor.addChild(root_1, stream_catches.nextTree());

                }
                stream_catches.reset();
                // Java.g:1060:37: ( ^( 'finally' block ) )?
                if ( stream_block.hasNext()||stream_FINALLY.hasNext() ) {
                    // Java.g:1060:37: ^( 'finally' block )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(stream_FINALLY.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_block.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_block.reset();
                stream_FINALLY.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, trystatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trystatement"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // Java.g:1063:1: catches : catchClause ( catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.catchClause_return catchClause349 = null;

        JavaParser.catchClause_return catchClause350 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // Java.g:1064:5: ( catchClause ( catchClause )* )
            // Java.g:1064:9: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches6817);
            catchClause349=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause349.getTree());
            // Java.g:1065:9: ( catchClause )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==CATCH) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // Java.g:1065:10: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6828);
            	    catchClause350=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause350.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // Java.g:1069:1: catchClause : 'catch' '(' formalParameter ')' block -> ^( 'catch' formalParameter block ) ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal351=null;
        Token char_literal352=null;
        Token char_literal354=null;
        JavaParser.formalParameter_return formalParameter353 = null;

        JavaParser.block_return block355 = null;


        Object string_literal351_tree=null;
        Object char_literal352_tree=null;
        Object char_literal354_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CATCH=new RewriteRuleTokenStream(adaptor,"token CATCH");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // Java.g:1070:5: ( 'catch' '(' formalParameter ')' block -> ^( 'catch' formalParameter block ) )
            // Java.g:1070:9: 'catch' '(' formalParameter ')' block
            {
            string_literal351=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause6859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CATCH.add(string_literal351);

            char_literal352=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause6861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal352);

            pushFollow(FOLLOW_formalParameter_in_catchClause6863);
            formalParameter353=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter353.getTree());
            char_literal354=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause6873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal354);

            pushFollow(FOLLOW_block_in_catchClause6875);
            block355=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block355.getTree());


            // AST REWRITE
            // elements: formalParameter, block, CATCH
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1072:9: -> ^( 'catch' formalParameter block )
            {
                // Java.g:1072:12: ^( 'catch' formalParameter block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_CATCH.nextNode(), root_1);

                adaptor.addChild(root_1, stream_formalParameter.nextTree());
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // Java.g:1075:1: formalParameter : variableModifiers type IDENTIFIER ( '[' ']' )* ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER358=null;
        Token char_literal359=null;
        Token char_literal360=null;
        JavaParser.variableModifiers_return variableModifiers356 = null;

        JavaParser.type_return type357 = null;


        Object IDENTIFIER358_tree=null;
        Object char_literal359_tree=null;
        Object char_literal360_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // Java.g:1076:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
            // Java.g:1076:9: variableModifiers type IDENTIFIER ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_formalParameter6914);
            variableModifiers356=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifiers356.getTree());
            pushFollow(FOLLOW_type_in_formalParameter6916);
            type357=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type357.getTree());
            IDENTIFIER358=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_formalParameter6918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER358_tree = (Object)adaptor.create(IDENTIFIER358);
            adaptor.addChild(root_0, IDENTIFIER358_tree);
            }
            // Java.g:1077:9: ( '[' ']' )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==LBRACKET) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // Java.g:1077:10: '[' ']'
            	    {
            	    char_literal359=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_formalParameter6929); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal359_tree = (Object)adaptor.create(char_literal359);
            	    adaptor.addChild(root_0, char_literal359_tree);
            	    }
            	    char_literal360=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_formalParameter6931); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal360_tree = (Object)adaptor.create(char_literal360);
            	    adaptor.addChild(root_0, char_literal360_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class forstatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forstatement"
    // Java.g:1081:1: forstatement : ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement -> ^( 'for' ^( EnhancedForVar ( variableModifiers )? type IDENTIFIER ) ^( EnhancedForExpr expression ) statement ) | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement -> ^( 'for' ( ^( ForInit forInit ) )? ( ^( ForExpr expression ) )? ( ^( ForUpdate expressionList ) )? statement ) );
    public final JavaParser.forstatement_return forstatement() throws RecognitionException {
        JavaParser.forstatement_return retval = new JavaParser.forstatement_return();
        retval.start = input.LT(1);
        int forstatement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal361=null;
        Token char_literal362=null;
        Token IDENTIFIER365=null;
        Token char_literal366=null;
        Token char_literal368=null;
        Token string_literal370=null;
        Token char_literal371=null;
        Token char_literal373=null;
        Token char_literal375=null;
        Token char_literal377=null;
        JavaParser.variableModifiers_return variableModifiers363 = null;

        JavaParser.type_return type364 = null;

        JavaParser.expression_return expression367 = null;

        JavaParser.statement_return statement369 = null;

        JavaParser.forInit_return forInit372 = null;

        JavaParser.expression_return expression374 = null;

        JavaParser.expressionList_return expressionList376 = null;

        JavaParser.statement_return statement378 = null;


        Object string_literal361_tree=null;
        Object char_literal362_tree=null;
        Object IDENTIFIER365_tree=null;
        Object char_literal366_tree=null;
        Object char_literal368_tree=null;
        Object string_literal370_tree=null;
        Object char_literal371_tree=null;
        Object char_literal373_tree=null;
        Object char_literal375_tree=null;
        Object char_literal377_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // Java.g:1082:5: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement -> ^( 'for' ^( EnhancedForVar ( variableModifiers )? type IDENTIFIER ) ^( EnhancedForExpr expression ) statement ) | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement -> ^( 'for' ( ^( ForInit forInit ) )? ( ^( ForExpr expression ) )? ( ^( ForUpdate expressionList ) )? statement ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==FOR) ) {
                int LA109_1 = input.LA(2);

                if ( (synpred156_Java()) ) {
                    alt109=1;
                }
                else if ( (true) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // Java.g:1084:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
                    {
                    string_literal361=(Token)match(input,FOR,FOLLOW_FOR_in_forstatement6980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(string_literal361);

                    char_literal362=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forstatement6982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal362);

                    pushFollow(FOLLOW_variableModifiers_in_forstatement6984);
                    variableModifiers363=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers363.getTree());
                    pushFollow(FOLLOW_type_in_forstatement6986);
                    type364=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type364.getTree());
                    IDENTIFIER365=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_forstatement6988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER365);

                    char_literal366=(Token)match(input,COLON,FOLLOW_COLON_in_forstatement6990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal366);

                    pushFollow(FOLLOW_expression_in_forstatement7001);
                    expression367=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression367.getTree());
                    char_literal368=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forstatement7003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal368);

                    pushFollow(FOLLOW_statement_in_forstatement7005);
                    statement369=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement369.getTree());


                    // AST REWRITE
                    // elements: type, IDENTIFIER, variableModifiers, FOR, statement, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1086:9: -> ^( 'for' ^( EnhancedForVar ( variableModifiers )? type IDENTIFIER ) ^( EnhancedForExpr expression ) statement )
                    {
                        // Java.g:1086:13: ^( 'for' ^( EnhancedForVar ( variableModifiers )? type IDENTIFIER ) ^( EnhancedForExpr expression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                        // Java.g:1087:13: ^( EnhancedForVar ( variableModifiers )? type IDENTIFIER )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EnhancedForVar, "EnhancedForVar"), root_2);

                        // Java.g:1087:30: ( variableModifiers )?
                        if ( stream_variableModifiers.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifiers.nextTree());

                        }
                        stream_variableModifiers.reset();
                        adaptor.addChild(root_2, stream_type.nextTree());
                        adaptor.addChild(root_2, stream_IDENTIFIER.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        // Java.g:1088:13: ^( EnhancedForExpr expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EnhancedForExpr, "EnhancedForExpr"), root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1092:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement
                    {
                    string_literal370=(Token)match(input,FOR,FOLLOW_FOR_in_forstatement7109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(string_literal370);

                    char_literal371=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forstatement7111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal371);

                    // Java.g:1093:17: ( forInit )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( ((LA106_0>=IDENTIFIER && LA106_0<=NULL)||LA106_0==BOOLEAN||LA106_0==BYTE||LA106_0==CHAR||LA106_0==DOUBLE||LA106_0==FINAL||LA106_0==FLOAT||LA106_0==INT||LA106_0==LONG||LA106_0==NEW||LA106_0==SHORT||LA106_0==SUPER||LA106_0==THIS||LA106_0==VOID||LA106_0==LPAREN||(LA106_0>=BANG && LA106_0<=TILDE)||(LA106_0>=PLUSPLUS && LA106_0<=SUB)||LA106_0==MONKEYS_AT) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // Java.g:1093:18: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forstatement7131);
                            forInit372=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit372.getTree());

                            }
                            break;

                    }

                    char_literal373=(Token)match(input,SEMI,FOLLOW_SEMI_in_forstatement7152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal373);

                    // Java.g:1095:17: ( expression )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( ((LA107_0>=IDENTIFIER && LA107_0<=NULL)||LA107_0==BOOLEAN||LA107_0==BYTE||LA107_0==CHAR||LA107_0==DOUBLE||LA107_0==FLOAT||LA107_0==INT||LA107_0==LONG||LA107_0==NEW||LA107_0==SHORT||LA107_0==SUPER||LA107_0==THIS||LA107_0==VOID||LA107_0==LPAREN||(LA107_0>=BANG && LA107_0<=TILDE)||(LA107_0>=PLUSPLUS && LA107_0<=SUB)) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // Java.g:1095:18: expression
                            {
                            pushFollow(FOLLOW_expression_in_forstatement7172);
                            expression374=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression374.getTree());

                            }
                            break;

                    }

                    char_literal375=(Token)match(input,SEMI,FOLLOW_SEMI_in_forstatement7193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal375);

                    // Java.g:1097:17: ( expressionList )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( ((LA108_0>=IDENTIFIER && LA108_0<=NULL)||LA108_0==BOOLEAN||LA108_0==BYTE||LA108_0==CHAR||LA108_0==DOUBLE||LA108_0==FLOAT||LA108_0==INT||LA108_0==LONG||LA108_0==NEW||LA108_0==SHORT||LA108_0==SUPER||LA108_0==THIS||LA108_0==VOID||LA108_0==LPAREN||(LA108_0>=BANG && LA108_0<=TILDE)||(LA108_0>=PLUSPLUS && LA108_0<=SUB)) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // Java.g:1097:18: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_forstatement7213);
                            expressionList376=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList376.getTree());

                            }
                            break;

                    }

                    char_literal377=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forstatement7234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal377);

                    pushFollow(FOLLOW_statement_in_forstatement7236);
                    statement378=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement378.getTree());


                    // AST REWRITE
                    // elements: FOR, expressionList, statement, expression, forInit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1099:9: -> ^( 'for' ( ^( ForInit forInit ) )? ( ^( ForExpr expression ) )? ( ^( ForUpdate expressionList ) )? statement )
                    {
                        // Java.g:1099:12: ^( 'for' ( ^( ForInit forInit ) )? ( ^( ForExpr expression ) )? ( ^( ForUpdate expressionList ) )? statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                        // Java.g:1100:17: ( ^( ForInit forInit ) )?
                        if ( stream_forInit.hasNext() ) {
                            // Java.g:1100:17: ^( ForInit forInit )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ForInit, "ForInit"), root_2);

                            adaptor.addChild(root_2, stream_forInit.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_forInit.reset();
                        // Java.g:1101:17: ( ^( ForExpr expression ) )?
                        if ( stream_expression.hasNext() ) {
                            // Java.g:1101:17: ^( ForExpr expression )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ForExpr, "ForExpr"), root_2);

                            adaptor.addChild(root_2, stream_expression.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_expression.reset();
                        // Java.g:1102:17: ( ^( ForUpdate expressionList ) )?
                        if ( stream_expressionList.hasNext() ) {
                            // Java.g:1102:17: ^( ForUpdate expressionList )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ForUpdate, "ForUpdate"), root_2);

                            adaptor.addChild(root_2, stream_expressionList.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_expressionList.reset();
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, forstatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forstatement"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // Java.g:1107:1: forInit : ( localVariableDeclaration | expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration379 = null;

        JavaParser.expressionList_return expressionList380 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // Java.g:1108:5: ( localVariableDeclaration | expressionList )
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // Java.g:1108:9: localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit7370);
                    localVariableDeclaration379=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration379.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1109:9: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit7380);
                    expressionList380=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList380.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // Java.g:1112:1: parExpression : '(' expression ')' -> ^( ParExpression expression ) ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal381=null;
        Token char_literal383=null;
        JavaParser.expression_return expression382 = null;


        Object char_literal381_tree=null;
        Object char_literal383_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // Java.g:1113:5: ( '(' expression ')' -> ^( ParExpression expression ) )
            // Java.g:1113:9: '(' expression ')'
            {
            char_literal381=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parExpression7400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal381);

            pushFollow(FOLLOW_expression_in_parExpression7402);
            expression382=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
            char_literal383=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parExpression7404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal383);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1114:9: -> ^( ParExpression expression )
            {
                // Java.g:1114:12: ^( ParExpression expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ParExpression, "ParExpression"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // Java.g:1117:1: expressionList : expression ( ',' expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal385=null;
        JavaParser.expression_return expression384 = null;

        JavaParser.expression_return expression386 = null;


        Object char_literal385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // Java.g:1118:5: ( expression ( ',' expression )* )
            // Java.g:1118:9: expression ( ',' expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList7440);
            expression384=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression384.getTree());
            // Java.g:1119:9: ( ',' expression )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==COMMA) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // Java.g:1119:10: ',' expression
            	    {
            	    char_literal385=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7451); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList7454);
            	    expression386=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression386.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // Java.g:1124:1: expression : conditionalExpression ( assignmentOperator expression )? -> ^( Expression conditionalExpression ( ^( AssignExpr assignmentOperator expression ) )? ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression387 = null;

        JavaParser.assignmentOperator_return assignmentOperator388 = null;

        JavaParser.expression_return expression389 = null;


        RewriteRuleSubtreeStream stream_assignmentOperator=new RewriteRuleSubtreeStream(adaptor,"rule assignmentOperator");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // Java.g:1125:5: ( conditionalExpression ( assignmentOperator expression )? -> ^( Expression conditionalExpression ( ^( AssignExpr assignmentOperator expression ) )? ) )
            // Java.g:1125:9: conditionalExpression ( assignmentOperator expression )?
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression7485);
            conditionalExpression387=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression387.getTree());
            // Java.g:1126:9: ( assignmentOperator expression )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==EQ||(LA112_0>=PLUSEQ && LA112_0<=PERCENTEQ)||(LA112_0>=GT && LA112_0<=LT)) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // Java.g:1126:10: assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression7496);
                    assignmentOperator388=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assignmentOperator.add(assignmentOperator388.getTree());
                    pushFollow(FOLLOW_expression_in_expression7498);
                    expression389=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression389.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, conditionalExpression, assignmentOperator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1128:9: -> ^( Expression conditionalExpression ( ^( AssignExpr assignmentOperator expression ) )? )
            {
                // Java.g:1128:12: ^( Expression conditionalExpression ( ^( AssignExpr assignmentOperator expression ) )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Expression, "Expression"), root_1);

                adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                // Java.g:1129:35: ( ^( AssignExpr assignmentOperator expression ) )?
                if ( stream_expression.hasNext()||stream_assignmentOperator.hasNext() ) {
                    // Java.g:1129:35: ^( AssignExpr assignmentOperator expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(AssignExpr, "AssignExpr"), root_2);

                    adaptor.addChild(root_2, stream_assignmentOperator.nextTree());
                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();
                stream_assignmentOperator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // Java.g:1133:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
    public final JavaParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        JavaParser.assignmentOperator_return retval = new JavaParser.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal390=null;
        Token string_literal391=null;
        Token string_literal392=null;
        Token string_literal393=null;
        Token string_literal394=null;
        Token string_literal395=null;
        Token string_literal396=null;
        Token string_literal397=null;
        Token string_literal398=null;
        Token char_literal399=null;
        Token char_literal400=null;
        Token char_literal401=null;
        Token char_literal402=null;
        Token char_literal403=null;
        Token char_literal404=null;
        Token char_literal405=null;
        Token char_literal406=null;
        Token char_literal407=null;
        Token char_literal408=null;

        Object char_literal390_tree=null;
        Object string_literal391_tree=null;
        Object string_literal392_tree=null;
        Object string_literal393_tree=null;
        Object string_literal394_tree=null;
        Object string_literal395_tree=null;
        Object string_literal396_tree=null;
        Object string_literal397_tree=null;
        Object string_literal398_tree=null;
        Object char_literal399_tree=null;
        Object char_literal400_tree=null;
        Object char_literal401_tree=null;
        Object char_literal402_tree=null;
        Object char_literal403_tree=null;
        Object char_literal404_tree=null;
        Object char_literal405_tree=null;
        Object char_literal406_tree=null;
        Object char_literal407_tree=null;
        Object char_literal408_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // Java.g:1134:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
            int alt113=12;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // Java.g:1134:9: '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal390=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal390_tree = (Object)adaptor.create(char_literal390);
                    adaptor.addChild(root_0, char_literal390_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1135:9: '+='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal391=(Token)match(input,PLUSEQ,FOLLOW_PLUSEQ_in_assignmentOperator7577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal391_tree = (Object)adaptor.create(string_literal391);
                    adaptor.addChild(root_0, string_literal391_tree);
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1136:9: '-='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal392=(Token)match(input,SUBEQ,FOLLOW_SUBEQ_in_assignmentOperator7587); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal392_tree = (Object)adaptor.create(string_literal392);
                    adaptor.addChild(root_0, string_literal392_tree);
                    }

                    }
                    break;
                case 4 :
                    // Java.g:1137:9: '*='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal393=(Token)match(input,STAREQ,FOLLOW_STAREQ_in_assignmentOperator7597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal393_tree = (Object)adaptor.create(string_literal393);
                    adaptor.addChild(root_0, string_literal393_tree);
                    }

                    }
                    break;
                case 5 :
                    // Java.g:1138:9: '/='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal394=(Token)match(input,SLASHEQ,FOLLOW_SLASHEQ_in_assignmentOperator7607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal394_tree = (Object)adaptor.create(string_literal394);
                    adaptor.addChild(root_0, string_literal394_tree);
                    }

                    }
                    break;
                case 6 :
                    // Java.g:1139:9: '&='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal395=(Token)match(input,AMPEQ,FOLLOW_AMPEQ_in_assignmentOperator7617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal395_tree = (Object)adaptor.create(string_literal395);
                    adaptor.addChild(root_0, string_literal395_tree);
                    }

                    }
                    break;
                case 7 :
                    // Java.g:1140:9: '|='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal396=(Token)match(input,BAREQ,FOLLOW_BAREQ_in_assignmentOperator7627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal396_tree = (Object)adaptor.create(string_literal396);
                    adaptor.addChild(root_0, string_literal396_tree);
                    }

                    }
                    break;
                case 8 :
                    // Java.g:1141:9: '^='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal397=(Token)match(input,CARETEQ,FOLLOW_CARETEQ_in_assignmentOperator7637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal397_tree = (Object)adaptor.create(string_literal397);
                    adaptor.addChild(root_0, string_literal397_tree);
                    }

                    }
                    break;
                case 9 :
                    // Java.g:1142:9: '%='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal398=(Token)match(input,PERCENTEQ,FOLLOW_PERCENTEQ_in_assignmentOperator7647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal398_tree = (Object)adaptor.create(string_literal398);
                    adaptor.addChild(root_0, string_literal398_tree);
                    }

                    }
                    break;
                case 10 :
                    // Java.g:1143:10: '<' '<' '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal399=(Token)match(input,LT,FOLLOW_LT_in_assignmentOperator7658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal399_tree = (Object)adaptor.create(char_literal399);
                    adaptor.addChild(root_0, char_literal399_tree);
                    }
                    char_literal400=(Token)match(input,LT,FOLLOW_LT_in_assignmentOperator7660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal400_tree = (Object)adaptor.create(char_literal400);
                    adaptor.addChild(root_0, char_literal400_tree);
                    }
                    char_literal401=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal401_tree = (Object)adaptor.create(char_literal401);
                    adaptor.addChild(root_0, char_literal401_tree);
                    }

                    }
                    break;
                case 11 :
                    // Java.g:1144:10: '>' '>' '>' '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal402=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal402_tree = (Object)adaptor.create(char_literal402);
                    adaptor.addChild(root_0, char_literal402_tree);
                    }
                    char_literal403=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal403_tree = (Object)adaptor.create(char_literal403);
                    adaptor.addChild(root_0, char_literal403_tree);
                    }
                    char_literal404=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal404_tree = (Object)adaptor.create(char_literal404);
                    adaptor.addChild(root_0, char_literal404_tree);
                    }
                    char_literal405=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal405_tree = (Object)adaptor.create(char_literal405);
                    adaptor.addChild(root_0, char_literal405_tree);
                    }

                    }
                    break;
                case 12 :
                    // Java.g:1145:10: '>' '>' '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal406=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal406_tree = (Object)adaptor.create(char_literal406);
                    adaptor.addChild(root_0, char_literal406_tree);
                    }
                    char_literal407=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal407_tree = (Object)adaptor.create(char_literal407);
                    adaptor.addChild(root_0, char_literal407_tree);
                    }
                    char_literal408=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal408_tree = (Object)adaptor.create(char_literal408);
                    adaptor.addChild(root_0, char_literal408_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // Java.g:1149:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? -> conditionalOrExpression ( ^( ConditionalExpression expression conditionalExpression ) )? ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal410=null;
        Token char_literal412=null;
        JavaParser.conditionalOrExpression_return conditionalOrExpression409 = null;

        JavaParser.expression_return expression411 = null;

        JavaParser.conditionalExpression_return conditionalExpression413 = null;


        Object char_literal410_tree=null;
        Object char_literal412_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_QUES=new RewriteRuleTokenStream(adaptor,"token QUES");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // Java.g:1150:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? -> conditionalOrExpression ( ^( ConditionalExpression expression conditionalExpression ) )? )
            // Java.g:1150:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression7715);
            conditionalOrExpression409=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression409.getTree());
            // Java.g:1151:9: ( '?' expression ':' conditionalExpression )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==QUES) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // Java.g:1151:10: '?' expression ':' conditionalExpression
                    {
                    char_literal410=(Token)match(input,QUES,FOLLOW_QUES_in_conditionalExpression7726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUES.add(char_literal410);

                    pushFollow(FOLLOW_expression_in_conditionalExpression7728);
                    expression411=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression411.getTree());
                    char_literal412=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression7730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal412);

                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression7732);
                    conditionalExpression413=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression413.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: conditionalExpression, conditionalOrExpression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1153:9: -> conditionalOrExpression ( ^( ConditionalExpression expression conditionalExpression ) )?
            {
                adaptor.addChild(root_0, stream_conditionalOrExpression.nextTree());
                // Java.g:1154:13: ( ^( ConditionalExpression expression conditionalExpression ) )?
                if ( stream_conditionalExpression.hasNext()||stream_expression.hasNext() ) {
                    // Java.g:1154:13: ^( ConditionalExpression expression conditionalExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ConditionalExpression, "ConditionalExpression"), root_1);

                    adaptor.addChild(root_1, stream_expression.nextTree());
                    adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_conditionalExpression.reset();
                stream_expression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // Java.g:1157:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* -> conditionalAndExpression ( ^( ConditionalOrExpression '||' conditionalAndExpression ) )* ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal415=null;
        JavaParser.conditionalAndExpression_return conditionalAndExpression414 = null;

        JavaParser.conditionalAndExpression_return conditionalAndExpression416 = null;


        Object string_literal415_tree=null;
        RewriteRuleTokenStream stream_BARBAR=new RewriteRuleTokenStream(adaptor,"token BARBAR");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // Java.g:1158:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* -> conditionalAndExpression ( ^( ConditionalOrExpression '||' conditionalAndExpression ) )* )
            // Java.g:1158:9: conditionalAndExpression ( '||' conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7797);
            conditionalAndExpression414=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression414.getTree());
            // Java.g:1159:9: ( '||' conditionalAndExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==BARBAR) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Java.g:1159:10: '||' conditionalAndExpression
            	    {
            	    string_literal415=(Token)match(input,BARBAR,FOLLOW_BARBAR_in_conditionalOrExpression7808); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BARBAR.add(string_literal415);

            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7810);
            	    conditionalAndExpression416=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression416.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);



            // AST REWRITE
            // elements: conditionalAndExpression, conditionalAndExpression, BARBAR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1161:9: -> conditionalAndExpression ( ^( ConditionalOrExpression '||' conditionalAndExpression ) )*
            {
                adaptor.addChild(root_0, stream_conditionalAndExpression.nextTree());
                // Java.g:1162:13: ( ^( ConditionalOrExpression '||' conditionalAndExpression ) )*
                while ( stream_conditionalAndExpression.hasNext()||stream_BARBAR.hasNext() ) {
                    // Java.g:1162:13: ^( ConditionalOrExpression '||' conditionalAndExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ConditionalOrExpression, "ConditionalOrExpression"), root_1);

                    adaptor.addChild(root_1, stream_BARBAR.nextNode());
                    adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_conditionalAndExpression.reset();
                stream_BARBAR.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // Java.g:1165:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* -> inclusiveOrExpression ( ^( ConditionalAndExpression '&&' inclusiveOrExpression ) )* ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal418=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression417 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression419 = null;


        Object string_literal418_tree=null;
        RewriteRuleTokenStream stream_AMPAMP=new RewriteRuleTokenStream(adaptor,"token AMPAMP");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // Java.g:1166:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* -> inclusiveOrExpression ( ^( ConditionalAndExpression '&&' inclusiveOrExpression ) )* )
            // Java.g:1166:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7874);
            inclusiveOrExpression417=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression417.getTree());
            // Java.g:1167:9: ( '&&' inclusiveOrExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==AMPAMP) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // Java.g:1167:10: '&&' inclusiveOrExpression
            	    {
            	    string_literal418=(Token)match(input,AMPAMP,FOLLOW_AMPAMP_in_conditionalAndExpression7885); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AMPAMP.add(string_literal418);

            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7887);
            	    inclusiveOrExpression419=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression419.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);



            // AST REWRITE
            // elements: inclusiveOrExpression, AMPAMP, inclusiveOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1169:9: -> inclusiveOrExpression ( ^( ConditionalAndExpression '&&' inclusiveOrExpression ) )*
            {
                adaptor.addChild(root_0, stream_inclusiveOrExpression.nextTree());
                // Java.g:1170:13: ( ^( ConditionalAndExpression '&&' inclusiveOrExpression ) )*
                while ( stream_AMPAMP.hasNext()||stream_inclusiveOrExpression.hasNext() ) {
                    // Java.g:1170:13: ^( ConditionalAndExpression '&&' inclusiveOrExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ConditionalAndExpression, "ConditionalAndExpression"), root_1);

                    adaptor.addChild(root_1, stream_AMPAMP.nextNode());
                    adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_AMPAMP.reset();
                stream_inclusiveOrExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // Java.g:1173:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* -> exclusiveOrExpression ( ^( BitOrExpression '|' exclusiveOrExpression ) )* ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal421=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression420 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression422 = null;


        Object char_literal421_tree=null;
        RewriteRuleTokenStream stream_BAR=new RewriteRuleTokenStream(adaptor,"token BAR");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // Java.g:1174:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* -> exclusiveOrExpression ( ^( BitOrExpression '|' exclusiveOrExpression ) )* )
            // Java.g:1174:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7951);
            exclusiveOrExpression420=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression420.getTree());
            // Java.g:1175:9: ( '|' exclusiveOrExpression )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==BAR) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // Java.g:1175:10: '|' exclusiveOrExpression
            	    {
            	    char_literal421=(Token)match(input,BAR,FOLLOW_BAR_in_inclusiveOrExpression7962); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BAR.add(char_literal421);

            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7964);
            	    exclusiveOrExpression422=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression422.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);



            // AST REWRITE
            // elements: BAR, exclusiveOrExpression, exclusiveOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1177:9: -> exclusiveOrExpression ( ^( BitOrExpression '|' exclusiveOrExpression ) )*
            {
                adaptor.addChild(root_0, stream_exclusiveOrExpression.nextTree());
                // Java.g:1178:13: ( ^( BitOrExpression '|' exclusiveOrExpression ) )*
                while ( stream_BAR.hasNext()||stream_exclusiveOrExpression.hasNext() ) {
                    // Java.g:1178:13: ^( BitOrExpression '|' exclusiveOrExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BitOrExpression, "BitOrExpression"), root_1);

                    adaptor.addChild(root_1, stream_BAR.nextNode());
                    adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_BAR.reset();
                stream_exclusiveOrExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // Java.g:1181:1: exclusiveOrExpression : andExpression ( '^' andExpression )* -> andExpression ( ^( BitXorExpression '^' andExpression ) )* ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal424=null;
        JavaParser.andExpression_return andExpression423 = null;

        JavaParser.andExpression_return andExpression425 = null;


        Object char_literal424_tree=null;
        RewriteRuleTokenStream stream_CARET=new RewriteRuleTokenStream(adaptor,"token CARET");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // Java.g:1182:5: ( andExpression ( '^' andExpression )* -> andExpression ( ^( BitXorExpression '^' andExpression ) )* )
            // Java.g:1182:9: andExpression ( '^' andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression8029);
            andExpression423=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression423.getTree());
            // Java.g:1183:9: ( '^' andExpression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==CARET) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // Java.g:1183:10: '^' andExpression
            	    {
            	    char_literal424=(Token)match(input,CARET,FOLLOW_CARET_in_exclusiveOrExpression8040); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_CARET.add(char_literal424);

            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression8042);
            	    andExpression425=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression425.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, CARET
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1185:9: -> andExpression ( ^( BitXorExpression '^' andExpression ) )*
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
                // Java.g:1186:13: ( ^( BitXorExpression '^' andExpression ) )*
                while ( stream_andExpression.hasNext()||stream_CARET.hasNext() ) {
                    // Java.g:1186:13: ^( BitXorExpression '^' andExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BitXorExpression, "BitXorExpression"), root_1);

                    adaptor.addChild(root_1, stream_CARET.nextNode());
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_andExpression.reset();
                stream_CARET.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // Java.g:1189:1: andExpression : equalityExpression ( '&' equalityExpression )* -> equalityExpression ( ^( BitAndExpression '&' equalityExpression ) )* ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal427=null;
        JavaParser.equalityExpression_return equalityExpression426 = null;

        JavaParser.equalityExpression_return equalityExpression428 = null;


        Object char_literal427_tree=null;
        RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // Java.g:1190:5: ( equalityExpression ( '&' equalityExpression )* -> equalityExpression ( ^( BitAndExpression '&' equalityExpression ) )* )
            // Java.g:1190:9: equalityExpression ( '&' equalityExpression )*
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression8106);
            equalityExpression426=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression426.getTree());
            // Java.g:1191:9: ( '&' equalityExpression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==AMP) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // Java.g:1191:10: '&' equalityExpression
            	    {
            	    char_literal427=(Token)match(input,AMP,FOLLOW_AMP_in_andExpression8117); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AMP.add(char_literal427);

            	    pushFollow(FOLLOW_equalityExpression_in_andExpression8119);
            	    equalityExpression428=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression428.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);



            // AST REWRITE
            // elements: equalityExpression, equalityExpression, AMP
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1193:9: -> equalityExpression ( ^( BitAndExpression '&' equalityExpression ) )*
            {
                adaptor.addChild(root_0, stream_equalityExpression.nextTree());
                // Java.g:1193:31: ( ^( BitAndExpression '&' equalityExpression ) )*
                while ( stream_equalityExpression.hasNext()||stream_AMP.hasNext() ) {
                    // Java.g:1193:31: ^( BitAndExpression '&' equalityExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BitAndExpression, "BitAndExpression"), root_1);

                    adaptor.addChild(root_1, stream_AMP.nextNode());
                    adaptor.addChild(root_1, stream_equalityExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_equalityExpression.reset();
                stream_AMP.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // Java.g:1196:1: equalityExpression : instanceOfExpression ( equalityOperator instanceOfExpression )* -> instanceOfExpression ( ^( EqualityExpression equalityOperator instanceOfExpression ) )* ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression429 = null;

        JavaParser.equalityOperator_return equalityOperator430 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression431 = null;


        RewriteRuleSubtreeStream stream_instanceOfExpression=new RewriteRuleSubtreeStream(adaptor,"rule instanceOfExpression");
        RewriteRuleSubtreeStream stream_equalityOperator=new RewriteRuleSubtreeStream(adaptor,"rule equalityOperator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // Java.g:1197:5: ( instanceOfExpression ( equalityOperator instanceOfExpression )* -> instanceOfExpression ( ^( EqualityExpression equalityOperator instanceOfExpression ) )* )
            // Java.g:1197:9: instanceOfExpression ( equalityOperator instanceOfExpression )*
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression8171);
            instanceOfExpression429=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression429.getTree());
            // Java.g:1198:9: ( equalityOperator instanceOfExpression )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==EQEQ||LA120_0==BANGEQ) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // Java.g:1199:13: equalityOperator instanceOfExpression
            	    {
            	    pushFollow(FOLLOW_equalityOperator_in_equalityExpression8198);
            	    equalityOperator430=equalityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_equalityOperator.add(equalityOperator430.getTree());
            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression8212);
            	    instanceOfExpression431=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression431.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: equalityOperator, instanceOfExpression, instanceOfExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1202:9: -> instanceOfExpression ( ^( EqualityExpression equalityOperator instanceOfExpression ) )*
            {
                adaptor.addChild(root_0, stream_instanceOfExpression.nextTree());
                // Java.g:1203:13: ( ^( EqualityExpression equalityOperator instanceOfExpression ) )*
                while ( stream_equalityOperator.hasNext()||stream_instanceOfExpression.hasNext() ) {
                    // Java.g:1203:13: ^( EqualityExpression equalityOperator instanceOfExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EqualityExpression, "EqualityExpression"), root_1);

                    adaptor.addChild(root_1, stream_equalityOperator.nextTree());
                    adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_equalityOperator.reset();
                stream_instanceOfExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class equalityOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityOperator"
    // Java.g:1206:1: equalityOperator : ( '==' | '!=' );
    public final JavaParser.equalityOperator_return equalityOperator() throws RecognitionException {
        JavaParser.equalityOperator_return retval = new JavaParser.equalityOperator_return();
        retval.start = input.LT(1);
        int equalityOperator_StartIndex = input.index();
        Object root_0 = null;

        Token set432=null;

        Object set432_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // Java.g:1207:5: ( '==' | '!=' )
            // Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set432=(Token)input.LT(1);
            if ( input.LA(1)==EQEQ||input.LA(1)==BANGEQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set432));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, equalityOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityOperator"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // Java.g:1210:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? -> relationalExpression ( ^( 'instanceof' type ) )? ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal434=null;
        JavaParser.relationalExpression_return relationalExpression433 = null;

        JavaParser.type_return type435 = null;


        Object string_literal434_tree=null;
        RewriteRuleTokenStream stream_INSTANCEOF=new RewriteRuleTokenStream(adaptor,"token INSTANCEOF");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // Java.g:1211:5: ( relationalExpression ( 'instanceof' type )? -> relationalExpression ( ^( 'instanceof' type ) )? )
            // Java.g:1211:9: relationalExpression ( 'instanceof' type )?
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression8299);
            relationalExpression433=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relationalExpression.add(relationalExpression433.getTree());
            // Java.g:1212:9: ( 'instanceof' type )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==INSTANCEOF) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // Java.g:1212:10: 'instanceof' type
                    {
                    string_literal434=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression8310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSTANCEOF.add(string_literal434);

                    pushFollow(FOLLOW_type_in_instanceOfExpression8312);
                    type435=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type435.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: INSTANCEOF, type, relationalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1214:9: -> relationalExpression ( ^( 'instanceof' type ) )?
            {
                adaptor.addChild(root_0, stream_relationalExpression.nextTree());
                // Java.g:1214:33: ( ^( 'instanceof' type ) )?
                if ( stream_INSTANCEOF.hasNext()||stream_type.hasNext() ) {
                    // Java.g:1214:33: ^( 'instanceof' type )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(stream_INSTANCEOF.nextNode(), root_1);

                    adaptor.addChild(root_1, stream_type.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_INSTANCEOF.reset();
                stream_type.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // Java.g:1217:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* -> shiftExpression ( ^( RelationalExpression relationalOp shiftExpression ) )* ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.shiftExpression_return shiftExpression436 = null;

        JavaParser.relationalOp_return relationalOp437 = null;

        JavaParser.shiftExpression_return shiftExpression438 = null;


        RewriteRuleSubtreeStream stream_relationalOp=new RewriteRuleSubtreeStream(adaptor,"rule relationalOp");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // Java.g:1218:5: ( shiftExpression ( relationalOp shiftExpression )* -> shiftExpression ( ^( RelationalExpression relationalOp shiftExpression ) )* )
            // Java.g:1218:9: shiftExpression ( relationalOp shiftExpression )*
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression8362);
            shiftExpression436=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression436.getTree());
            // Java.g:1219:9: ( relationalOp shiftExpression )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==LT) ) {
                    int LA122_2 = input.LA(2);

                    if ( ((LA122_2>=IDENTIFIER && LA122_2<=NULL)||LA122_2==BOOLEAN||LA122_2==BYTE||LA122_2==CHAR||LA122_2==DOUBLE||LA122_2==FLOAT||LA122_2==INT||LA122_2==LONG||LA122_2==NEW||LA122_2==SHORT||LA122_2==SUPER||LA122_2==THIS||LA122_2==VOID||LA122_2==LPAREN||(LA122_2>=EQ && LA122_2<=TILDE)||(LA122_2>=PLUSPLUS && LA122_2<=SUB)) ) {
                        alt122=1;
                    }


                }
                else if ( (LA122_0==GT) ) {
                    int LA122_3 = input.LA(2);

                    if ( ((LA122_3>=IDENTIFIER && LA122_3<=NULL)||LA122_3==BOOLEAN||LA122_3==BYTE||LA122_3==CHAR||LA122_3==DOUBLE||LA122_3==FLOAT||LA122_3==INT||LA122_3==LONG||LA122_3==NEW||LA122_3==SHORT||LA122_3==SUPER||LA122_3==THIS||LA122_3==VOID||LA122_3==LPAREN||(LA122_3>=EQ && LA122_3<=TILDE)||(LA122_3>=PLUSPLUS && LA122_3<=SUB)) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // Java.g:1219:10: relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression8373);
            	    relationalOp437=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_relationalOp.add(relationalOp437.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression8375);
            	    shiftExpression438=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression438.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);



            // AST REWRITE
            // elements: shiftExpression, relationalOp, shiftExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1221:9: -> shiftExpression ( ^( RelationalExpression relationalOp shiftExpression ) )*
            {
                adaptor.addChild(root_0, stream_shiftExpression.nextTree());
                // Java.g:1222:13: ( ^( RelationalExpression relationalOp shiftExpression ) )*
                while ( stream_relationalOp.hasNext()||stream_shiftExpression.hasNext() ) {
                    // Java.g:1222:13: ^( RelationalExpression relationalOp shiftExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RelationalExpression, "RelationalExpression"), root_1);

                    adaptor.addChild(root_1, stream_relationalOp.nextTree());
                    adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_relationalOp.reset();
                stream_shiftExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // Java.g:1225:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
    public final JavaParser.relationalOp_return relationalOp() throws RecognitionException {
        JavaParser.relationalOp_return retval = new JavaParser.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal439=null;
        Token char_literal440=null;
        Token char_literal441=null;
        Token char_literal442=null;
        Token char_literal443=null;
        Token char_literal444=null;

        Object char_literal439_tree=null;
        Object char_literal440_tree=null;
        Object char_literal441_tree=null;
        Object char_literal442_tree=null;
        Object char_literal443_tree=null;
        Object char_literal444_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // Java.g:1226:5: ( '<' '=' | '>' '=' | '<' | '>' )
            int alt123=4;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==LT) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==EQ) ) {
                    alt123=1;
                }
                else if ( ((LA123_1>=IDENTIFIER && LA123_1<=NULL)||LA123_1==BOOLEAN||LA123_1==BYTE||LA123_1==CHAR||LA123_1==DOUBLE||LA123_1==FLOAT||LA123_1==INT||LA123_1==LONG||LA123_1==NEW||LA123_1==SHORT||LA123_1==SUPER||LA123_1==THIS||LA123_1==VOID||LA123_1==LPAREN||(LA123_1>=BANG && LA123_1<=TILDE)||(LA123_1>=PLUSPLUS && LA123_1<=SUB)) ) {
                    alt123=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==GT) ) {
                int LA123_2 = input.LA(2);

                if ( (LA123_2==EQ) ) {
                    alt123=2;
                }
                else if ( ((LA123_2>=IDENTIFIER && LA123_2<=NULL)||LA123_2==BOOLEAN||LA123_2==BYTE||LA123_2==CHAR||LA123_2==DOUBLE||LA123_2==FLOAT||LA123_2==INT||LA123_2==LONG||LA123_2==NEW||LA123_2==SHORT||LA123_2==SUPER||LA123_2==THIS||LA123_2==VOID||LA123_2==LPAREN||(LA123_2>=BANG && LA123_2<=TILDE)||(LA123_2>=PLUSPLUS && LA123_2<=SUB)) ) {
                    alt123=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // Java.g:1226:10: '<' '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal439=(Token)match(input,LT,FOLLOW_LT_in_relationalOp8441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal439_tree = (Object)adaptor.create(char_literal439);
                    adaptor.addChild(root_0, char_literal439_tree);
                    }
                    char_literal440=(Token)match(input,EQ,FOLLOW_EQ_in_relationalOp8443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal440_tree = (Object)adaptor.create(char_literal440);
                    adaptor.addChild(root_0, char_literal440_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1227:10: '>' '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal441=(Token)match(input,GT,FOLLOW_GT_in_relationalOp8454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal441_tree = (Object)adaptor.create(char_literal441);
                    adaptor.addChild(root_0, char_literal441_tree);
                    }
                    char_literal442=(Token)match(input,EQ,FOLLOW_EQ_in_relationalOp8456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal442_tree = (Object)adaptor.create(char_literal442);
                    adaptor.addChild(root_0, char_literal442_tree);
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1228:9: '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal443=(Token)match(input,LT,FOLLOW_LT_in_relationalOp8466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal443_tree = (Object)adaptor.create(char_literal443);
                    adaptor.addChild(root_0, char_literal443_tree);
                    }

                    }
                    break;
                case 4 :
                    // Java.g:1229:9: '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal444=(Token)match(input,GT,FOLLOW_GT_in_relationalOp8476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal444_tree = (Object)adaptor.create(char_literal444);
                    adaptor.addChild(root_0, char_literal444_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // Java.g:1232:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* -> additiveExpression ( ^( ShiftExpression shiftOp additiveExpression ) )* ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.additiveExpression_return additiveExpression445 = null;

        JavaParser.shiftOp_return shiftOp446 = null;

        JavaParser.additiveExpression_return additiveExpression447 = null;


        RewriteRuleSubtreeStream stream_shiftOp=new RewriteRuleSubtreeStream(adaptor,"rule shiftOp");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // Java.g:1233:5: ( additiveExpression ( shiftOp additiveExpression )* -> additiveExpression ( ^( ShiftExpression shiftOp additiveExpression ) )* )
            // Java.g:1233:9: additiveExpression ( shiftOp additiveExpression )*
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression8496);
            additiveExpression445=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression445.getTree());
            // Java.g:1234:9: ( shiftOp additiveExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==LT) ) {
                    int LA124_1 = input.LA(2);

                    if ( (LA124_1==LT) ) {
                        int LA124_4 = input.LA(3);

                        if ( ((LA124_4>=IDENTIFIER && LA124_4<=NULL)||LA124_4==BOOLEAN||LA124_4==BYTE||LA124_4==CHAR||LA124_4==DOUBLE||LA124_4==FLOAT||LA124_4==INT||LA124_4==LONG||LA124_4==NEW||LA124_4==SHORT||LA124_4==SUPER||LA124_4==THIS||LA124_4==VOID||LA124_4==LPAREN||(LA124_4>=BANG && LA124_4<=TILDE)||(LA124_4>=PLUSPLUS && LA124_4<=SUB)) ) {
                            alt124=1;
                        }


                    }


                }
                else if ( (LA124_0==GT) ) {
                    int LA124_2 = input.LA(2);

                    if ( (LA124_2==GT) ) {
                        int LA124_5 = input.LA(3);

                        if ( (LA124_5==GT) ) {
                            int LA124_7 = input.LA(4);

                            if ( ((LA124_7>=IDENTIFIER && LA124_7<=NULL)||LA124_7==BOOLEAN||LA124_7==BYTE||LA124_7==CHAR||LA124_7==DOUBLE||LA124_7==FLOAT||LA124_7==INT||LA124_7==LONG||LA124_7==NEW||LA124_7==SHORT||LA124_7==SUPER||LA124_7==THIS||LA124_7==VOID||LA124_7==LPAREN||(LA124_7>=BANG && LA124_7<=TILDE)||(LA124_7>=PLUSPLUS && LA124_7<=SUB)) ) {
                                alt124=1;
                            }


                        }
                        else if ( ((LA124_5>=IDENTIFIER && LA124_5<=NULL)||LA124_5==BOOLEAN||LA124_5==BYTE||LA124_5==CHAR||LA124_5==DOUBLE||LA124_5==FLOAT||LA124_5==INT||LA124_5==LONG||LA124_5==NEW||LA124_5==SHORT||LA124_5==SUPER||LA124_5==THIS||LA124_5==VOID||LA124_5==LPAREN||(LA124_5>=BANG && LA124_5<=TILDE)||(LA124_5>=PLUSPLUS && LA124_5<=SUB)) ) {
                            alt124=1;
                        }


                    }


                }


                switch (alt124) {
            	case 1 :
            	    // Java.g:1234:10: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression8507);
            	    shiftOp446=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_shiftOp.add(shiftOp446.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression8509);
            	    additiveExpression447=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression447.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);



            // AST REWRITE
            // elements: additiveExpression, additiveExpression, shiftOp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1236:9: -> additiveExpression ( ^( ShiftExpression shiftOp additiveExpression ) )*
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
                // Java.g:1236:31: ( ^( ShiftExpression shiftOp additiveExpression ) )*
                while ( stream_additiveExpression.hasNext()||stream_shiftOp.hasNext() ) {
                    // Java.g:1236:31: ^( ShiftExpression shiftOp additiveExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ShiftExpression, "ShiftExpression"), root_1);

                    adaptor.addChild(root_1, stream_shiftOp.nextTree());
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_additiveExpression.reset();
                stream_shiftOp.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // Java.g:1240:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
    public final JavaParser.shiftOp_return shiftOp() throws RecognitionException {
        JavaParser.shiftOp_return retval = new JavaParser.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal448=null;
        Token char_literal449=null;
        Token char_literal450=null;
        Token char_literal451=null;
        Token char_literal452=null;
        Token char_literal453=null;
        Token char_literal454=null;

        Object char_literal448_tree=null;
        Object char_literal449_tree=null;
        Object char_literal450_tree=null;
        Object char_literal451_tree=null;
        Object char_literal452_tree=null;
        Object char_literal453_tree=null;
        Object char_literal454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // Java.g:1241:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
            int alt125=3;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==LT) ) {
                alt125=1;
            }
            else if ( (LA125_0==GT) ) {
                int LA125_2 = input.LA(2);

                if ( (LA125_2==GT) ) {
                    int LA125_3 = input.LA(3);

                    if ( (LA125_3==GT) ) {
                        alt125=2;
                    }
                    else if ( ((LA125_3>=IDENTIFIER && LA125_3<=NULL)||LA125_3==BOOLEAN||LA125_3==BYTE||LA125_3==CHAR||LA125_3==DOUBLE||LA125_3==FLOAT||LA125_3==INT||LA125_3==LONG||LA125_3==NEW||LA125_3==SHORT||LA125_3==SUPER||LA125_3==THIS||LA125_3==VOID||LA125_3==LPAREN||(LA125_3>=BANG && LA125_3<=TILDE)||(LA125_3>=PLUSPLUS && LA125_3<=SUB)) ) {
                        alt125=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // Java.g:1241:10: '<' '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal448=(Token)match(input,LT,FOLLOW_LT_in_shiftOp8563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal448_tree = (Object)adaptor.create(char_literal448);
                    adaptor.addChild(root_0, char_literal448_tree);
                    }
                    char_literal449=(Token)match(input,LT,FOLLOW_LT_in_shiftOp8565); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal449_tree = (Object)adaptor.create(char_literal449);
                    adaptor.addChild(root_0, char_literal449_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1242:10: '>' '>' '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal450=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal450_tree = (Object)adaptor.create(char_literal450);
                    adaptor.addChild(root_0, char_literal450_tree);
                    }
                    char_literal451=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal451_tree = (Object)adaptor.create(char_literal451);
                    adaptor.addChild(root_0, char_literal451_tree);
                    }
                    char_literal452=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal452_tree = (Object)adaptor.create(char_literal452);
                    adaptor.addChild(root_0, char_literal452_tree);
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1243:10: '>' '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal453=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal453_tree = (Object)adaptor.create(char_literal453);
                    adaptor.addChild(root_0, char_literal453_tree);
                    }
                    char_literal454=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal454_tree = (Object)adaptor.create(char_literal454);
                    adaptor.addChild(root_0, char_literal454_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // Java.g:1247:1: additiveExpression : multiplicativeExpression ( additiveOperator multiplicativeExpression )* -> multiplicativeExpression ( ^( AdditiveExpression additiveOperator multiplicativeExpression ) )* ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression455 = null;

        JavaParser.additiveOperator_return additiveOperator456 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression457 = null;


        RewriteRuleSubtreeStream stream_additiveOperator=new RewriteRuleSubtreeStream(adaptor,"rule additiveOperator");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // Java.g:1248:5: ( multiplicativeExpression ( additiveOperator multiplicativeExpression )* -> multiplicativeExpression ( ^( AdditiveExpression additiveOperator multiplicativeExpression ) )* )
            // Java.g:1248:9: multiplicativeExpression ( additiveOperator multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8614);
            multiplicativeExpression455=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression455.getTree());
            // Java.g:1249:9: ( additiveOperator multiplicativeExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( ((LA126_0>=PLUS && LA126_0<=SUB)) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // Java.g:1250:13: additiveOperator multiplicativeExpression
            	    {
            	    pushFollow(FOLLOW_additiveOperator_in_additiveExpression8641);
            	    additiveOperator456=additiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_additiveOperator.add(additiveOperator456.getTree());
            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8655);
            	    multiplicativeExpression457=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression457.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);



            // AST REWRITE
            // elements: additiveOperator, multiplicativeExpression, multiplicativeExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1253:9: -> multiplicativeExpression ( ^( AdditiveExpression additiveOperator multiplicativeExpression ) )*
            {
                adaptor.addChild(root_0, stream_multiplicativeExpression.nextTree());
                // Java.g:1254:13: ( ^( AdditiveExpression additiveOperator multiplicativeExpression ) )*
                while ( stream_additiveOperator.hasNext()||stream_multiplicativeExpression.hasNext() ) {
                    // Java.g:1254:13: ^( AdditiveExpression additiveOperator multiplicativeExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AdditiveExpression, "AdditiveExpression"), root_1);

                    adaptor.addChild(root_1, stream_additiveOperator.nextTree());
                    adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_additiveOperator.reset();
                stream_multiplicativeExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class additiveOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveOperator"
    // Java.g:1257:1: additiveOperator : ( '+' | '-' );
    public final JavaParser.additiveOperator_return additiveOperator() throws RecognitionException {
        JavaParser.additiveOperator_return retval = new JavaParser.additiveOperator_return();
        retval.start = input.LT(1);
        int additiveOperator_StartIndex = input.index();
        Object root_0 = null;

        Token set458=null;

        Object set458_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // Java.g:1258:5: ( '+' | '-' )
            // Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set458=(Token)input.LT(1);
            if ( (input.LA(1)>=PLUS && input.LA(1)<=SUB) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set458));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, additiveOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveOperator"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // Java.g:1261:1: multiplicativeExpression : unaryExpression ( multiplicativeOperator unaryExpression )* -> unaryExpression ( ^( MultiplicativeExpression multiplicativeOperator unaryExpression ) )* ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.unaryExpression_return unaryExpression459 = null;

        JavaParser.multiplicativeOperator_return multiplicativeOperator460 = null;

        JavaParser.unaryExpression_return unaryExpression461 = null;


        RewriteRuleSubtreeStream stream_multiplicativeOperator=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeOperator");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // Java.g:1262:5: ( unaryExpression ( multiplicativeOperator unaryExpression )* -> unaryExpression ( ^( MultiplicativeExpression multiplicativeOperator unaryExpression ) )* )
            // Java.g:1263:9: unaryExpression ( multiplicativeOperator unaryExpression )*
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8747);
            unaryExpression459=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression459.getTree());
            // Java.g:1264:9: ( multiplicativeOperator unaryExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( ((LA127_0>=STAR && LA127_0<=SLASH)||LA127_0==PERCENT) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // Java.g:1265:13: multiplicativeOperator unaryExpression
            	    {
            	    pushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression8774);
            	    multiplicativeOperator460=multiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeOperator.add(multiplicativeOperator460.getTree());
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8788);
            	    unaryExpression461=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression461.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);



            // AST REWRITE
            // elements: multiplicativeOperator, unaryExpression, unaryExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1268:9: -> unaryExpression ( ^( MultiplicativeExpression multiplicativeOperator unaryExpression ) )*
            {
                adaptor.addChild(root_0, stream_unaryExpression.nextTree());
                // Java.g:1269:13: ( ^( MultiplicativeExpression multiplicativeOperator unaryExpression ) )*
                while ( stream_multiplicativeOperator.hasNext()||stream_unaryExpression.hasNext() ) {
                    // Java.g:1269:13: ^( MultiplicativeExpression multiplicativeOperator unaryExpression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultiplicativeExpression, "MultiplicativeExpression"), root_1);

                    adaptor.addChild(root_1, stream_multiplicativeOperator.nextTree());
                    adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_multiplicativeOperator.reset();
                stream_unaryExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class multiplicativeOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeOperator"
    // Java.g:1272:1: multiplicativeOperator : ( '*' | '/' | '%' );
    public final JavaParser.multiplicativeOperator_return multiplicativeOperator() throws RecognitionException {
        JavaParser.multiplicativeOperator_return retval = new JavaParser.multiplicativeOperator_return();
        retval.start = input.LT(1);
        int multiplicativeOperator_StartIndex = input.index();
        Object root_0 = null;

        Token set462=null;

        Object set462_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // Java.g:1273:5: ( '*' | '/' | '%' )
            // Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set462=(Token)input.LT(1);
            if ( (input.LA(1)>=STAR && input.LA(1)<=SLASH)||input.LA(1)==PERCENT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set462));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, multiplicativeOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeOperator"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // Java.g:1276:1: unaryExpression : ( '+' unaryExpression -> ^( UnaryExpression '+' unaryExpression ) | '-' unaryExpression -> ^( UnaryExpression '-' unaryExpression ) | '++' unaryExpression -> ^( UnaryExpression '++' unaryExpression ) | '--' unaryExpression -> ^( UnaryExpression '--' unaryExpression ) | unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal463=null;
        Token char_literal465=null;
        Token string_literal467=null;
        Token string_literal469=null;
        JavaParser.unaryExpression_return unaryExpression464 = null;

        JavaParser.unaryExpression_return unaryExpression466 = null;

        JavaParser.unaryExpression_return unaryExpression468 = null;

        JavaParser.unaryExpression_return unaryExpression470 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus471 = null;


        Object char_literal463_tree=null;
        Object char_literal465_tree=null;
        Object string_literal467_tree=null;
        Object string_literal469_tree=null;
        RewriteRuleTokenStream stream_SUB=new RewriteRuleTokenStream(adaptor,"token SUB");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_SUBSUB=new RewriteRuleTokenStream(adaptor,"token SUBSUB");
        RewriteRuleTokenStream stream_PLUSPLUS=new RewriteRuleTokenStream(adaptor,"token PLUSPLUS");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // Java.g:1281:5: ( '+' unaryExpression -> ^( UnaryExpression '+' unaryExpression ) | '-' unaryExpression -> ^( UnaryExpression '-' unaryExpression ) | '++' unaryExpression -> ^( UnaryExpression '++' unaryExpression ) | '--' unaryExpression -> ^( UnaryExpression '--' unaryExpression ) | unaryExpressionNotPlusMinus )
            int alt128=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt128=1;
                }
                break;
            case SUB:
                {
                alt128=2;
                }
                break;
            case PLUSPLUS:
                {
                alt128=3;
                }
                break;
            case SUBSUB:
                {
                alt128=4;
                }
                break;
            case IDENTIFIER:
            case INTLITERAL:
            case LONGLITERAL:
            case FLOATLITERAL:
            case DOUBLELITERAL:
            case CHARLITERAL:
            case STRINGLITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case LPAREN:
            case BANG:
            case TILDE:
                {
                alt128=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // Java.g:1281:9: '+' unaryExpression
                    {
                    char_literal463=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression8881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(char_literal463);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8884);
                    unaryExpression464=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression464.getTree());


                    // AST REWRITE
                    // elements: PLUS, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1282:9: -> ^( UnaryExpression '+' unaryExpression )
                    {
                        // Java.g:1282:12: ^( UnaryExpression '+' unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnaryExpression, "UnaryExpression"), root_1);

                        adaptor.addChild(root_1, stream_PLUS.nextNode());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1283:9: '-' unaryExpression
                    {
                    char_literal465=(Token)match(input,SUB,FOLLOW_SUB_in_unaryExpression8912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUB.add(char_literal465);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8914);
                    unaryExpression466=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression466.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, SUB
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1284:9: -> ^( UnaryExpression '-' unaryExpression )
                    {
                        // Java.g:1284:12: ^( UnaryExpression '-' unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnaryExpression, "UnaryExpression"), root_1);

                        adaptor.addChild(root_1, stream_SUB.nextNode());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:1285:9: '++' unaryExpression
                    {
                    string_literal467=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_unaryExpression8942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUSPLUS.add(string_literal467);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8944);
                    unaryExpression468=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression468.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, PLUSPLUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1286:9: -> ^( UnaryExpression '++' unaryExpression )
                    {
                        // Java.g:1286:12: ^( UnaryExpression '++' unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnaryExpression, "UnaryExpression"), root_1);

                        adaptor.addChild(root_1, stream_PLUSPLUS.nextNode());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Java.g:1287:9: '--' unaryExpression
                    {
                    string_literal469=(Token)match(input,SUBSUB,FOLLOW_SUBSUB_in_unaryExpression8972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUBSUB.add(string_literal469);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8974);
                    unaryExpression470=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression470.getTree());


                    // AST REWRITE
                    // elements: SUBSUB, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1288:9: -> ^( UnaryExpression '--' unaryExpression )
                    {
                        // Java.g:1288:12: ^( UnaryExpression '--' unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnaryExpression, "UnaryExpression"), root_1);

                        adaptor.addChild(root_1, stream_SUBSUB.nextNode());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Java.g:1289:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression9002);
                    unaryExpressionNotPlusMinus471=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus471.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // Java.g:1292:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( UnaryExpression '~' unaryExpression ) | '!' unaryExpression -> ^( UnaryExpression '!' unaryExpression ) | castExpression | primary ( selector )* ( postOperator )? -> primary ( ^( Selector selector ) )* ( ^( PostOperator postOperator ) )? );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal472=null;
        Token char_literal474=null;
        JavaParser.unaryExpression_return unaryExpression473 = null;

        JavaParser.unaryExpression_return unaryExpression475 = null;

        JavaParser.castExpression_return castExpression476 = null;

        JavaParser.primary_return primary477 = null;

        JavaParser.selector_return selector478 = null;

        JavaParser.postOperator_return postOperator479 = null;


        Object char_literal472_tree=null;
        Object char_literal474_tree=null;
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_TILDE=new RewriteRuleTokenStream(adaptor,"token TILDE");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_postOperator=new RewriteRuleSubtreeStream(adaptor,"rule postOperator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // Java.g:1293:5: ( '~' unaryExpression -> ^( UnaryExpression '~' unaryExpression ) | '!' unaryExpression -> ^( UnaryExpression '!' unaryExpression ) | castExpression | primary ( selector )* ( postOperator )? -> primary ( ^( Selector selector ) )* ( ^( PostOperator postOperator ) )? )
            int alt131=4;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // Java.g:1293:9: '~' unaryExpression
                    {
                    char_literal472=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus9022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TILDE.add(char_literal472);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus9024);
                    unaryExpression473=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression473.getTree());


                    // AST REWRITE
                    // elements: TILDE, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1294:9: -> ^( UnaryExpression '~' unaryExpression )
                    {
                        // Java.g:1294:12: ^( UnaryExpression '~' unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnaryExpression, "UnaryExpression"), root_1);

                        adaptor.addChild(root_1, stream_TILDE.nextNode());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1295:9: '!' unaryExpression
                    {
                    char_literal474=(Token)match(input,BANG,FOLLOW_BANG_in_unaryExpressionNotPlusMinus9052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(char_literal474);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus9054);
                    unaryExpression475=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression475.getTree());


                    // AST REWRITE
                    // elements: BANG, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1296:9: -> ^( UnaryExpression '!' unaryExpression )
                    {
                        // Java.g:1296:12: ^( UnaryExpression '!' unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UnaryExpression, "UnaryExpression"), root_1);

                        adaptor.addChild(root_1, stream_BANG.nextNode());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:1297:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus9082);
                    castExpression476=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression476.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:1298:9: primary ( selector )* ( postOperator )?
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus9092);
                    primary477=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary477.getTree());
                    // Java.g:1299:9: ( selector )*
                    loop129:
                    do {
                        int alt129=2;
                        int LA129_0 = input.LA(1);

                        if ( (LA129_0==LBRACKET||LA129_0==DOT) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                    	case 1 :
                    	    // Java.g:1299:10: selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus9103);
                    	    selector478=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_selector.add(selector478.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop129;
                        }
                    } while (true);

                    // Java.g:1301:9: ( postOperator )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( ((LA130_0>=PLUSPLUS && LA130_0<=SUBSUB)) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // Java.g:1301:10: postOperator
                            {
                            pushFollow(FOLLOW_postOperator_in_unaryExpressionNotPlusMinus9125);
                            postOperator479=postOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_postOperator.add(postOperator479.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: selector, postOperator, primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1302:9: -> primary ( ^( Selector selector ) )* ( ^( PostOperator postOperator ) )?
                    {
                        adaptor.addChild(root_0, stream_primary.nextTree());
                        // Java.g:1302:20: ( ^( Selector selector ) )*
                        while ( stream_selector.hasNext() ) {
                            // Java.g:1302:20: ^( Selector selector )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Selector, "Selector"), root_1);

                            adaptor.addChild(root_1, stream_selector.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_selector.reset();
                        // Java.g:1302:42: ( ^( PostOperator postOperator ) )?
                        if ( stream_postOperator.hasNext() ) {
                            // Java.g:1302:42: ^( PostOperator postOperator )
                            {
                            Object root_1 = (Object)adaptor.nil();
                            root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PostOperator, "PostOperator"), root_1);

                            adaptor.addChild(root_1, stream_postOperator.nextTree());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_postOperator.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class postOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "postOperator"
    // Java.g:1305:1: postOperator : ( '++' | '--' );
    public final JavaParser.postOperator_return postOperator() throws RecognitionException {
        JavaParser.postOperator_return retval = new JavaParser.postOperator_return();
        retval.start = input.LT(1);
        int postOperator_StartIndex = input.index();
        Object root_0 = null;

        Token set480=null;

        Object set480_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // Java.g:1306:5: ( '++' | '--' )
            // Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set480=(Token)input.LT(1);
            if ( (input.LA(1)>=PLUSPLUS && input.LA(1)<=SUBSUB) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set480));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, postOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "postOperator"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // Java.g:1309:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CastExpression primitiveType unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CastExpression type unaryExpressionNotPlusMinus ) );
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal481=null;
        Token char_literal483=null;
        Token char_literal485=null;
        Token char_literal487=null;
        JavaParser.primitiveType_return primitiveType482 = null;

        JavaParser.unaryExpression_return unaryExpression484 = null;

        JavaParser.type_return type486 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus488 = null;


        Object char_literal481_tree=null;
        Object char_literal483_tree=null;
        Object char_literal485_tree=null;
        Object char_literal487_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // Java.g:1310:5: ( '(' primitiveType ')' unaryExpression -> ^( CastExpression primitiveType unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CastExpression type unaryExpressionNotPlusMinus ) )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==LPAREN) ) {
                int LA132_1 = input.LA(2);

                if ( (synpred205_Java()) ) {
                    alt132=1;
                }
                else if ( (true) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // Java.g:1310:9: '(' primitiveType ')' unaryExpression
                    {
                    char_literal481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_castExpression9196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal481);

                    pushFollow(FOLLOW_primitiveType_in_castExpression9198);
                    primitiveType482=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType482.getTree());
                    char_literal483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_castExpression9200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal483);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression9202);
                    unaryExpression484=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression484.getTree());


                    // AST REWRITE
                    // elements: primitiveType, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1311:9: -> ^( CastExpression primitiveType unaryExpression )
                    {
                        // Java.g:1311:12: ^( CastExpression primitiveType unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CastExpression, "CastExpression"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1312:9: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal485=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_castExpression9230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal485);

                    pushFollow(FOLLOW_type_in_castExpression9232);
                    type486=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type486.getTree());
                    char_literal487=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_castExpression9234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal487);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression9236);
                    unaryExpressionNotPlusMinus488=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus488.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1313:9: -> ^( CastExpression type unaryExpressionNotPlusMinus )
                    {
                        // Java.g:1313:12: ^( CastExpression type unaryExpressionNotPlusMinus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CastExpression, "CastExpression"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpressionNotPlusMinus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // Java.g:1316:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? -> ^( 'this' ( IDENTIFIER )* ( identifierSuffix )? ) | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? -> ^( IDENTIFIER ( IDENTIFIER )* ( identifierSuffix )? ) | 'super' superSuffix -> ^( 'super' superSuffix ) | literal | creator | primitiveType ( '[' ']' )* '.' 'class' -> ^( 'class' primitiveType ( '[' )* ) | 'void' '.' 'class' -> ^( 'class' 'void' ) );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal490=null;
        Token char_literal491=null;
        Token IDENTIFIER492=null;
        Token IDENTIFIER494=null;
        Token char_literal495=null;
        Token IDENTIFIER496=null;
        Token string_literal498=null;
        Token char_literal503=null;
        Token char_literal504=null;
        Token char_literal505=null;
        Token string_literal506=null;
        Token string_literal507=null;
        Token char_literal508=null;
        Token string_literal509=null;
        JavaParser.parExpression_return parExpression489 = null;

        JavaParser.identifierSuffix_return identifierSuffix493 = null;

        JavaParser.identifierSuffix_return identifierSuffix497 = null;

        JavaParser.superSuffix_return superSuffix499 = null;

        JavaParser.literal_return literal500 = null;

        JavaParser.creator_return creator501 = null;

        JavaParser.primitiveType_return primitiveType502 = null;


        Object string_literal490_tree=null;
        Object char_literal491_tree=null;
        Object IDENTIFIER492_tree=null;
        Object IDENTIFIER494_tree=null;
        Object char_literal495_tree=null;
        Object IDENTIFIER496_tree=null;
        Object string_literal498_tree=null;
        Object char_literal503_tree=null;
        Object char_literal504_tree=null;
        Object char_literal505_tree=null;
        Object string_literal506_tree=null;
        Object string_literal507_tree=null;
        Object char_literal508_tree=null;
        Object string_literal509_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_superSuffix=new RewriteRuleSubtreeStream(adaptor,"rule superSuffix");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_identifierSuffix=new RewriteRuleSubtreeStream(adaptor,"rule identifierSuffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // Java.g:1320:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? -> ^( 'this' ( IDENTIFIER )* ( identifierSuffix )? ) | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? -> ^( IDENTIFIER ( IDENTIFIER )* ( identifierSuffix )? ) | 'super' superSuffix -> ^( 'super' superSuffix ) | literal | creator | primitiveType ( '[' ']' )* '.' 'class' -> ^( 'class' primitiveType ( '[' )* ) | 'void' '.' 'class' -> ^( 'class' 'void' ) )
            int alt138=8;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt138=1;
                }
                break;
            case THIS:
                {
                alt138=2;
                }
                break;
            case IDENTIFIER:
                {
                alt138=3;
                }
                break;
            case SUPER:
                {
                alt138=4;
                }
                break;
            case INTLITERAL:
            case LONGLITERAL:
            case FLOATLITERAL:
            case DOUBLELITERAL:
            case CHARLITERAL:
            case STRINGLITERAL:
            case TRUE:
            case FALSE:
            case NULL:
                {
                alt138=5;
                }
                break;
            case NEW:
                {
                alt138=6;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt138=7;
                }
                break;
            case VOID:
                {
                alt138=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // Java.g:1320:9: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary9276);
                    parExpression489=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression489.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1321:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
                    {
                    string_literal490=(Token)match(input,THIS,FOLLOW_THIS_in_primary9298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THIS.add(string_literal490);

                    // Java.g:1322:9: ( '.' IDENTIFIER )*
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==DOT) ) {
                            int LA133_2 = input.LA(2);

                            if ( (LA133_2==IDENTIFIER) ) {
                                int LA133_3 = input.LA(3);

                                if ( (synpred207_Java()) ) {
                                    alt133=1;
                                }


                            }


                        }


                        switch (alt133) {
                    	case 1 :
                    	    // Java.g:1322:10: '.' IDENTIFIER
                    	    {
                    	    char_literal491=(Token)match(input,DOT,FOLLOW_DOT_in_primary9309); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(char_literal491);

                    	    IDENTIFIER492=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary9311); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER492);


                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);

                    // Java.g:1324:9: ( identifierSuffix )?
                    int alt134=2;
                    alt134 = dfa134.predict(input);
                    switch (alt134) {
                        case 1 :
                            // Java.g:1324:10: identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary9333);
                            identifierSuffix493=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifierSuffix.add(identifierSuffix493.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: THIS, identifierSuffix, IDENTIFIER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1326:9: -> ^( 'this' ( IDENTIFIER )* ( identifierSuffix )? )
                    {
                        // Java.g:1326:12: ^( 'this' ( IDENTIFIER )* ( identifierSuffix )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_THIS.nextNode(), root_1);

                        // Java.g:1326:21: ( IDENTIFIER )*
                        while ( stream_IDENTIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                        }
                        stream_IDENTIFIER.reset();
                        // Java.g:1326:35: ( identifierSuffix )?
                        if ( stream_identifierSuffix.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifierSuffix.nextTree());

                        }
                        stream_identifierSuffix.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:1327:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
                    {
                    IDENTIFIER494=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary9378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER494);

                    // Java.g:1328:9: ( '.' IDENTIFIER )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==DOT) ) {
                            int LA135_2 = input.LA(2);

                            if ( (LA135_2==IDENTIFIER) ) {
                                int LA135_3 = input.LA(3);

                                if ( (synpred210_Java()) ) {
                                    alt135=1;
                                }


                            }


                        }


                        switch (alt135) {
                    	case 1 :
                    	    // Java.g:1328:10: '.' IDENTIFIER
                    	    {
                    	    char_literal495=(Token)match(input,DOT,FOLLOW_DOT_in_primary9389); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(char_literal495);

                    	    IDENTIFIER496=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary9391); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER496);


                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    // Java.g:1330:9: ( identifierSuffix )?
                    int alt136=2;
                    alt136 = dfa136.predict(input);
                    switch (alt136) {
                        case 1 :
                            // Java.g:1330:10: identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary9413);
                            identifierSuffix497=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifierSuffix.add(identifierSuffix497.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: identifierSuffix, IDENTIFIER, IDENTIFIER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1332:9: -> ^( IDENTIFIER ( IDENTIFIER )* ( identifierSuffix )? )
                    {
                        // Java.g:1332:12: ^( IDENTIFIER ( IDENTIFIER )* ( identifierSuffix )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_IDENTIFIER.nextNode(), root_1);

                        // Java.g:1332:25: ( IDENTIFIER )*
                        while ( stream_IDENTIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                        }
                        stream_IDENTIFIER.reset();
                        // Java.g:1332:39: ( identifierSuffix )?
                        if ( stream_identifierSuffix.hasNext() ) {
                            adaptor.addChild(root_1, stream_identifierSuffix.nextTree());

                        }
                        stream_identifierSuffix.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // Java.g:1333:9: 'super' superSuffix
                    {
                    string_literal498=(Token)match(input,SUPER,FOLLOW_SUPER_in_primary9458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(string_literal498);

                    pushFollow(FOLLOW_superSuffix_in_primary9468);
                    superSuffix499=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_superSuffix.add(superSuffix499.getTree());


                    // AST REWRITE
                    // elements: SUPER, superSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1335:9: -> ^( 'super' superSuffix )
                    {
                        // Java.g:1335:12: ^( 'super' superSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_SUPER.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_superSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // Java.g:1336:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary9494);
                    literal500=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal500.getTree());

                    }
                    break;
                case 6 :
                    // Java.g:1337:9: creator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_creator_in_primary9504);
                    creator501=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator501.getTree());

                    }
                    break;
                case 7 :
                    // Java.g:1338:9: primitiveType ( '[' ']' )* '.' 'class'
                    {
                    pushFollow(FOLLOW_primitiveType_in_primary9514);
                    primitiveType502=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType502.getTree());
                    // Java.g:1339:9: ( '[' ']' )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==LBRACKET) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // Java.g:1339:10: '[' ']'
                    	    {
                    	    char_literal503=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_primary9525); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal503);

                    	    char_literal504=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_primary9527); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal504);


                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);

                    char_literal505=(Token)match(input,DOT,FOLLOW_DOT_in_primary9548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal505);

                    string_literal506=(Token)match(input,CLASS,FOLLOW_CLASS_in_primary9550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(string_literal506);



                    // AST REWRITE
                    // elements: primitiveType, LBRACKET, CLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1342:9: -> ^( 'class' primitiveType ( '[' )* )
                    {
                        // Java.g:1342:12: ^( 'class' primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // Java.g:1342:36: ( '[' )*
                        while ( stream_LBRACKET.hasNext() ) {
                            adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                        }
                        stream_LBRACKET.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // Java.g:1343:9: 'void' '.' 'class'
                    {
                    string_literal507=(Token)match(input,VOID,FOLLOW_VOID_in_primary9581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(string_literal507);

                    char_literal508=(Token)match(input,DOT,FOLLOW_DOT_in_primary9583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal508);

                    string_literal509=(Token)match(input,CLASS,FOLLOW_CLASS_in_primary9585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(string_literal509);



                    // AST REWRITE
                    // elements: CLASS, VOID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1344:9: -> ^( 'class' 'void' )
                    {
                        // Java.g:1344:12: ^( 'class' 'void' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_VOID.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // Java.g:1348:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? -> ^( SuperSuffix IDENTIFIER ( typeArguments )? ( arguments )? ) );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal511=null;
        Token IDENTIFIER513=null;
        JavaParser.arguments_return arguments510 = null;

        JavaParser.typeArguments_return typeArguments512 = null;

        JavaParser.arguments_return arguments514 = null;


        Object char_literal511_tree=null;
        Object IDENTIFIER513_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // Java.g:1349:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? -> ^( SuperSuffix IDENTIFIER ( typeArguments )? ( arguments )? ) )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==LPAREN) ) {
                alt141=1;
            }
            else if ( (LA141_0==DOT) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // Java.g:1349:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix9627);
                    arguments510=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments510.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1350:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
                    {
                    char_literal511=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix9637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal511);

                    // Java.g:1350:13: ( typeArguments )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==LT) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // Java.g:1350:14: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_superSuffix9640);
                            typeArguments512=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments512.getTree());

                            }
                            break;

                    }

                    IDENTIFIER513=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_superSuffix9661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER513);

                    // Java.g:1353:9: ( arguments )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==LPAREN) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // Java.g:1353:10: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix9672);
                            arguments514=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments514.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: IDENTIFIER, typeArguments, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1355:9: -> ^( SuperSuffix IDENTIFIER ( typeArguments )? ( arguments )? )
                    {
                        // Java.g:1355:12: ^( SuperSuffix IDENTIFIER ( typeArguments )? ( arguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SuperSuffix, "SuperSuffix"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        // Java.g:1355:37: ( typeArguments )?
                        if ( stream_typeArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeArguments.nextTree());

                        }
                        stream_typeArguments.reset();
                        // Java.g:1355:54: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // Java.g:1359:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' -> ^( 'class' ( '[' )+ ) | ( '[' expression ']' )+ -> ^( ArrayAccess ( expression )+ ) | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments -> ^( TypedSuffix IDENTIFIER nonWildcardTypeArguments arguments ) | '.' 'this' | '.' 'super' arguments | innerCreator );
    public final JavaParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        JavaParser.identifierSuffix_return retval = new JavaParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal515=null;
        Token char_literal516=null;
        Token char_literal517=null;
        Token string_literal518=null;
        Token char_literal519=null;
        Token char_literal521=null;
        Token char_literal523=null;
        Token string_literal524=null;
        Token char_literal525=null;
        Token IDENTIFIER527=null;
        Token char_literal529=null;
        Token string_literal530=null;
        Token char_literal531=null;
        Token string_literal532=null;
        JavaParser.expression_return expression520 = null;

        JavaParser.arguments_return arguments522 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments526 = null;

        JavaParser.arguments_return arguments528 = null;

        JavaParser.arguments_return arguments533 = null;

        JavaParser.innerCreator_return innerCreator534 = null;


        Object char_literal515_tree=null;
        Object char_literal516_tree=null;
        Object char_literal517_tree=null;
        Object string_literal518_tree=null;
        Object char_literal519_tree=null;
        Object char_literal521_tree=null;
        Object char_literal523_tree=null;
        Object string_literal524_tree=null;
        Object char_literal525_tree=null;
        Object IDENTIFIER527_tree=null;
        Object char_literal529_tree=null;
        Object string_literal530_tree=null;
        Object char_literal531_tree=null;
        Object string_literal532_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // Java.g:1360:5: ( ( '[' ']' )+ '.' 'class' -> ^( 'class' ( '[' )+ ) | ( '[' expression ']' )+ -> ^( ArrayAccess ( expression )+ ) | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments -> ^( TypedSuffix IDENTIFIER nonWildcardTypeArguments arguments ) | '.' 'this' | '.' 'super' arguments | innerCreator )
            int alt144=8;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // Java.g:1360:9: ( '[' ']' )+ '.' 'class'
                    {
                    // Java.g:1360:9: ( '[' ']' )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==LBRACKET) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // Java.g:1360:10: '[' ']'
                    	    {
                    	    char_literal515=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_identifierSuffix9731); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal515);

                    	    char_literal516=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_identifierSuffix9733); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal516);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);

                    char_literal517=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal517);

                    string_literal518=(Token)match(input,CLASS,FOLLOW_CLASS_in_identifierSuffix9756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(string_literal518);



                    // AST REWRITE
                    // elements: CLASS, LBRACKET
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1363:9: -> ^( 'class' ( '[' )+ )
                    {
                        // Java.g:1363:12: ^( 'class' ( '[' )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                        if ( !(stream_LBRACKET.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_LBRACKET.hasNext() ) {
                            adaptor.addChild(root_1, stream_LBRACKET.nextNode());

                        }
                        stream_LBRACKET.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1364:9: ( '[' expression ']' )+
                    {
                    // Java.g:1364:9: ( '[' expression ']' )+
                    int cnt143=0;
                    loop143:
                    do {
                        int alt143=2;
                        alt143 = dfa143.predict(input);
                        switch (alt143) {
                    	case 1 :
                    	    // Java.g:1364:10: '[' expression ']'
                    	    {
                    	    char_literal519=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_identifierSuffix9786); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal519);

                    	    pushFollow(FOLLOW_expression_in_identifierSuffix9788);
                    	    expression520=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression520.getTree());
                    	    char_literal521=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_identifierSuffix9790); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal521);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt143 >= 1 ) break loop143;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(143, input);
                                throw eee;
                        }
                        cnt143++;
                    } while (true);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1366:9: -> ^( ArrayAccess ( expression )+ )
                    {
                        // Java.g:1366:12: ^( ArrayAccess ( expression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArrayAccess, "ArrayAccess"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:1367:9: arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix9830);
                    arguments522=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments522.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:1368:9: '.' 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal523=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9840); if (state.failed) return retval;
                    string_literal524=(Token)match(input,CLASS,FOLLOW_CLASS_in_identifierSuffix9843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal524_tree = (Object)adaptor.create(string_literal524);
                    adaptor.addChild(root_0, string_literal524_tree);
                    }

                    }
                    break;
                case 5 :
                    // Java.g:1369:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
                    {
                    char_literal525=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal525);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_identifierSuffix9855);
                    nonWildcardTypeArguments526=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments526.getTree());
                    IDENTIFIER527=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifierSuffix9857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER527);

                    pushFollow(FOLLOW_arguments_in_identifierSuffix9859);
                    arguments528=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments528.getTree());


                    // AST REWRITE
                    // elements: arguments, IDENTIFIER, nonWildcardTypeArguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1370:9: -> ^( TypedSuffix IDENTIFIER nonWildcardTypeArguments arguments )
                    {
                        // Java.g:1370:12: ^( TypedSuffix IDENTIFIER nonWildcardTypeArguments arguments )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypedSuffix, "TypedSuffix"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());
                        adaptor.addChild(root_1, stream_arguments.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // Java.g:1371:9: '.' 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal529=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9889); if (state.failed) return retval;
                    string_literal530=(Token)match(input,THIS,FOLLOW_THIS_in_identifierSuffix9892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal530_tree = (Object)adaptor.create(string_literal530);
                    adaptor.addChild(root_0, string_literal530_tree);
                    }

                    }
                    break;
                case 7 :
                    // Java.g:1372:9: '.' 'super' arguments
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal531=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9902); if (state.failed) return retval;
                    string_literal532=(Token)match(input,SUPER,FOLLOW_SUPER_in_identifierSuffix9905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal532_tree = (Object)adaptor.create(string_literal532);
                    adaptor.addChild(root_0, string_literal532_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_identifierSuffix9907);
                    arguments533=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments533.getTree());

                    }
                    break;
                case 8 :
                    // Java.g:1373:9: innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix9917);
                    innerCreator534=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator534.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // Java.g:1377:1: selector : ( '.' ( nonWildcardTypeArguments )? IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' -> ^( ArrayAccess ( expression )+ ) );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal535=null;
        Token IDENTIFIER537=null;
        Token char_literal539=null;
        Token string_literal540=null;
        Token char_literal541=null;
        Token string_literal542=null;
        Token char_literal545=null;
        Token char_literal547=null;
        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments536 = null;

        JavaParser.arguments_return arguments538 = null;

        JavaParser.superSuffix_return superSuffix543 = null;

        JavaParser.innerCreator_return innerCreator544 = null;

        JavaParser.expression_return expression546 = null;


        Object char_literal535_tree=null;
        Object IDENTIFIER537_tree=null;
        Object char_literal539_tree=null;
        Object string_literal540_tree=null;
        Object char_literal541_tree=null;
        Object string_literal542_tree=null;
        Object char_literal545_tree=null;
        Object char_literal547_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // Java.g:1378:5: ( '.' ( nonWildcardTypeArguments )? IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' -> ^( ArrayAccess ( expression )+ ) )
            int alt147=5;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==DOT) ) {
                switch ( input.LA(2) ) {
                case THIS:
                    {
                    alt147=2;
                    }
                    break;
                case SUPER:
                    {
                    alt147=3;
                    }
                    break;
                case NEW:
                    {
                    alt147=4;
                    }
                    break;
                case IDENTIFIER:
                case LT:
                    {
                    alt147=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA147_0==LBRACKET) ) {
                alt147=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // Java.g:1378:9: '.' ( nonWildcardTypeArguments )? IDENTIFIER ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal535=(Token)match(input,DOT,FOLLOW_DOT_in_selector9939); if (state.failed) return retval;
                    // Java.g:1378:14: ( nonWildcardTypeArguments )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==LT) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // Java.g:1378:15: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector9943);
                            nonWildcardTypeArguments536=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments536.getTree());

                            }
                            break;

                    }

                    IDENTIFIER537=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_selector9947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER537_tree = (Object)adaptor.create(IDENTIFIER537);
                    adaptor.addChild(root_0, IDENTIFIER537_tree);
                    }
                    // Java.g:1379:9: ( arguments )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==LPAREN) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // Java.g:1379:10: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector9958);
                            arguments538=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments538.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Java.g:1381:9: '.' 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal539=(Token)match(input,DOT,FOLLOW_DOT_in_selector9979); if (state.failed) return retval;
                    string_literal540=(Token)match(input,THIS,FOLLOW_THIS_in_selector9982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal540_tree = (Object)adaptor.create(string_literal540);
                    adaptor.addChild(root_0, string_literal540_tree);
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1382:9: '.' 'super' superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal541=(Token)match(input,DOT,FOLLOW_DOT_in_selector9992); if (state.failed) return retval;
                    string_literal542=(Token)match(input,SUPER,FOLLOW_SUPER_in_selector9995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal542_tree = (Object)adaptor.create(string_literal542);
                    adaptor.addChild(root_0, string_literal542_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_selector10005);
                    superSuffix543=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix543.getTree());

                    }
                    break;
                case 4 :
                    // Java.g:1384:9: innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_innerCreator_in_selector10015);
                    innerCreator544=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator544.getTree());

                    }
                    break;
                case 5 :
                    // Java.g:1385:9: '[' expression ']'
                    {
                    char_literal545=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_selector10025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal545);

                    pushFollow(FOLLOW_expression_in_selector10027);
                    expression546=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression546.getTree());
                    char_literal547=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_selector10029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal547);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1386:9: -> ^( ArrayAccess ( expression )+ )
                    {
                        // Java.g:1386:12: ^( ArrayAccess ( expression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArrayAccess, "ArrayAccess"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class creator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // Java.g:1389:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest -> ^( ClassCreator nonWildcardTypeArguments classOrInterfaceType classCreatorRest ) | 'new' classOrInterfaceType classCreatorRest -> ^( ClassCreator classOrInterfaceType classCreatorRest ) | arrayCreator -> ^( ArrayCreator arrayCreator ) );
    public final JavaParser.creator_return creator() throws RecognitionException {
        JavaParser.creator_return retval = new JavaParser.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal548=null;
        Token string_literal552=null;
        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments549 = null;

        JavaParser.classOrInterfaceType_return classOrInterfaceType550 = null;

        JavaParser.classCreatorRest_return classCreatorRest551 = null;

        JavaParser.classOrInterfaceType_return classOrInterfaceType553 = null;

        JavaParser.classCreatorRest_return classCreatorRest554 = null;

        JavaParser.arrayCreator_return arrayCreator555 = null;


        Object string_literal548_tree=null;
        Object string_literal552_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_classOrInterfaceType=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceType");
        RewriteRuleSubtreeStream stream_arrayCreator=new RewriteRuleSubtreeStream(adaptor,"rule arrayCreator");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // Java.g:1390:5: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest -> ^( ClassCreator nonWildcardTypeArguments classOrInterfaceType classCreatorRest ) | 'new' classOrInterfaceType classCreatorRest -> ^( ClassCreator classOrInterfaceType classCreatorRest ) | arrayCreator -> ^( ArrayCreator arrayCreator ) )
            int alt148=3;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==NEW) ) {
                int LA148_1 = input.LA(2);

                if ( (synpred236_Java()) ) {
                    alt148=1;
                }
                else if ( (synpred237_Java()) ) {
                    alt148=2;
                }
                else if ( (true) ) {
                    alt148=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 148, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // Java.g:1390:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
                    {
                    string_literal548=(Token)match(input,NEW,FOLLOW_NEW_in_creator10068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEW.add(string_literal548);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator10070);
                    nonWildcardTypeArguments549=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments549.getTree());
                    pushFollow(FOLLOW_classOrInterfaceType_in_creator10072);
                    classOrInterfaceType550=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classOrInterfaceType.add(classOrInterfaceType550.getTree());
                    pushFollow(FOLLOW_classCreatorRest_in_creator10074);
                    classCreatorRest551=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest551.getTree());


                    // AST REWRITE
                    // elements: classCreatorRest, nonWildcardTypeArguments, classOrInterfaceType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1391:9: -> ^( ClassCreator nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
                    {
                        // Java.g:1391:12: ^( ClassCreator nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ClassCreator, "ClassCreator"), root_1);

                        adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());
                        adaptor.addChild(root_1, stream_classOrInterfaceType.nextTree());
                        adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Java.g:1393:9: 'new' classOrInterfaceType classCreatorRest
                    {
                    string_literal552=(Token)match(input,NEW,FOLLOW_NEW_in_creator10116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEW.add(string_literal552);

                    pushFollow(FOLLOW_classOrInterfaceType_in_creator10118);
                    classOrInterfaceType553=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classOrInterfaceType.add(classOrInterfaceType553.getTree());
                    pushFollow(FOLLOW_classCreatorRest_in_creator10120);
                    classCreatorRest554=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest554.getTree());


                    // AST REWRITE
                    // elements: classCreatorRest, classOrInterfaceType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1394:9: -> ^( ClassCreator classOrInterfaceType classCreatorRest )
                    {
                        // Java.g:1394:12: ^( ClassCreator classOrInterfaceType classCreatorRest )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ClassCreator, "ClassCreator"), root_1);

                        adaptor.addChild(root_1, stream_classOrInterfaceType.nextTree());
                        adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // Java.g:1395:9: arrayCreator
                    {
                    pushFollow(FOLLOW_arrayCreator_in_creator10148);
                    arrayCreator555=arrayCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayCreator.add(arrayCreator555.getTree());


                    // AST REWRITE
                    // elements: arrayCreator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1396:9: -> ^( ArrayCreator arrayCreator )
                    {
                        // Java.g:1396:12: ^( ArrayCreator arrayCreator )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArrayCreator, "ArrayCreator"), root_1);

                        adaptor.addChild(root_1, stream_arrayCreator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class arrayCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreator"
    // Java.g:1399:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
    public final JavaParser.arrayCreator_return arrayCreator() throws RecognitionException {
        JavaParser.arrayCreator_return retval = new JavaParser.arrayCreator_return();
        retval.start = input.LT(1);
        int arrayCreator_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal556=null;
        Token char_literal558=null;
        Token char_literal559=null;
        Token char_literal560=null;
        Token char_literal561=null;
        Token string_literal563=null;
        Token char_literal565=null;
        Token char_literal567=null;
        Token char_literal568=null;
        Token char_literal570=null;
        Token char_literal571=null;
        Token char_literal572=null;
        JavaParser.createdName_return createdName557 = null;

        JavaParser.arrayInitializer_return arrayInitializer562 = null;

        JavaParser.createdName_return createdName564 = null;

        JavaParser.expression_return expression566 = null;

        JavaParser.expression_return expression569 = null;


        Object string_literal556_tree=null;
        Object char_literal558_tree=null;
        Object char_literal559_tree=null;
        Object char_literal560_tree=null;
        Object char_literal561_tree=null;
        Object string_literal563_tree=null;
        Object char_literal565_tree=null;
        Object char_literal567_tree=null;
        Object char_literal568_tree=null;
        Object char_literal570_tree=null;
        Object char_literal571_tree=null;
        Object char_literal572_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // Java.g:1400:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==NEW) ) {
                int LA152_1 = input.LA(2);

                if ( (synpred239_Java()) ) {
                    alt152=1;
                }
                else if ( (true) ) {
                    alt152=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 152, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // Java.g:1400:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal556=(Token)match(input,NEW,FOLLOW_NEW_in_arrayCreator10184); if (state.failed) return retval;
                    pushFollow(FOLLOW_createdName_in_arrayCreator10187);
                    createdName557=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName557.getTree());
                    char_literal558=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator10197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal558_tree = (Object)adaptor.create(char_literal558);
                    adaptor.addChild(root_0, char_literal558_tree);
                    }
                    char_literal559=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator10199); if (state.failed) return retval;
                    // Java.g:1402:9: ( '[' ']' )*
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==LBRACKET) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // Java.g:1402:10: '[' ']'
                    	    {
                    	    char_literal560=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator10211); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal560_tree = (Object)adaptor.create(char_literal560);
                    	    adaptor.addChild(root_0, char_literal560_tree);
                    	    }
                    	    char_literal561=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator10213); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreator10235);
                    arrayInitializer562=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer562.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1405:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal563=(Token)match(input,NEW,FOLLOW_NEW_in_arrayCreator10245); if (state.failed) return retval;
                    pushFollow(FOLLOW_createdName_in_arrayCreator10248);
                    createdName564=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName564.getTree());
                    char_literal565=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator10258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal565_tree = (Object)adaptor.create(char_literal565);
                    adaptor.addChild(root_0, char_literal565_tree);
                    }
                    pushFollow(FOLLOW_expression_in_arrayCreator10260);
                    expression566=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression566.getTree());
                    char_literal567=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator10270); if (state.failed) return retval;
                    // Java.g:1408:9: ( '[' expression ']' )*
                    loop150:
                    do {
                        int alt150=2;
                        alt150 = dfa150.predict(input);
                        switch (alt150) {
                    	case 1 :
                    	    // Java.g:1408:13: '[' expression ']'
                    	    {
                    	    char_literal568=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator10285); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal568_tree = (Object)adaptor.create(char_literal568);
                    	    adaptor.addChild(root_0, char_literal568_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreator10287);
                    	    expression569=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression569.getTree());
                    	    char_literal570=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator10301); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);

                    // Java.g:1411:9: ( '[' ']' )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==LBRACKET) ) {
                            int LA151_2 = input.LA(2);

                            if ( (LA151_2==RBRACKET) ) {
                                alt151=1;
                            }


                        }


                        switch (alt151) {
                    	case 1 :
                    	    // Java.g:1411:10: '[' ']'
                    	    {
                    	    char_literal571=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator10324); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal571_tree = (Object)adaptor.create(char_literal571);
                    	    adaptor.addChild(root_0, char_literal571_tree);
                    	    }
                    	    char_literal572=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator10326); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, arrayCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayCreator"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // Java.g:1415:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer573 = null;

        JavaParser.expression_return expression574 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // Java.g:1416:5: ( arrayInitializer | expression )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LBRACE) ) {
                alt153=1;
            }
            else if ( ((LA153_0>=IDENTIFIER && LA153_0<=NULL)||LA153_0==BOOLEAN||LA153_0==BYTE||LA153_0==CHAR||LA153_0==DOUBLE||LA153_0==FLOAT||LA153_0==INT||LA153_0==LONG||LA153_0==NEW||LA153_0==SHORT||LA153_0==SUPER||LA153_0==THIS||LA153_0==VOID||LA153_0==LPAREN||(LA153_0>=BANG && LA153_0<=TILDE)||(LA153_0>=PLUSPLUS && LA153_0<=SUB)) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // Java.g:1416:9: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer10358);
                    arrayInitializer573=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer573.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1417:9: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer10368);
                    expression574=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression574.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // Java.g:1420:1: arrayInitializer : arrayInitializer1 -> ^( ArrayInitializer arrayInitializer1 ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer1_return arrayInitializer1575 = null;


        RewriteRuleSubtreeStream stream_arrayInitializer1=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // Java.g:1421:5: ( arrayInitializer1 -> ^( ArrayInitializer arrayInitializer1 ) )
            // Java.g:1421:9: arrayInitializer1
            {
            pushFollow(FOLLOW_arrayInitializer1_in_arrayInitializer10387);
            arrayInitializer1575=arrayInitializer1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayInitializer1.add(arrayInitializer1575.getTree());


            // AST REWRITE
            // elements: arrayInitializer1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1422:9: -> ^( ArrayInitializer arrayInitializer1 )
            {
                // Java.g:1422:12: ^( ArrayInitializer arrayInitializer1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ArrayInitializer, "ArrayInitializer"), root_1);

                adaptor.addChild(root_1, stream_arrayInitializer1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class arrayInitializer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer1"
    // Java.g:1425:1: arrayInitializer1 : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' ;
    public final JavaParser.arrayInitializer1_return arrayInitializer1() throws RecognitionException {
        JavaParser.arrayInitializer1_return retval = new JavaParser.arrayInitializer1_return();
        retval.start = input.LT(1);
        int arrayInitializer1_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal576=null;
        Token char_literal578=null;
        Token char_literal580=null;
        Token char_literal581=null;
        JavaParser.variableInitializer_return variableInitializer577 = null;

        JavaParser.variableInitializer_return variableInitializer579 = null;


        Object char_literal576_tree=null;
        Object char_literal578_tree=null;
        Object char_literal580_tree=null;
        Object char_literal581_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // Java.g:1426:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' )
            // Java.g:1426:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal576=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_arrayInitializer110422); if (state.failed) return retval;
            // Java.g:1427:13: ( variableInitializer ( ',' variableInitializer )* )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( ((LA155_0>=IDENTIFIER && LA155_0<=NULL)||LA155_0==BOOLEAN||LA155_0==BYTE||LA155_0==CHAR||LA155_0==DOUBLE||LA155_0==FLOAT||LA155_0==INT||LA155_0==LONG||LA155_0==NEW||LA155_0==SHORT||LA155_0==SUPER||LA155_0==THIS||LA155_0==VOID||LA155_0==LPAREN||LA155_0==LBRACE||(LA155_0>=BANG && LA155_0<=TILDE)||(LA155_0>=PLUSPLUS && LA155_0<=SUB)) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // Java.g:1427:14: variableInitializer ( ',' variableInitializer )*
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer110438);
                    variableInitializer577=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer577.getTree());
                    // Java.g:1428:17: ( ',' variableInitializer )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==COMMA) ) {
                            int LA154_1 = input.LA(2);

                            if ( ((LA154_1>=IDENTIFIER && LA154_1<=NULL)||LA154_1==BOOLEAN||LA154_1==BYTE||LA154_1==CHAR||LA154_1==DOUBLE||LA154_1==FLOAT||LA154_1==INT||LA154_1==LONG||LA154_1==NEW||LA154_1==SHORT||LA154_1==SUPER||LA154_1==THIS||LA154_1==VOID||LA154_1==LPAREN||LA154_1==LBRACE||(LA154_1>=BANG && LA154_1<=TILDE)||(LA154_1>=PLUSPLUS && LA154_1<=SUB)) ) {
                                alt154=1;
                            }


                        }


                        switch (alt154) {
                    	case 1 :
                    	    // Java.g:1428:18: ',' variableInitializer
                    	    {
                    	    char_literal578=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer110457); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer110460);
                    	    variableInitializer579=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableInitializer579.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    }
                    break;

            }

            // Java.g:1431:13: ( ',' )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==COMMA) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // Java.g:1431:14: ','
                    {
                    char_literal580=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer110510); if (state.failed) return retval;

                    }
                    break;

            }

            char_literal581=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_arrayInitializer110524); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, arrayInitializer1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer1"

    public static class createdName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // Java.g:1436:1: createdName : ( classOrInterfaceType | primitiveType );
    public final JavaParser.createdName_return createdName() throws RecognitionException {
        JavaParser.createdName_return retval = new JavaParser.createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.classOrInterfaceType_return classOrInterfaceType582 = null;

        JavaParser.primitiveType_return primitiveType583 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // Java.g:1437:5: ( classOrInterfaceType | primitiveType )
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==IDENTIFIER) ) {
                alt157=1;
            }
            else if ( (LA157_0==BOOLEAN||LA157_0==BYTE||LA157_0==CHAR||LA157_0==DOUBLE||LA157_0==FLOAT||LA157_0==INT||LA157_0==LONG||LA157_0==SHORT) ) {
                alt157=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    // Java.g:1437:9: classOrInterfaceType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName10558);
                    classOrInterfaceType582=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceType582.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1438:9: primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName10568);
                    primitiveType583=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType583.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // Java.g:1441:1: innerCreator : '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest -> ^( InnerCreator ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ) ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal584=null;
        Token string_literal585=null;
        Token IDENTIFIER587=null;
        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments586 = null;

        JavaParser.typeArguments_return typeArguments588 = null;

        JavaParser.classCreatorRest_return classCreatorRest589 = null;


        Object char_literal584_tree=null;
        Object string_literal585_tree=null;
        Object IDENTIFIER587_tree=null;
        RewriteRuleTokenStream stream_NEW=new RewriteRuleTokenStream(adaptor,"token NEW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // Java.g:1442:5: ( '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest -> ^( InnerCreator ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ) )
            // Java.g:1442:9: '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest
            {
            char_literal584=(Token)match(input,DOT,FOLLOW_DOT_in_innerCreator10589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(char_literal584);

            string_literal585=(Token)match(input,NEW,FOLLOW_NEW_in_innerCreator10591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NEW.add(string_literal585);

            // Java.g:1443:9: ( nonWildcardTypeArguments )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==LT) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // Java.g:1443:10: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator10602);
                    nonWildcardTypeArguments586=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments586.getTree());

                    }
                    break;

            }

            IDENTIFIER587=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_innerCreator10623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER587);

            // Java.g:1446:9: ( typeArguments )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==LT) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // Java.g:1446:10: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_innerCreator10634);
                    typeArguments588=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments588.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator10655);
            classCreatorRest589=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest589.getTree());


            // AST REWRITE
            // elements: classCreatorRest, typeArguments, IDENTIFIER, nonWildcardTypeArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1449:9: -> ^( InnerCreator ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
            {
                // Java.g:1449:12: ^( InnerCreator ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(InnerCreator, "InnerCreator"), root_1);

                // Java.g:1449:27: ( nonWildcardTypeArguments )?
                if ( stream_nonWildcardTypeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());

                }
                stream_nonWildcardTypeArguments.reset();
                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // Java.g:1450:13: ( typeArguments )?
                if ( stream_typeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArguments.nextTree());

                }
                stream_typeArguments.reset();
                adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // Java.g:1454:1: classCreatorRest : arguments ( classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arguments_return arguments590 = null;

        JavaParser.classBody_return classBody591 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // Java.g:1455:5: ( arguments ( classBody )? )
            // Java.g:1455:9: arguments ( classBody )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest10716);
            arguments590=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments590.getTree());
            // Java.g:1456:9: ( classBody )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==LBRACE) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // Java.g:1456:10: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest10727);
                    classBody591=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody591.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // Java.g:1461:1: nonWildcardTypeArguments : '<' typeList '>' -> ^( TypeList typeList ) ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal592=null;
        Token char_literal594=null;
        JavaParser.typeList_return typeList593 = null;


        Object char_literal592_tree=null;
        Object char_literal594_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // Java.g:1462:5: ( '<' typeList '>' -> ^( TypeList typeList ) )
            // Java.g:1462:9: '<' typeList '>'
            {
            char_literal592=(Token)match(input,LT,FOLLOW_LT_in_nonWildcardTypeArguments10759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(char_literal592);

            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments10761);
            typeList593=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList593.getTree());
            char_literal594=(Token)match(input,GT,FOLLOW_GT_in_nonWildcardTypeArguments10771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GT.add(char_literal594);



            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1464:9: -> ^( TypeList typeList )
            {
                // Java.g:1464:12: ^( TypeList typeList )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TypeList, "TypeList"), root_1);

                adaptor.addChild(root_1, stream_typeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // Java.g:1467:1: arguments : '(' ( expressionList )? ')' -> ^( Arguments ( expressionList )? ) ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal595=null;
        Token char_literal597=null;
        JavaParser.expressionList_return expressionList596 = null;


        Object char_literal595_tree=null;
        Object char_literal597_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // Java.g:1468:5: ( '(' ( expressionList )? ')' -> ^( Arguments ( expressionList )? ) )
            // Java.g:1468:9: '(' ( expressionList )? ')'
            {
            char_literal595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments10807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal595);

            // Java.g:1468:13: ( expressionList )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( ((LA161_0>=IDENTIFIER && LA161_0<=NULL)||LA161_0==BOOLEAN||LA161_0==BYTE||LA161_0==CHAR||LA161_0==DOUBLE||LA161_0==FLOAT||LA161_0==INT||LA161_0==LONG||LA161_0==NEW||LA161_0==SHORT||LA161_0==SUPER||LA161_0==THIS||LA161_0==VOID||LA161_0==LPAREN||(LA161_0>=BANG && LA161_0<=TILDE)||(LA161_0>=PLUSPLUS && LA161_0<=SUB)) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // Java.g:1468:14: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments10810);
                    expressionList596=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(expressionList596.getTree());

                    }
                    break;

            }

            char_literal597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments10823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal597);



            // AST REWRITE
            // elements: expressionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1470:9: -> ^( Arguments ( expressionList )? )
            {
                // Java.g:1470:12: ^( Arguments ( expressionList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Arguments, "Arguments"), root_1);

                // Java.g:1470:24: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // Java.g:1473:1: literal : ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token set598=null;

        Object set598_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // Java.g:1474:5: ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL )
            // Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set598=(Token)input.LT(1);
            if ( (input.LA(1)>=INTLITERAL && input.LA(1)<=NULL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set598));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class classHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classHeader"
    // Java.g:1485:1: classHeader : modifiers 'class' IDENTIFIER ;
    public final JavaParser.classHeader_return classHeader() throws RecognitionException {
        JavaParser.classHeader_return retval = new JavaParser.classHeader_return();
        retval.start = input.LT(1);
        int classHeader_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal600=null;
        Token IDENTIFIER601=null;
        JavaParser.modifiers_return modifiers599 = null;


        Object string_literal600_tree=null;
        Object IDENTIFIER601_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // Java.g:1490:5: ( modifiers 'class' IDENTIFIER )
            // Java.g:1490:9: modifiers 'class' IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_classHeader10966);
            modifiers599=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers599.getTree());
            string_literal600=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHeader10968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            IDENTIFIER601=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_classHeader10970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER601_tree = (Object)adaptor.create(IDENTIFIER601);
            adaptor.addChild(root_0, IDENTIFIER601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, classHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classHeader"

    public static class enumHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumHeader"
    // Java.g:1493:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
    public final JavaParser.enumHeader_return enumHeader() throws RecognitionException {
        JavaParser.enumHeader_return retval = new JavaParser.enumHeader_return();
        retval.start = input.LT(1);
        int enumHeader_StartIndex = input.index();
        Object root_0 = null;

        Token set603=null;
        Token IDENTIFIER604=null;
        JavaParser.modifiers_return modifiers602 = null;


        Object set603_tree=null;
        Object IDENTIFIER604_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // Java.g:1494:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
            // Java.g:1494:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_enumHeader10990);
            modifiers602=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers602.getTree());
            set603=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==ENUM ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set603));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            IDENTIFIER604=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumHeader10998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER604_tree = (Object)adaptor.create(IDENTIFIER604);
            adaptor.addChild(root_0, IDENTIFIER604_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, enumHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumHeader"

    public static class interfaceHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceHeader"
    // Java.g:1497:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
    public final JavaParser.interfaceHeader_return interfaceHeader() throws RecognitionException {
        JavaParser.interfaceHeader_return retval = new JavaParser.interfaceHeader_return();
        retval.start = input.LT(1);
        int interfaceHeader_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal606=null;
        Token IDENTIFIER607=null;
        JavaParser.modifiers_return modifiers605 = null;


        Object string_literal606_tree=null;
        Object IDENTIFIER607_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // Java.g:1498:5: ( modifiers 'interface' IDENTIFIER )
            // Java.g:1498:9: modifiers 'interface' IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_interfaceHeader11018);
            modifiers605=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers605.getTree());
            string_literal606=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceHeader11020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            IDENTIFIER607=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interfaceHeader11022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER607_tree = (Object)adaptor.create(IDENTIFIER607);
            adaptor.addChild(root_0, IDENTIFIER607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, interfaceHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceHeader"

    public static class annotationHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationHeader"
    // Java.g:1501:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
    public final JavaParser.annotationHeader_return annotationHeader() throws RecognitionException {
        JavaParser.annotationHeader_return retval = new JavaParser.annotationHeader_return();
        retval.start = input.LT(1);
        int annotationHeader_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal609=null;
        Token string_literal610=null;
        Token IDENTIFIER611=null;
        JavaParser.modifiers_return modifiers608 = null;


        Object char_literal609_tree=null;
        Object string_literal610_tree=null;
        Object IDENTIFIER611_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // Java.g:1502:5: ( modifiers '@' 'interface' IDENTIFIER )
            // Java.g:1502:9: modifiers '@' 'interface' IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_annotationHeader11042);
            modifiers608=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers608.getTree());
            char_literal609=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_annotationHeader11044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal609_tree = (Object)adaptor.create(char_literal609);
            adaptor.addChild(root_0, char_literal609_tree);
            }
            string_literal610=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationHeader11046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            IDENTIFIER611=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_annotationHeader11048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER611_tree = (Object)adaptor.create(IDENTIFIER611);
            adaptor.addChild(root_0, IDENTIFIER611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, annotationHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationHeader"

    public static class typeHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeHeader"
    // Java.g:1505:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
    public final JavaParser.typeHeader_return typeHeader() throws RecognitionException {
        JavaParser.typeHeader_return retval = new JavaParser.typeHeader_return();
        retval.start = input.LT(1);
        int typeHeader_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal613=null;
        Token string_literal614=null;
        Token char_literal615=null;
        Token string_literal616=null;
        Token IDENTIFIER617=null;
        JavaParser.modifiers_return modifiers612 = null;


        Object string_literal613_tree=null;
        Object string_literal614_tree=null;
        Object char_literal615_tree=null;
        Object string_literal616_tree=null;
        Object IDENTIFIER617_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // Java.g:1506:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
            // Java.g:1506:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_typeHeader11068);
            modifiers612=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers612.getTree());
            // Java.g:1506:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
            int alt163=3;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt163=1;
                }
                break;
            case ENUM:
                {
                alt163=2;
                }
                break;
            case INTERFACE:
            case MONKEYS_AT:
                {
                alt163=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // Java.g:1506:20: 'class'
                    {
                    string_literal613=(Token)match(input,CLASS,FOLLOW_CLASS_in_typeHeader11071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal613_tree = (Object)adaptor.create(string_literal613);
                    adaptor.addChild(root_0, string_literal613_tree);
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1506:28: 'enum'
                    {
                    string_literal614=(Token)match(input,ENUM,FOLLOW_ENUM_in_typeHeader11073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal614_tree = (Object)adaptor.create(string_literal614);
                    adaptor.addChild(root_0, string_literal614_tree);
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1506:35: ( ( '@' )? 'interface' )
                    {
                    // Java.g:1506:35: ( ( '@' )? 'interface' )
                    // Java.g:1506:36: ( '@' )? 'interface'
                    {
                    // Java.g:1506:36: ( '@' )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==MONKEYS_AT) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // Java.g:0:0: '@'
                            {
                            char_literal615=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_typeHeader11076); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal615_tree = (Object)adaptor.create(char_literal615);
                            adaptor.addChild(root_0, char_literal615_tree);
                            }

                            }
                            break;

                    }

                    string_literal616=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_typeHeader11080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal616_tree = (Object)adaptor.create(string_literal616);
                    adaptor.addChild(root_0, string_literal616_tree);
                    }

                    }


                    }
                    break;

            }

            IDENTIFIER617=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_typeHeader11084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER617_tree = (Object)adaptor.create(IDENTIFIER617);
            adaptor.addChild(root_0, IDENTIFIER617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, typeHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeHeader"

    public static class methodHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodHeader"
    // Java.g:1509:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
    public final JavaParser.methodHeader_return methodHeader() throws RecognitionException {
        JavaParser.methodHeader_return retval = new JavaParser.methodHeader_return();
        retval.start = input.LT(1);
        int methodHeader_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal621=null;
        Token IDENTIFIER622=null;
        Token char_literal623=null;
        JavaParser.modifiers_return modifiers618 = null;

        JavaParser.typeParameters_return typeParameters619 = null;

        JavaParser.type_return type620 = null;


        Object string_literal621_tree=null;
        Object IDENTIFIER622_tree=null;
        Object char_literal623_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // Java.g:1510:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
            // Java.g:1510:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_methodHeader11104);
            modifiers618=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers618.getTree());
            // Java.g:1510:19: ( typeParameters )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==LT) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // Java.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_methodHeader11106);
                    typeParameters619=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters619.getTree());

                    }
                    break;

            }

            // Java.g:1510:35: ( type | 'void' )?
            int alt165=3;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                    {
                    int LA165_1 = input.LA(2);

                    if ( (LA165_1==IDENTIFIER||LA165_1==LBRACKET||LA165_1==DOT||LA165_1==LT) ) {
                        alt165=1;
                    }
                    }
                    break;
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    {
                    alt165=1;
                    }
                    break;
                case VOID:
                    {
                    alt165=2;
                    }
                    break;
            }

            switch (alt165) {
                case 1 :
                    // Java.g:1510:36: type
                    {
                    pushFollow(FOLLOW_type_in_methodHeader11110);
                    type620=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type620.getTree());

                    }
                    break;
                case 2 :
                    // Java.g:1510:41: 'void'
                    {
                    string_literal621=(Token)match(input,VOID,FOLLOW_VOID_in_methodHeader11112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal621_tree = (Object)adaptor.create(string_literal621);
                    adaptor.addChild(root_0, string_literal621_tree);
                    }

                    }
                    break;

            }

            IDENTIFIER622=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodHeader11116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER622_tree = (Object)adaptor.create(IDENTIFIER622);
            adaptor.addChild(root_0, IDENTIFIER622_tree);
            }
            char_literal623=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodHeader11118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal623_tree = (Object)adaptor.create(char_literal623);
            adaptor.addChild(root_0, char_literal623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, methodHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodHeader"

    public static class fieldHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldHeader"
    // Java.g:1513:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
    public final JavaParser.fieldHeader_return fieldHeader() throws RecognitionException {
        JavaParser.fieldHeader_return retval = new JavaParser.fieldHeader_return();
        retval.start = input.LT(1);
        int fieldHeader_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER626=null;
        Token char_literal627=null;
        Token char_literal628=null;
        Token set629=null;
        JavaParser.modifiers_return modifiers624 = null;

        JavaParser.type_return type625 = null;


        Object IDENTIFIER626_tree=null;
        Object char_literal627_tree=null;
        Object char_literal628_tree=null;
        Object set629_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // Java.g:1514:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
            // Java.g:1514:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_fieldHeader11138);
            modifiers624=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers624.getTree());
            pushFollow(FOLLOW_type_in_fieldHeader11140);
            type625=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type625.getTree());
            IDENTIFIER626=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fieldHeader11142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER626_tree = (Object)adaptor.create(IDENTIFIER626);
            adaptor.addChild(root_0, IDENTIFIER626_tree);
            }
            // Java.g:1514:35: ( '[' ']' )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==LBRACKET) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // Java.g:1514:36: '[' ']'
            	    {
            	    char_literal627=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_fieldHeader11145); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal627_tree = (Object)adaptor.create(char_literal627);
            	    adaptor.addChild(root_0, char_literal627_tree);
            	    }
            	    char_literal628=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_fieldHeader11146); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal628_tree = (Object)adaptor.create(char_literal628);
            	    adaptor.addChild(root_0, char_literal628_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);

            set629=(Token)input.LT(1);
            if ( (input.LA(1)>=SEMI && input.LA(1)<=COMMA)||input.LA(1)==EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set629));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, fieldHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldHeader"

    public static class localVariableHeader_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableHeader"
    // Java.g:1517:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
    public final JavaParser.localVariableHeader_return localVariableHeader() throws RecognitionException {
        JavaParser.localVariableHeader_return retval = new JavaParser.localVariableHeader_return();
        retval.start = input.LT(1);
        int localVariableHeader_StartIndex = input.index();
        Object root_0 = null;

        Token IDENTIFIER632=null;
        Token char_literal633=null;
        Token char_literal634=null;
        Token set635=null;
        JavaParser.variableModifiers_return variableModifiers630 = null;

        JavaParser.type_return type631 = null;


        Object IDENTIFIER632_tree=null;
        Object char_literal633_tree=null;
        Object char_literal634_tree=null;
        Object set635_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // Java.g:1518:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
            // Java.g:1518:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_localVariableHeader11176);
            variableModifiers630=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifiers630.getTree());
            pushFollow(FOLLOW_type_in_localVariableHeader11178);
            type631=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type631.getTree());
            IDENTIFIER632=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_localVariableHeader11180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER632_tree = (Object)adaptor.create(IDENTIFIER632);
            adaptor.addChild(root_0, IDENTIFIER632_tree);
            }
            // Java.g:1518:43: ( '[' ']' )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==LBRACKET) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // Java.g:1518:44: '[' ']'
            	    {
            	    char_literal633=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_localVariableHeader11183); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal633_tree = (Object)adaptor.create(char_literal633);
            	    adaptor.addChild(root_0, char_literal633_tree);
            	    }
            	    char_literal634=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_localVariableHeader11184); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal634_tree = (Object)adaptor.create(char_literal634);
            	    adaptor.addChild(root_0, char_literal634_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);

            set635=(Token)input.LT(1);
            if ( (input.LA(1)>=SEMI && input.LA(1)<=COMMA)||input.LA(1)==EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set635));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, localVariableHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableHeader"

    // $ANTLR start synpred2_Java
    public final void synpred2_Java_fragment() throws RecognitionException {   
        // Java.g:371:13: ( ( annotations )? packageDeclaration )
        // Java.g:371:13: ( annotations )? packageDeclaration
        {
        // Java.g:371:13: ( annotations )?
        int alt168=2;
        int LA168_0 = input.LA(1);

        if ( (LA168_0==MONKEYS_AT) ) {
            alt168=1;
        }
        switch (alt168) {
            case 1 :
                // Java.g:371:14: annotations
                {
                pushFollow(FOLLOW_annotations_in_synpred2_Java586);
                annotations();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_packageDeclaration_in_synpred2_Java615);
        packageDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Java

    // $ANTLR start synpred12_Java
    public final void synpred12_Java_fragment() throws RecognitionException {   
        // Java.g:421:10: ( classDeclaration )
        // Java.g:421:10: classDeclaration
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred12_Java1049);
        classDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_Java

    // $ANTLR start synpred13_Java
    public final void synpred13_Java_fragment() throws RecognitionException {   
        // Java.g:427:10: ( modifiers1 )
        // Java.g:427:10: modifiers1
        {
        pushFollow(FOLLOW_modifiers1_in_synpred13_Java1086);
        modifiers1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Java

    // $ANTLR start synpred28_Java
    public final void synpred28_Java_fragment() throws RecognitionException {   
        // Java.g:457:9: ( normalClassDeclaration )
        // Java.g:457:9: normalClassDeclaration
        {
        pushFollow(FOLLOW_normalClassDeclaration_in_synpred28_Java1325);
        normalClassDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_Java

    // $ANTLR start synpred44_Java
    public final void synpred44_Java_fragment() throws RecognitionException {   
        // Java.g:556:9: ( normalInterfaceDeclaration )
        // Java.g:556:9: normalInterfaceDeclaration
        {
        pushFollow(FOLLOW_normalInterfaceDeclaration_in_synpred44_Java2225);
        normalInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_Java

    // $ANTLR start synpred53_Java
    public final void synpred53_Java_fragment() throws RecognitionException {   
        // Java.g:605:10: ( fieldDeclaration )
        // Java.g:605:10: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred53_Java2681);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_Java

    // $ANTLR start synpred54_Java
    public final void synpred54_Java_fragment() throws RecognitionException {   
        // Java.g:606:10: ( methodDeclaration )
        // Java.g:606:10: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred54_Java2692);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_Java

    // $ANTLR start synpred55_Java
    public final void synpred55_Java_fragment() throws RecognitionException {   
        // Java.g:607:10: ( classDeclaration )
        // Java.g:607:10: classDeclaration
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred55_Java2703);
        classDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_Java

    // $ANTLR start synpred58_Java
    public final void synpred58_Java_fragment() throws RecognitionException {   
        // Java.g:623:10: ( explicitConstructorInvocation )
        // Java.g:623:10: explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred58_Java2840);
        explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_Java

    // $ANTLR start synpred60_Java
    public final void synpred60_Java_fragment() throws RecognitionException {   
        // Java.g:615:10: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
        // Java.g:615:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
        {
        pushFollow(FOLLOW_modifiers_in_synpred60_Java2752);
        modifiers();

        state._fsp--;
        if (state.failed) return ;
        // Java.g:616:9: ( typeParameters )?
        int alt171=2;
        int LA171_0 = input.LA(1);

        if ( (LA171_0==LT) ) {
            alt171=1;
        }
        switch (alt171) {
            case 1 :
                // Java.g:616:10: typeParameters
                {
                pushFollow(FOLLOW_typeParameters_in_synpred60_Java2763);
                typeParameters();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred60_Java2784); if (state.failed) return ;
        pushFollow(FOLLOW_formalParameters_in_synpred60_Java2794);
        formalParameters();

        state._fsp--;
        if (state.failed) return ;
        // Java.g:620:9: ( 'throws' qualifiedNameList )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==THROWS) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // Java.g:620:10: 'throws' qualifiedNameList
                {
                match(input,THROWS,FOLLOW_THROWS_in_synpred60_Java2805); if (state.failed) return ;
                pushFollow(FOLLOW_qualifiedNameList_in_synpred60_Java2807);
                qualifiedNameList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,LBRACE,FOLLOW_LBRACE_in_synpred60_Java2828); if (state.failed) return ;
        // Java.g:623:9: ( explicitConstructorInvocation )?
        int alt173=2;
        alt173 = dfa173.predict(input);
        switch (alt173) {
            case 1 :
                // Java.g:623:10: explicitConstructorInvocation
                {
                pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred60_Java2840);
                explicitConstructorInvocation();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // Java.g:625:9: ( blockStatement )*
        loop174:
        do {
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==EOF||(LA174_0>=IDENTIFIER && LA174_0<=NULL)||(LA174_0>=ABSTRACT && LA174_0<=BYTE)||(LA174_0>=CHAR && LA174_0<=CLASS)||LA174_0==CONTINUE||(LA174_0>=DO && LA174_0<=DOUBLE)||LA174_0==ENUM||LA174_0==FINAL||(LA174_0>=FLOAT && LA174_0<=FOR)||LA174_0==IF||(LA174_0>=INT && LA174_0<=NEW)||(LA174_0>=PRIVATE && LA174_0<=THROW)||(LA174_0>=TRANSIENT && LA174_0<=LPAREN)||LA174_0==LBRACE||LA174_0==SEMI||(LA174_0>=BANG && LA174_0<=TILDE)||(LA174_0>=PLUSPLUS && LA174_0<=SUB)||LA174_0==MONKEYS_AT||LA174_0==LT) ) {
                alt174=1;
            }


            switch (alt174) {
        	case 1 :
        	    // Java.g:625:10: blockStatement
        	    {
        	    pushFollow(FOLLOW_blockStatement_in_synpred60_Java2862);
        	    blockStatement();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop174;
            }
        } while (true);

        match(input,RBRACE,FOLLOW_RBRACE_in_synpred60_Java2883); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_Java

    // $ANTLR start synpred69_Java
    public final void synpred69_Java_fragment() throws RecognitionException {   
        // Java.g:680:9: ( interfaceFieldDeclaration )
        // Java.g:680:9: interfaceFieldDeclaration
        {
        pushFollow(FOLLOW_interfaceFieldDeclaration_in_synpred69_Java3450);
        interfaceFieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_Java

    // $ANTLR start synpred70_Java
    public final void synpred70_Java_fragment() throws RecognitionException {   
        // Java.g:681:9: ( interfaceMethodDeclaration )
        // Java.g:681:9: interfaceMethodDeclaration
        {
        pushFollow(FOLLOW_interfaceMethodDeclaration_in_synpred70_Java3460);
        interfaceMethodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_Java

    // $ANTLR start synpred71_Java
    public final void synpred71_Java_fragment() throws RecognitionException {   
        // Java.g:682:9: ( interfaceDeclaration )
        // Java.g:682:9: interfaceDeclaration
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred71_Java3470);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_Java

    // $ANTLR start synpred72_Java
    public final void synpred72_Java_fragment() throws RecognitionException {   
        // Java.g:683:9: ( classDeclaration )
        // Java.g:683:9: classDeclaration
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred72_Java3480);
        classDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_Java

    // $ANTLR start synpred97_Java
    public final void synpred97_Java_fragment() throws RecognitionException {   
        // Java.g:795:9: ( ellipsisParameterDecl )
        // Java.g:795:9: ellipsisParameterDecl
        {
        pushFollow(FOLLOW_ellipsisParameterDecl_in_synpred97_Java4472);
        ellipsisParameterDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_Java

    // $ANTLR start synpred99_Java
    public final void synpred99_Java_fragment() throws RecognitionException {   
        // Java.g:796:9: ( normalParameterDecl ( ',' normalParameterDecl )* )
        // Java.g:796:9: normalParameterDecl ( ',' normalParameterDecl )*
        {
        pushFollow(FOLLOW_normalParameterDecl_in_synpred99_Java4482);
        normalParameterDecl();

        state._fsp--;
        if (state.failed) return ;
        // Java.g:797:9: ( ',' normalParameterDecl )*
        loop177:
        do {
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==COMMA) ) {
                alt177=1;
            }


            switch (alt177) {
        	case 1 :
        	    // Java.g:797:10: ',' normalParameterDecl
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred99_Java4493); if (state.failed) return ;
        	    pushFollow(FOLLOW_normalParameterDecl_in_synpred99_Java4496);
        	    normalParameterDecl();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop177;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred99_Java

    // $ANTLR start synpred100_Java
    public final void synpred100_Java_fragment() throws RecognitionException {   
        // Java.g:799:10: ( normalParameterDecl ',' )
        // Java.g:799:10: normalParameterDecl ','
        {
        pushFollow(FOLLOW_normalParameterDecl_in_synpred100_Java4518);
        normalParameterDecl();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred100_Java4528); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_Java

    // $ANTLR start synpred103_Java
    public final void synpred103_Java_fragment() throws RecognitionException {   
        // Java.g:821:9: ( ( nonWildcardTypeArguments )? thisOrSuper arguments ';' )
        // Java.g:821:9: ( nonWildcardTypeArguments )? thisOrSuper arguments ';'
        {
        // Java.g:821:9: ( nonWildcardTypeArguments )?
        int alt178=2;
        int LA178_0 = input.LA(1);

        if ( (LA178_0==LT) ) {
            alt178=1;
        }
        switch (alt178) {
            case 1 :
                // Java.g:821:10: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred103_Java4717);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_thisOrSuper_in_synpred103_Java4743);
        thisOrSuper();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_arguments_in_synpred103_Java4753);
        arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred103_Java4755); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_Java

    // $ANTLR start synpred118_Java
    public final void synpred118_Java_fragment() throws RecognitionException {   
        // Java.g:923:9: ( annotationMethodDeclaration )
        // Java.g:923:9: annotationMethodDeclaration
        {
        pushFollow(FOLLOW_annotationMethodDeclaration_in_synpred118_Java5557);
        annotationMethodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_Java

    // $ANTLR start synpred119_Java
    public final void synpred119_Java_fragment() throws RecognitionException {   
        // Java.g:924:9: ( interfaceFieldDeclaration )
        // Java.g:924:9: interfaceFieldDeclaration
        {
        pushFollow(FOLLOW_interfaceFieldDeclaration_in_synpred119_Java5567);
        interfaceFieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_Java

    // $ANTLR start synpred120_Java
    public final void synpred120_Java_fragment() throws RecognitionException {   
        // Java.g:925:9: ( normalClassDeclaration )
        // Java.g:925:9: normalClassDeclaration
        {
        pushFollow(FOLLOW_normalClassDeclaration_in_synpred120_Java5577);
        normalClassDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_Java

    // $ANTLR start synpred121_Java
    public final void synpred121_Java_fragment() throws RecognitionException {   
        // Java.g:926:9: ( normalInterfaceDeclaration )
        // Java.g:926:9: normalInterfaceDeclaration
        {
        pushFollow(FOLLOW_normalInterfaceDeclaration_in_synpred121_Java5587);
        normalInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_Java

    // $ANTLR start synpred122_Java
    public final void synpred122_Java_fragment() throws RecognitionException {   
        // Java.g:927:9: ( enumDeclaration )
        // Java.g:927:9: enumDeclaration
        {
        pushFollow(FOLLOW_enumDeclaration_in_synpred122_Java5597);
        enumDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_Java

    // $ANTLR start synpred123_Java
    public final void synpred123_Java_fragment() throws RecognitionException {   
        // Java.g:928:9: ( annotationTypeDeclaration )
        // Java.g:928:9: annotationTypeDeclaration
        {
        pushFollow(FOLLOW_annotationTypeDeclaration_in_synpred123_Java5607);
        annotationTypeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_Java

    // $ANTLR start synpred126_Java
    public final void synpred126_Java_fragment() throws RecognitionException {   
        // Java.g:974:9: ( localVariableDeclarationStatement )
        // Java.g:974:9: localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred126_Java5821);
        localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_Java

    // $ANTLR start synpred127_Java
    public final void synpred127_Java_fragment() throws RecognitionException {   
        // Java.g:975:9: ( classOrInterfaceDeclaration )
        // Java.g:975:9: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred127_Java5831);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_Java

    // $ANTLR start synpred132_Java
    public final void synpred132_Java_fragment() throws RecognitionException {   
        // Java.g:1004:39: ( 'else' statement )
        // Java.g:1004:39: 'else' statement
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred132_Java6098); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred132_Java6100);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_Java

    // $ANTLR start synpred152_Java
    public final void synpred152_Java_fragment() throws RecognitionException {   
        // Java.g:1056:13: ( catches 'finally' block )
        // Java.g:1056:13: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred152_Java6724);
        catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,FINALLY,FOLLOW_FINALLY_in_synpred152_Java6726); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred152_Java6728);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_Java

    // $ANTLR start synpred153_Java
    public final void synpred153_Java_fragment() throws RecognitionException {   
        // Java.g:1057:13: ( catches )
        // Java.g:1057:13: catches
        {
        pushFollow(FOLLOW_catches_in_synpred153_Java6742);
        catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_Java

    // $ANTLR start synpred156_Java
    public final void synpred156_Java_fragment() throws RecognitionException {   
        // Java.g:1084:9: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement )
        // Java.g:1084:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
        {
        match(input,FOR,FOLLOW_FOR_in_synpred156_Java6980); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred156_Java6982); if (state.failed) return ;
        pushFollow(FOLLOW_variableModifiers_in_synpred156_Java6984);
        variableModifiers();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred156_Java6986);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred156_Java6988); if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred156_Java6990); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred156_Java7001);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred156_Java7003); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred156_Java7005);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_Java

    // $ANTLR start synpred160_Java
    public final void synpred160_Java_fragment() throws RecognitionException {   
        // Java.g:1108:9: ( localVariableDeclaration )
        // Java.g:1108:9: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred160_Java7370);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_Java

    // $ANTLR start synpred201_Java
    public final void synpred201_Java_fragment() throws RecognitionException {   
        // Java.g:1297:9: ( castExpression )
        // Java.g:1297:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred201_Java9082);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_Java

    // $ANTLR start synpred205_Java
    public final void synpred205_Java_fragment() throws RecognitionException {   
        // Java.g:1310:9: ( '(' primitiveType ')' unaryExpression )
        // Java.g:1310:9: '(' primitiveType ')' unaryExpression
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred205_Java9196); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred205_Java9198);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred205_Java9200); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred205_Java9202);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_Java

    // $ANTLR start synpred207_Java
    public final void synpred207_Java_fragment() throws RecognitionException {   
        // Java.g:1322:10: ( '.' IDENTIFIER )
        // Java.g:1322:10: '.' IDENTIFIER
        {
        match(input,DOT,FOLLOW_DOT_in_synpred207_Java9309); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred207_Java9311); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_Java

    // $ANTLR start synpred208_Java
    public final void synpred208_Java_fragment() throws RecognitionException {   
        // Java.g:1324:10: ( identifierSuffix )
        // Java.g:1324:10: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred208_Java9333);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_Java

    // $ANTLR start synpred210_Java
    public final void synpred210_Java_fragment() throws RecognitionException {   
        // Java.g:1328:10: ( '.' IDENTIFIER )
        // Java.g:1328:10: '.' IDENTIFIER
        {
        match(input,DOT,FOLLOW_DOT_in_synpred210_Java9389); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred210_Java9391); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_Java

    // $ANTLR start synpred211_Java
    public final void synpred211_Java_fragment() throws RecognitionException {   
        // Java.g:1330:10: ( identifierSuffix )
        // Java.g:1330:10: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred211_Java9413);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_Java

    // $ANTLR start synpred223_Java
    public final void synpred223_Java_fragment() throws RecognitionException {   
        // Java.g:1364:10: ( '[' expression ']' )
        // Java.g:1364:10: '[' expression ']'
        {
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred223_Java9786); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred223_Java9788);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred223_Java9790); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_Java

    // $ANTLR start synpred236_Java
    public final void synpred236_Java_fragment() throws RecognitionException {   
        // Java.g:1390:9: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
        // Java.g:1390:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
        {
        match(input,NEW,FOLLOW_NEW_in_synpred236_Java10068); if (state.failed) return ;
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred236_Java10070);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classOrInterfaceType_in_synpred236_Java10072);
        classOrInterfaceType();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classCreatorRest_in_synpred236_Java10074);
        classCreatorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_Java

    // $ANTLR start synpred237_Java
    public final void synpred237_Java_fragment() throws RecognitionException {   
        // Java.g:1393:9: ( 'new' classOrInterfaceType classCreatorRest )
        // Java.g:1393:9: 'new' classOrInterfaceType classCreatorRest
        {
        match(input,NEW,FOLLOW_NEW_in_synpred237_Java10116); if (state.failed) return ;
        pushFollow(FOLLOW_classOrInterfaceType_in_synpred237_Java10118);
        classOrInterfaceType();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classCreatorRest_in_synpred237_Java10120);
        classCreatorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_Java

    // $ANTLR start synpred239_Java
    public final void synpred239_Java_fragment() throws RecognitionException {   
        // Java.g:1400:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
        // Java.g:1400:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
        {
        match(input,NEW,FOLLOW_NEW_in_synpred239_Java10184); if (state.failed) return ;
        pushFollow(FOLLOW_createdName_in_synpred239_Java10187);
        createdName();

        state._fsp--;
        if (state.failed) return ;
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred239_Java10197); if (state.failed) return ;
        match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred239_Java10199); if (state.failed) return ;
        // Java.g:1402:9: ( '[' ']' )*
        loop195:
        do {
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==LBRACKET) ) {
                alt195=1;
            }


            switch (alt195) {
        	case 1 :
        	    // Java.g:1402:10: '[' ']'
        	    {
        	    match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred239_Java10211); if (state.failed) return ;
        	    match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred239_Java10213); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop195;
            }
        } while (true);

        pushFollow(FOLLOW_arrayInitializer_in_synpred239_Java10235);
        arrayInitializer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_Java

    // $ANTLR start synpred240_Java
    public final void synpred240_Java_fragment() throws RecognitionException {   
        // Java.g:1408:13: ( '[' expression ']' )
        // Java.g:1408:13: '[' expression ']'
        {
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred240_Java10285); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred240_Java10287);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred240_Java10301); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_Java

    // Delegated rules

    public final boolean synpred207_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA173 dfa173 = new DFA173(this);
    static final String DFA2_eotS =
        "\24\uffff";
    static final String DFA2_eofS =
        "\1\3\23\uffff";
    static final String DFA2_minS =
        "\1\137\1\0\22\uffff";
    static final String DFA2_maxS =
        "\1\u00b5\1\0\22\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\1\1\2\20\uffff";
    static final String DFA2_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\3\7\uffff\1\3\6\uffff\1\3\1\uffff\1\3\6\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\1\3\1\uffff\1\2\3\3\2\uffff\2\3\2\uffff\1\3\3\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\35\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "371:9: ( ( annotations )? packageDeclaration )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\20\uffff";
    static final String DFA12_eofS =
        "\20\uffff";
    static final String DFA12_minS =
        "\1\137\14\0\3\uffff";
    static final String DFA12_maxS =
        "\1\u00b5\14\0\3\uffff";
    static final String DFA12_acceptS =
        "\15\uffff\1\1\1\uffff\1\2";
    static final String DFA12_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\3\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\6\7\uffff\1\15\6\uffff\1\15\1\uffff\1\7\11\uffff\1\17\1\uffff"+
            "\1\10\2\uffff\1\4\1\3\1\2\2\uffff\1\5\1\14\2\uffff\1\11\3\uffff"+
            "\1\12\2\uffff\1\13\45\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "420:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_1 = input.LA(1);

                         
                        int index12_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\13\uffff";
    static final String DFA13_eofS =
        "\13\uffff";
    static final String DFA13_minS =
        "\1\111\1\0\1\uffff\7\0\1\uffff";
    static final String DFA13_maxS =
        "\1\u00b8\1\0\1\uffff\7\0\1\uffff";
    static final String DFA13_acceptS =
        "\2\uffff\1\1\7\uffff\1\2";
    static final String DFA13_specialS =
        "\1\uffff\1\4\1\uffff\1\7\1\3\1\6\1\1\1\5\1\2\1\0\1\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\7\25\uffff\1\2\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\3"+
            "\4\uffff\1\10\1\uffff\1\4\1\uffff\1\2\1\uffff\1\10\6\uffff\1"+
            "\10\1\5\1\10\1\2\2\uffff\3\2\1\uffff\1\10\2\2\2\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\11\1\2\45\uffff\1\1\2\uffff\1\6",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "427:10: ( modifiers1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_9 = input.LA(1);

                         
                        int index13_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA13_6 = input.LA(1);

                         
                        int index13_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA13_8 = input.LA(1);

                         
                        int index13_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA13_4 = input.LA(1);

                         
                        int index13_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA13_1 = input.LA(1);

                         
                        int index13_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA13_7 = input.LA(1);

                         
                        int index13_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA13_5 = input.LA(1);

                         
                        int index13_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA13_3 = input.LA(1);

                         
                        int index13_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index13_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\1\1\16\uffff";
    static final String DFA14_minS =
        "\1\111\1\uffff\1\111\14\uffff";
    static final String DFA14_maxS =
        "\1\u00b8\1\uffff\1\172\14\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\15\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\1";
    static final String DFA14_specialS =
        "\17\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\1\25\uffff\1\7\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\4\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\1\uffff\1\1\6\uffff\3\1\1\11\2"+
            "\uffff\1\5\1\4\1\3\1\uffff\1\1\1\6\1\15\2\uffff\1\12\3\uffff"+
            "\1\13\1\uffff\1\1\1\14\45\uffff\1\2\2\uffff\1\1",
            "",
            "\1\16\60\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 433:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*";
        }
    }
    static final String DFA16_eotS =
        "\17\uffff";
    static final String DFA16_eofS =
        "\17\uffff";
    static final String DFA16_minS =
        "\1\137\14\0\2\uffff";
    static final String DFA16_maxS =
        "\1\u00b5\14\0\2\uffff";
    static final String DFA16_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA16_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\6\7\uffff\1\15\6\uffff\1\16\1\uffff\1\7\13\uffff\1\10\2\uffff"+
            "\1\4\1\3\1\2\2\uffff\1\5\1\14\2\uffff\1\11\3\uffff\1\12\2\uffff"+
            "\1\13\45\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "456:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_1 = input.LA(1);

                         
                        int index16_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\17\uffff";
    static final String DFA32_eofS =
        "\17\uffff";
    static final String DFA32_minS =
        "\1\137\14\0\2\uffff";
    static final String DFA32_maxS =
        "\1\u00b5\14\0\2\uffff";
    static final String DFA32_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA32_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\6\20\uffff\1\7\11\uffff\1\15\1\uffff\1\10\2\uffff\1\4\1\3"+
            "\1\2\2\uffff\1\5\1\14\2\uffff\1\11\3\uffff\1\12\2\uffff\1\13"+
            "\45\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "555:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_4 = input.LA(1);

                         
                        int index32_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA32_7 = input.LA(1);

                         
                        int index32_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA32_8 = input.LA(1);

                         
                        int index32_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA32_9 = input.LA(1);

                         
                        int index32_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA32_10 = input.LA(1);

                         
                        int index32_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA32_11 = input.LA(1);

                         
                        int index32_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA32_12 = input.LA(1);

                         
                        int index32_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index32_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\25\uffff";
    static final String DFA40_eofS =
        "\25\uffff";
    static final String DFA40_minS =
        "\1\111\16\0\6\uffff";
    static final String DFA40_maxS =
        "\1\u00b8\16\0\6\uffff";
    static final String DFA40_acceptS =
        "\17\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\1";
    static final String DFA40_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\6\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\15\25\uffff\1\6\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\21\4\uffff\1\16\1\uffff\1\21\1\uffff\1\7\1\uffff\1\16\6\uffff"+
            "\1\16\1\23\1\16\1\10\2\uffff\1\4\1\3\1\2\1\uffff\1\16\1\5\1"+
            "\14\2\uffff\1\11\3\uffff\1\12\1\uffff\1\17\1\13\45\uffff\1\1"+
            "\2\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "604:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA40_11 = input.LA(1);

                         
                        int index40_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA40_12 = input.LA(1);

                         
                        int index40_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                        else if ( (synpred55_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index40_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA40_13 = input.LA(1);

                         
                        int index40_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                         
                        input.seek(index40_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA40_14 = input.LA(1);

                         
                        int index40_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_Java()) ) {s = 20;}

                        else if ( (synpred54_Java()) ) {s = 15;}

                         
                        input.seek(index40_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\22\uffff";
    static final String DFA49_eofS =
        "\22\uffff";
    static final String DFA49_minS =
        "\1\111\16\0\3\uffff";
    static final String DFA49_maxS =
        "\1\u00b8\16\0\3\uffff";
    static final String DFA49_acceptS =
        "\17\uffff\1\2\1\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\3\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\16\25\uffff\1\6\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\5"+
            "\uffff\1\17\3\uffff\1\7\1\uffff\1\17\6\uffff\1\17\1\uffff\1"+
            "\17\1\10\2\uffff\1\4\1\3\1\2\1\uffff\1\17\1\5\1\14\2\uffff\1"+
            "\11\3\uffff\1\12\1\uffff\1\17\1\13\45\uffff\1\1\2\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "612:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? formalParameters ( ^( 'throws' qualifiedNameList ) )? ^( Block ( explicitConstructorInvocation )? ( blockStatement )* ) ) | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? blockOrSemi -> ^( MethodDeclaration IDENTIFIER modifiers ( typeParameters )? ( type )? formalParameters ( '[' )* ( ^( 'throws' qualifiedNameList ) )? blockOrSemi ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_2 = input.LA(1);

                         
                        int index49_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_4 = input.LA(1);

                         
                        int index49_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA49_11 = input.LA(1);

                         
                        int index49_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA49_12 = input.LA(1);

                         
                        int index49_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA49_13 = input.LA(1);

                         
                        int index49_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA49_14 = input.LA(1);

                         
                        int index49_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_Java()) ) {s = 17;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index49_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\55\uffff";
    static final String DFA43_eofS =
        "\55\uffff";
    static final String DFA43_minS =
        "\1\111\1\uffff\10\0\43\uffff";
    static final String DFA43_maxS =
        "\1\u00b8\1\uffff\10\0\43\uffff";
    static final String DFA43_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\42\uffff";
    static final String DFA43_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\43\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\5\11\6\14\uffff\2\12\1\10\1\12\1\10\2\uffff\1\10\1\12\1\uffff"+
            "\1\12\1\uffff\1\12\1\10\1\uffff\1\12\1\uffff\1\12\1\uffff\1"+
            "\10\1\12\1\uffff\1\12\3\uffff\1\10\1\12\1\10\1\12\1\7\1\uffff"+
            "\4\12\1\10\2\12\1\4\2\12\1\2\1\12\1\uffff\2\12\1\11\2\12\1\3"+
            "\1\uffff\2\12\2\uffff\1\12\4\uffff\2\12\5\uffff\4\12\16\uffff"+
            "\1\12\2\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "623:9: ( explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_2 = input.LA(1);

                         
                        int index43_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA43_3 = input.LA(1);

                         
                        int index43_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA43_4 = input.LA(1);

                         
                        int index43_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA43_5 = input.LA(1);

                         
                        int index43_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA43_6 = input.LA(1);

                         
                        int index43_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA43_7 = input.LA(1);

                         
                        int index43_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA54_eotS =
        "\26\uffff";
    static final String DFA54_eofS =
        "\26\uffff";
    static final String DFA54_minS =
        "\1\111\16\0\7\uffff";
    static final String DFA54_maxS =
        "\1\u00b8\16\0\7\uffff";
    static final String DFA54_acceptS =
        "\17\uffff\1\2\1\uffff\1\3\1\4\1\uffff\1\5\1\1";
    static final String DFA54_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\7\uffff}>";
    static final String[] DFA54_transitionS = {
            "\1\15\25\uffff\1\6\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\22\4\uffff\1\16\1\uffff\1\22\1\uffff\1\7\1\uffff\1\16\6\uffff"+
            "\1\16\1\21\1\16\1\10\2\uffff\1\4\1\3\1\2\1\uffff\1\16\1\5\1"+
            "\14\2\uffff\1\11\3\uffff\1\12\1\uffff\1\17\1\13\7\uffff\1\24"+
            "\35\uffff\1\1\2\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "675:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA54_4 = input.LA(1);

                         
                        int index54_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA54_5 = input.LA(1);

                         
                        int index54_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA54_6 = input.LA(1);

                         
                        int index54_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA54_7 = input.LA(1);

                         
                        int index54_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA54_8 = input.LA(1);

                         
                        int index54_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA54_9 = input.LA(1);

                         
                        int index54_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA54_10 = input.LA(1);

                         
                        int index54_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA54_11 = input.LA(1);

                         
                        int index54_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA54_12 = input.LA(1);

                         
                        int index54_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                        else if ( (synpred71_Java()) ) {s = 17;}

                        else if ( (synpred72_Java()) ) {s = 18;}

                         
                        input.seek(index54_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA54_13 = input.LA(1);

                         
                        int index54_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                         
                        input.seek(index54_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA54_14 = input.LA(1);

                         
                        int index54_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_Java()) ) {s = 21;}

                        else if ( (synpred70_Java()) ) {s = 15;}

                         
                        input.seek(index54_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA77_eotS =
        "\12\uffff";
    static final String DFA77_eofS =
        "\12\uffff";
    static final String DFA77_minS =
        "\1\111\1\uffff\1\0\1\uffff\1\0\5\uffff";
    static final String DFA77_maxS =
        "\1\u00b8\1\uffff\1\0\1\uffff\1\0\5\uffff";
    static final String DFA77_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\6\uffff";
    static final String DFA77_specialS =
        "\2\uffff\1\0\1\uffff\1\1\5\uffff}>";
    static final String[] DFA77_transitionS = {
            "\12\3\16\uffff\1\3\1\uffff\1\3\2\uffff\1\3\5\uffff\1\3\5\uffff"+
            "\1\3\6\uffff\1\3\1\uffff\1\3\1\uffff\1\3\5\uffff\1\3\2\uffff"+
            "\1\4\2\uffff\1\2\4\uffff\1\3\2\uffff\1\3\46\uffff\1\1",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "820:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? thisOrSuper arguments ';' -> ^( thisOrSuper arguments ( nonWildcardTypeArguments )? ) | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' -> ^( 'super' arguments ( nonWildcardTypeArguments )? primary ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_2 = input.LA(1);

                         
                        int index77_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index77_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_4 = input.LA(1);

                         
                        int index77_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index77_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA89_eotS =
        "\26\uffff";
    static final String DFA89_eofS =
        "\26\uffff";
    static final String DFA89_minS =
        "\1\111\16\0\7\uffff";
    static final String DFA89_maxS =
        "\1\u00b5\16\0\7\uffff";
    static final String DFA89_acceptS =
        "\17\uffff\1\3\1\4\1\5\1\7\1\1\1\2\1\6";
    static final String DFA89_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\7\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\15\25\uffff\1\6\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\17\4\uffff\1\16\1\uffff\1\21\1\uffff\1\7\1\uffff\1\16\6\uffff"+
            "\1\16\1\20\1\16\1\10\2\uffff\1\4\1\3\1\2\1\uffff\1\16\1\5\1"+
            "\14\2\uffff\1\11\3\uffff\1\12\2\uffff\1\13\7\uffff\1\22\35\uffff"+
            "\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "919:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA89_2 = input.LA(1);

                         
                        int index89_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA89_3 = input.LA(1);

                         
                        int index89_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA89_4 = input.LA(1);

                         
                        int index89_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA89_5 = input.LA(1);

                         
                        int index89_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA89_6 = input.LA(1);

                         
                        int index89_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA89_7 = input.LA(1);

                         
                        int index89_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA89_8 = input.LA(1);

                         
                        int index89_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA89_9 = input.LA(1);

                         
                        int index89_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA89_10 = input.LA(1);

                         
                        int index89_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA89_11 = input.LA(1);

                         
                        int index89_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA89_12 = input.LA(1);

                         
                        int index89_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                        else if ( (synpred120_Java()) ) {s = 15;}

                        else if ( (synpred121_Java()) ) {s = 16;}

                        else if ( (synpred122_Java()) ) {s = 17;}

                        else if ( (synpred123_Java()) ) {s = 21;}

                         
                        input.seek(index89_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA89_13 = input.LA(1);

                         
                        int index89_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                         
                        input.seek(index89_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA89_14 = input.LA(1);

                         
                        int index89_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_Java()) ) {s = 19;}

                        else if ( (synpred119_Java()) ) {s = 20;}

                         
                        input.seek(index89_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\54\uffff";
    static final String DFA92_eofS =
        "\54\uffff";
    static final String DFA92_minS =
        "\1\111\4\0\6\uffff\1\0\40\uffff";
    static final String DFA92_maxS =
        "\1\u00b5\4\0\6\uffff\1\0\40\uffff";
    static final String DFA92_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\30\uffff\1\1";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\6\uffff\1\4\40\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\3\11\22\14\uffff\1\5\1\22\1\4\1\22\1\4\2\uffff\1\4\1\5\1"+
            "\uffff\1\22\1\uffff\1\22\1\4\1\uffff\1\5\1\uffff\1\1\1\uffff"+
            "\1\4\1\22\1\uffff\1\22\3\uffff\1\4\1\5\1\4\1\5\1\22\1\uffff"+
            "\3\5\1\22\1\4\2\5\2\22\1\13\2\22\1\uffff\1\5\2\22\1\5\2\22\1"+
            "\uffff\1\22\3\uffff\1\22\4\uffff\2\22\5\uffff\4\22\16\uffff"+
            "\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "973:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_Java()) ) {s = 43;}

                        else if ( (synpred127_Java()) ) {s = 5;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_Java()) ) {s = 43;}

                        else if ( (synpred127_Java()) ) {s = 5;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_Java()) ) {s = 43;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred126_Java()) ) {s = 43;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_Java()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index92_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA99_eotS =
        "\22\uffff";
    static final String DFA99_eofS =
        "\22\uffff";
    static final String DFA99_minS =
        "\1\111\16\uffff\1\170\2\uffff";
    static final String DFA99_maxS =
        "\1\u00a6\16\uffff\1\u00b8\2\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\uffff\1\20\1\17";
    static final String DFA99_specialS =
        "\22\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\17\11\16\15\uffff\1\2\1\16\1\14\1\16\2\uffff\1\16\2\uffff"+
            "\1\15\1\uffff\1\6\1\16\5\uffff\1\16\1\4\1\uffff\1\3\3\uffff"+
            "\1\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\12\1\16\2\uffff\1"+
            "\16\1\10\1\11\1\16\1\13\2\uffff\1\7\1\16\1\uffff\1\5\1\16\1"+
            "\uffff\1\1\3\uffff\1\20\4\uffff\2\16\5\uffff\4\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16\30\uffff\1\16\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16"+
            "\1\uffff\1\16\2\uffff\1\16\1\21\25\16\1\uffff\3\16",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "999:1: statement1 : ( block | 'assert' expression ( ':' expression )? ';' -> ^( 'assert' expression ( expression )? ) | 'if' parExpression statement ( 'else' statement )? -> ^( 'if' parExpression statement ( ^( 'else' statement ) )? ) | forstatement | 'while' parExpression statement -> ^( 'while' parExpression statement ) | 'do' statement 'while' parExpression ';' -> ^( 'do' statement parExpression ) | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( 'switch' parExpression switchBlockStatementGroups ) | 'synchronized' parExpression block -> ^( 'synchronized' parExpression block ) | 'return' ( expression )? ';' -> ^( 'return' ( expression )? ) | 'throw' expression ';' -> ^( 'throw' expression ) | 'break' ( IDENTIFIER )? ';' -> ^( 'break' ( IDENTIFIER )? ) | 'continue' ( IDENTIFIER )? ';' -> ^( 'continue' ( IDENTIFIER )? ) | expression ';' | IDENTIFIER ':' statement -> ^( Label IDENTIFIER statement ) | ';' );";
        }
    }
    static final String DFA110_eotS =
        "\21\uffff";
    static final String DFA110_eofS =
        "\21\uffff";
    static final String DFA110_minS =
        "\1\111\2\uffff\2\0\14\uffff";
    static final String DFA110_maxS =
        "\1\u00b5\2\uffff\2\0\14\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\13\uffff";
    static final String DFA110_specialS =
        "\3\uffff\1\0\1\1\14\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\3\11\5\16\uffff\1\4\1\uffff\1\4\2\uffff\1\4\5\uffff\1\4\3"+
            "\uffff\1\1\1\uffff\1\4\6\uffff\1\4\1\uffff\1\4\1\uffff\1\5\5"+
            "\uffff\1\4\2\uffff\1\5\2\uffff\1\5\4\uffff\1\5\2\uffff\1\5\12"+
            "\uffff\2\5\5\uffff\4\5\16\uffff\1\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "1107:1: forInit : ( localVariableDeclaration | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_3 = input.LA(1);

                         
                        int index110_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index110_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA110_4 = input.LA(1);

                         
                        int index110_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred160_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index110_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA113_eotS =
        "\17\uffff";
    static final String DFA113_eofS =
        "\17\uffff";
    static final String DFA113_minS =
        "\1\u009b\12\uffff\1\u00b7\1\u009b\2\uffff";
    static final String DFA113_maxS =
        "\1\u00b8\12\uffff\2\u00b7\2\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA113_specialS =
        "\17\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\1\21\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\uffff\1\13"+
            "\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\16\33\uffff\1\15",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "1133:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );";
        }
    }
    static final String DFA131_eotS =
        "\14\uffff";
    static final String DFA131_eofS =
        "\14\uffff";
    static final String DFA131_minS =
        "\1\111\2\uffff\1\0\10\uffff";
    static final String DFA131_maxS =
        "\1\u009d\2\uffff\1\0\10\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\6\uffff\1\3";
    static final String DFA131_specialS =
        "\3\uffff\1\0\10\uffff}>";
    static final String[] DFA131_transitionS = {
            "\12\4\16\uffff\1\4\1\uffff\1\4\2\uffff\1\4\5\uffff\1\4\5\uffff"+
            "\1\4\6\uffff\1\4\1\uffff\1\4\1\uffff\1\4\5\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\2\uffff\1\3\12\uffff\1\2\1\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1292:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( UnaryExpression '~' unaryExpression ) | '!' unaryExpression -> ^( UnaryExpression '!' unaryExpression ) | castExpression | primary ( selector )* ( postOperator )? -> primary ( ^( Selector selector ) )* ( ^( PostOperator postOperator ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_3 = input.LA(1);

                         
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\41\uffff";
    static final String DFA134_eofS =
        "\1\4\40\uffff";
    static final String DFA134_minS =
        "\1\170\1\0\1\uffff\1\0\35\uffff";
    static final String DFA134_maxS =
        "\1\u00b8\1\0\1\uffff\1\0\35\uffff";
    static final String DFA134_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\34\uffff";
    static final String DFA134_specialS =
        "\1\uffff\1\0\1\uffff\1\1\35\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\4\30\uffff\1\2\1\4\1\uffff\1\4\1\1\3\4\1\3\1\uffff\1\4\2"+
            "\uffff\27\4\1\uffff\3\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "1324:9: ( identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_3 = input.LA(1);

                         
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred208_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\41\uffff";
    static final String DFA136_eofS =
        "\1\4\40\uffff";
    static final String DFA136_minS =
        "\1\170\1\0\1\uffff\1\0\35\uffff";
    static final String DFA136_maxS =
        "\1\u00b8\1\0\1\uffff\1\0\35\uffff";
    static final String DFA136_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\34\uffff";
    static final String DFA136_specialS =
        "\1\uffff\1\0\1\uffff\1\1\35\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\4\30\uffff\1\2\1\4\1\uffff\1\4\1\1\3\4\1\3\1\uffff\1\4\2"+
            "\uffff\27\4\1\uffff\3\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "1330:9: ( identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_3 = input.LA(1);

                         
                        int index136_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred211_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index136_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\13\uffff";
    static final String DFA144_eofS =
        "\13\uffff";
    static final String DFA144_minS =
        "\1\u0091\1\111\1\uffff\1\147\7\uffff";
    static final String DFA144_maxS =
        "\1\u0099\1\u00a6\1\uffff\1\u00b8\7\uffff";
    static final String DFA144_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\1\2\1\4\1\6\1\7\1\10\1\5";
    static final String DFA144_specialS =
        "\13\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\2\3\uffff\1\1\3\uffff\1\3",
            "\12\5\16\uffff\1\5\1\uffff\1\5\2\uffff\1\5\5\uffff\1\5\5\uffff"+
            "\1\5\6\uffff\1\5\1\uffff\1\5\1\uffff\1\5\5\uffff\1\5\2\uffff"+
            "\1\5\2\uffff\1\5\4\uffff\1\5\2\uffff\1\5\4\uffff\1\4\5\uffff"+
            "\2\5\5\uffff\4\5",
            "",
            "\1\6\25\uffff\1\11\10\uffff\1\10\2\uffff\1\7\56\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "1359:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' -> ^( 'class' ( '[' )+ ) | ( '[' expression ']' )+ -> ^( ArrayAccess ( expression )+ ) | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments -> ^( TypedSuffix IDENTIFIER nonWildcardTypeArguments arguments ) | '.' 'this' | '.' 'super' arguments | innerCreator );";
        }
    }
    static final String DFA143_eotS =
        "\41\uffff";
    static final String DFA143_eofS =
        "\1\1\40\uffff";
    static final String DFA143_minS =
        "\1\170\1\uffff\1\0\36\uffff";
    static final String DFA143_maxS =
        "\1\u00b8\1\uffff\1\0\36\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA143_specialS =
        "\2\uffff\1\0\36\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\31\uffff\1\1\1\uffff\1\1\1\2\4\1\1\uffff\1\1\2\uffff\27"+
            "\1\1\uffff\3\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1364:9: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\41\uffff";
    static final String DFA150_eofS =
        "\1\2\40\uffff";
    static final String DFA150_minS =
        "\1\170\1\0\37\uffff";
    static final String DFA150_maxS =
        "\1\u00b8\1\0\37\uffff";
    static final String DFA150_acceptS =
        "\2\uffff\1\2\35\uffff\1\1";
    static final String DFA150_specialS =
        "\1\uffff\1\0\37\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\2\31\uffff\1\2\1\uffff\1\2\1\1\4\2\1\uffff\1\2\2\uffff\27"+
            "\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 1408:9: ( '[' expression ']' )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA173_eotS =
        "\55\uffff";
    static final String DFA173_eofS =
        "\55\uffff";
    static final String DFA173_minS =
        "\1\111\1\uffff\10\0\43\uffff";
    static final String DFA173_maxS =
        "\1\u00b8\1\uffff\10\0\43\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\42\uffff";
    static final String DFA173_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\43\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\5\11\6\14\uffff\2\12\1\10\1\12\1\10\2\uffff\1\10\1\12\1\uffff"+
            "\1\12\1\uffff\1\12\1\10\1\uffff\1\12\1\uffff\1\12\1\uffff\1"+
            "\10\1\12\1\uffff\1\12\3\uffff\1\10\1\12\1\10\1\12\1\7\1\uffff"+
            "\4\12\1\10\2\12\1\4\2\12\1\2\1\12\1\uffff\2\12\1\11\2\12\1\3"+
            "\1\uffff\2\12\2\uffff\1\12\4\uffff\2\12\5\uffff\4\12\16\uffff"+
            "\1\12\2\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "623:9: ( explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_2 = input.LA(1);

                         
                        int index173_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA173_3 = input.LA(1);

                         
                        int index173_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA173_4 = input.LA(1);

                         
                        int index173_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA173_5 = input.LA(1);

                         
                        int index173_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA173_6 = input.LA(1);

                         
                        int index173_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA173_7 = input.LA(1);

                         
                        int index173_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA173_8 = input.LA(1);

                         
                        int index173_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA173_9 = input.LA(1);

                         
                        int index173_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index173_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit586 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit615 = new BitSet(new long[]{0x0000000000000002L,0x9081000080000000L,0x0020000000809133L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit637 = new BitSet(new long[]{0x0000000000000002L,0x9081000080000000L,0x0020000000809133L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit659 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000809133L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000000010L});
    public static final BitSet FOLLOW_importDeclaration1_in_importDeclaration799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_importDeclaration1866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration1868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_importDeclaration1871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration1882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_importDeclaration1903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration1914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_importDeclaration1917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration1939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_importDeclaration1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedImportName973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedImportName984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedImportName986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDeclaration1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration1059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers1_in_modifiers1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifiers11133 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_PUBLIC_in_modifiers11143 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_PROTECTED_in_modifiers11153 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_PRIVATE_in_modifiers11163 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_STATIC_in_modifiers11173 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifiers11183 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_FINAL_in_modifiers11193 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_NATIVE_in_modifiers11203 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifiers11213 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifiers11223 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_VOLATILE_in_modifiers11233 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_STRICTFP_in_modifiers11243 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000009133L});
    public static final BitSet FOLLOW_FINAL_in_variableModifiers1275 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_annotation_in_variableModifiers1289 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_normalClassDeclaration1355 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_CLASS_in_normalClassDeclaration1358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_normalClassDeclaration1360 = new BitSet(new long[]{0x0000000000000000L,0x0040800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration1371 = new BitSet(new long[]{0x0000000000000000L,0x0040800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_EXTENDS_in_normalClassDeclaration1393 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1395 = new BitSet(new long[]{0x0000000000000000L,0x0040800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_normalClassDeclaration1417 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1419 = new BitSet(new long[]{0x0000000000000000L,0x0040800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_typeParameters1557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_COMMA_in_typeParameters1586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_GT_in_typeParameters1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_typeParameter1654 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_EXTENDS_in_typeParameter1665 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_AMP_in_typeBound1729 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_typeBound1732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_modifiers_in_enumDeclaration1764 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumDeclaration1797 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_enumDeclaration1808 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1810 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_enumBody1896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0020000001900000L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001900000L});
    public static final BitSet FOLLOW_COMMA_in_enumBody1929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000900000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody1942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RBRACE_in_enumBody1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants2008 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants2019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0020000000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants2022 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_annotations_in_enumConstant2056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumConstant2077 = new BitSet(new long[]{0x0000000000000002L,0x0040800000000000L,0x01000000000A0000L});
    public static final BitSet FOLLOW_arguments_in_enumConstant2088 = new BitSet(new long[]{0x0000000000000002L,0x0040800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_classBody_in_enumConstant2110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumBodyDeclarations2182 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000889133L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations2194 = new BitSet(new long[]{0x0000000000000002L,0x9001000080000000L,0x0020000000889133L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_normalInterfaceDeclaration2259 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERFACE_in_normalInterfaceDeclaration2261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_normalInterfaceDeclaration2263 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration2274 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_EXTENDS_in_normalInterfaceDeclaration2296 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration2298 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList2404 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_typeList2415 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_typeList2418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LBRACE_in_classBody2449 = new BitSet(new long[]{0x0000000000000000L,0x9001000080000000L,0x0020000000989133L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody2461 = new BitSet(new long[]{0x0000000000000000L,0x9001000080000000L,0x0020000000989133L});
    public static final BitSet FOLLOW_RBRACE_in_classBody2483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_interfaceBody2522 = new BitSet(new long[]{0x0000000000000000L,0x9001000080000000L,0x0020000000909133L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody2534 = new BitSet(new long[]{0x0000000000000000L,0x9001000080000000L,0x0020000000909133L});
    public static final BitSet FOLLOW_RBRACE_in_interfaceBody2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classBodyDeclaration2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classBodyDeclaration2607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_methodDeclaration2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0100000000000000L});
    public static final BitSet FOLLOW_typeParameters_in_methodDeclaration2763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodDeclaration2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaration2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080800L});
    public static final BitSet FOLLOW_THROWS_in_methodDeclaration2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaration2807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LBRACE_in_methodDeclaration2828 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_methodDeclaration2840 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_blockStatement_in_methodDeclaration2862 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_RBRACE_in_methodDeclaration2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_methodDeclaration2975 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0100000000004008L});
    public static final BitSet FOLLOW_typeParameters_in_methodDeclaration2986 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000004008L});
    public static final BitSet FOLLOW_type_in_methodDeclaration3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_VOID_in_methodDeclaration3022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodDeclaration3042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaration3052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000A80810L});
    public static final BitSet FOLLOW_LBRACKET_in_methodDeclaration3063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_methodDeclaration3065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000A80810L});
    public static final BitSet FOLLOW_THROWS_in_methodDeclaration3087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaration3089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000A80810L});
    public static final BitSet FOLLOW_blockOrSemi_in_methodDeclaration3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_blockOrSemi3221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_blockOrSemi3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_fieldDeclaration3251 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration3261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_variableDeclarator_in_fieldDeclaration3271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_COMMA_in_fieldDeclaration3282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_variableDeclarator_in_fieldDeclaration3284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_SEMI_in_fieldDeclaration3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variableDeclarator3348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008200000L});
    public static final BitSet FOLLOW_LBRACKET_in_variableDeclarator3359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_variableDeclarator3361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008200000L});
    public static final BitSet FOLLOW_EQ_in_variableDeclarator3383 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01000078300A4248L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator3385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_interfaceBodyDeclaration3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaration_in_interfaceBodyDeclaration3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceBodyDeclaration3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceMethodDeclaration3511 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0100000000004008L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceMethodDeclaration3522 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000004008L});
    public static final BitSet FOLLOW_type_in_interfaceMethodDeclaration3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_VOID_in_interfaceMethodDeclaration3555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interfaceMethodDeclaration3575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaration3585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000A00800L});
    public static final BitSet FOLLOW_LBRACKET_in_interfaceMethodDeclaration3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_interfaceMethodDeclaration3598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000A00800L});
    public static final BitSet FOLLOW_THROWS_in_interfaceMethodDeclaration3620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaration3622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceMethodDeclaration3635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceFieldDeclaration3711 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_interfaceFieldDeclaration3713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaration3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceFieldDeclaration3749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type3796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_type3807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_type3809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_primitiveType_in_type3851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_type3862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_type3864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_classOrInterfaceType1_in_classOrInterfaceType3916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_classOrInterfaceType13951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType13962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_classOrInterfaceType13984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_classOrInterfaceType13987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType14002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_primitiveType1_in_primitiveType4047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType10 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_typeArguments4172 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000040000008L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments4185 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000040000008L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_GT_in_typeArguments4209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUES_in_typeArgument4256 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_set_in_typeArgument4281 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_typeArgument4325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedNameList4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameters4400 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000040008L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters4411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameters4433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalParameterDecl_in_formalParameterDecls4482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterDecls4493 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000000008L});
    public static final BitSet FOLLOW_normalParameterDecl_in_formalParameterDecls4496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_normalParameterDecl_in_formalParameterDecls4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterDecls4528 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000000008L});
    public static final BitSet FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_normalParameterDecl4571 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_normalParameterDecl4573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_normalParameterDecl4575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_normalParameterDecl4586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_normalParameterDecl4588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variableModifiers_in_ellipsisParameterDecl4647 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_ellipsisParameterDecl4657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_ellipsisParameterDecl4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ellipsisParameterDecl4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000240L});
    public static final BitSet FOLLOW_thisOrSuper_in_explicitConstructorInvocation4743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_explicitConstructorInvocation4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation4788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_explicitConstructorInvocation4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000040L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SUPER_in_explicitConstructorInvocation4830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_explicitConstructorInvocation4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_thisOrSuper4885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedName4911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedName4922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedName4924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_annotation_in_annotations4975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_annotation5027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedName_in_annotation5029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_annotation5043 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01200078300E4248L});
    public static final BitSet FOLLOW_annotationArgument_in_annotation5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_annotation5083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotationArgument5153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValue_in_annotationArgument5157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs5177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairs5188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs5190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_elementValuePair5221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQ_in_elementValuePair5223 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01200078300A4248L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair5225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue5245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue5255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue5265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_elementValueArrayInitializer5285 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01200078311A4248L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer5311 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01200078300A4248L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer5342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RBRACE_in_elementValueArrayInitializer5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeDeclaration5388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_annotationTypeDeclaration5390 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration5400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_annotationTypeDeclaration5410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_annotationTypeBody5482 = new BitSet(new long[]{0x0000000000000000L,0x9001000080000000L,0x0020000000909133L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5494 = new BitSet(new long[]{0x0000000000000000L,0x9001000080000000L,0x0020000000909133L});
    public static final BitSet FOLLOW_RBRACE_in_annotationTypeBody5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodDeclaration_in_annotationTypeElementDeclaration5557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_annotationTypeElementDeclaration5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementDeclaration5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementDeclaration5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementDeclaration5597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementDeclaration5607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_annotationTypeElementDeclaration5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationMethodDeclaration5638 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_annotationMethodDeclaration5640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_annotationMethodDeclaration5642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationMethodDeclaration5652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationMethodDeclaration5654 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationMethodDeclaration5657 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01200078300A4248L});
    public static final BitSet FOLLOW_elementValue_in_annotationMethodDeclaration5659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_annotationMethodDeclaration5688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_block5748 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_blockStatement_in_block5759 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_RBRACE_in_block5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement5831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_localVariableDeclarationStatement5872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration5893 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration5895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_variableDeclarator_in_localVariableDeclaration5905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_localVariableDeclaration5916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_variableDeclarator_in_localVariableDeclaration5918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_statement1_in_statement5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement16026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement16049 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_statement16051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080800000L});
    public static final BitSet FOLLOW_COLON_in_statement16054 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_statement16056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement16091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_parExpression_in_statement16093 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_statement16095 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ELSE_in_statement16098 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_statement16100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forstatement_in_statement16147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement16157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_parExpression_in_statement16159 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_statement16161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement16189 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_statement16191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHILE_in_statement16193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_parExpression_in_statement16195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trystatement_in_statement16225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement16235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_parExpression_in_statement16237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LBRACE_in_statement16239 = new BitSet(new long[]{0x0000000000000000L,0x0000041000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement16241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RBRACE_in_statement16243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement16271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_parExpression_in_statement16273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_statement16275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement16303 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830824248L});
    public static final BitSet FOLLOW_expression_in_statement16306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement16341 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_statement16343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement16371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000800000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_statement16386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement16432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0000000000800000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_statement16447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement16493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_statement16496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_statement16507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_in_statement16509 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_statement16511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement16539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6562 = new BitSet(new long[]{0x0000000000000002L,0x0000041000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup6591 = new BitSet(new long[]{0x0000000000000002L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup6602 = new BitSet(new long[]{0x0000000000000002L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_CASE_in_switchLabel6654 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_switchLabel6656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_switchLabel6684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_trystatement6708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_trystatement6710 = new BitSet(new long[]{0x0000000000000000L,0x0002002000000000L});
    public static final BitSet FOLLOW_catches_in_trystatement6724 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_FINALLY_in_trystatement6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_trystatement6728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_trystatement6742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_trystatement6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_trystatement6758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6817 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches6828 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_CATCH_in_catchClause6859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause6861 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000000008L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause6863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause6873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_catchClause6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter6914 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_formalParameter6916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_formalParameter6918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_formalParameter6929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_formalParameter6931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_FOR_in_forstatement6980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_forstatement6982 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000000008L});
    public static final BitSet FOLLOW_variableModifiers_in_forstatement6984 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_forstatement6986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_forstatement6988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_in_forstatement6990 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_forstatement7001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_forstatement7003 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_forstatement7005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forstatement7109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_forstatement7111 = new BitSet(new long[]{0x0000000000000000L,0x2A05104A0007FE00L,0x0120007830824248L});
    public static final BitSet FOLLOW_forInit_in_forstatement7131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_forstatement7152 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830824248L});
    public static final BitSet FOLLOW_expression_in_forstatement7172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_forstatement7193 = new BitSet(new long[]{0x0000000000000000L,0x2A05104A0007FE00L,0x0120007830064248L});
    public static final BitSet FOLLOW_expressionList_in_forstatement7213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_forstatement7234 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_forstatement7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit7370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit7380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parExpression7400 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_parExpression7402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_parExpression7404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList7440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList7451 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_expressionList7454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression7485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x019FE00008000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression7496 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_expression7498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSEQ_in_assignmentOperator7577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBEQ_in_assignmentOperator7587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAREQ_in_assignmentOperator7597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHEQ_in_assignmentOperator7607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPEQ_in_assignmentOperator7617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAREQ_in_assignmentOperator7627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARETEQ_in_assignmentOperator7637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTEQ_in_assignmentOperator7647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_assignmentOperator7658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_LT_in_assignmentOperator7660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression7715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_QUES_in_conditionalExpression7726 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression7730 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression7732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_BARBAR_in_conditionalOrExpression7808 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AMPAMP_in_conditionalAndExpression7885 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7887 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_BAR_in_inclusiveOrExpression7962 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression8029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_CARET_in_exclusiveOrExpression8040 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression8042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression8106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_AMP_in_andExpression8117 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression8119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression8171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000100000000L});
    public static final BitSet FOLLOW_equalityOperator_in_equalityExpression8198 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression8212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000100000000L});
    public static final BitSet FOLLOW_set_in_equalityOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression8299 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression8310 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression8312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression8362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression8373 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression8375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_LT_in_relationalOp8441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQ_in_relationalOp8443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relationalOp8454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_EQ_in_relationalOp8456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalOp8466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relationalOp8476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression8496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression8507 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression8509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_LT_in_shiftOp8563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_LT_in_shiftOp8565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_shiftOp8576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_shiftOp8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_shiftOp8580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_shiftOp8591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_shiftOp8593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_additiveOperator_in_additiveExpression8641 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_set_in_additiveOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8747 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000118000000000L});
    public static final BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression8774 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000118000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression8881 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUB_in_unaryExpression8912 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSPLUS_in_unaryExpression8942 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSUB_in_unaryExpression8972 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression9002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus9022 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_unaryExpressionNotPlusMinus9052 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus9054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus9082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus9092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001802200000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus9103 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001802200000L});
    public static final BitSet FOLLOW_postOperator_in_unaryExpressionNotPlusMinus9125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_postOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression9196 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression9198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression9200 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression9202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression9230 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_castExpression9232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression9234 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression9236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary9276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primary9298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002220000L});
    public static final BitSet FOLLOW_DOT_in_primary9309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary9311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002220000L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary9333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary9378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002220000L});
    public static final BitSet FOLLOW_DOT_in_primary9389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary9391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002220000L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary9413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primary9458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002020000L});
    public static final BitSet FOLLOW_superSuffix_in_primary9468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary9494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_creator_in_primary9504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary9514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_LBRACKET_in_primary9525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_primary9527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_DOT_in_primary9548 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_CLASS_in_primary9550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primary9581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_DOT_in_primary9583 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_CLASS_in_primary9585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix9627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix9637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0100000000000000L});
    public static final BitSet FOLLOW_typeArguments_in_superSuffix9640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_superSuffix9661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix9672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_identifierSuffix9731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_identifierSuffix9733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9754 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_CLASS_in_identifierSuffix9756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_identifierSuffix9786 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix9788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_identifierSuffix9790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix9830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9840 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_CLASS_in_identifierSuffix9843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_identifierSuffix9855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifierSuffix9857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix9859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_THIS_in_identifierSuffix9892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SUPER_in_identifierSuffix9905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix9907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix9917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector9939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0100000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector9943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_selector9947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_selector9958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector9979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_THIS_in_selector9982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector9992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SUPER_in_selector9995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002020000L});
    public static final BitSet FOLLOW_superSuffix_in_selector10005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerCreator_in_selector10015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_selector10025 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_selector10027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_selector10029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_creator10068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator10070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_creator10072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator10074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_creator10116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_creator10118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator10120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayCreator_in_creator10148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_arrayCreator10184 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_createdName_in_arrayCreator10187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator10197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator10199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator10211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator10213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreator10235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_arrayCreator10245 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_createdName_in_arrayCreator10248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator10258 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_arrayCreator10260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator10270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator10285 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_arrayCreator10287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator10301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator10324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator10326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer10358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer10368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayInitializer1_in_arrayInitializer10387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_arrayInitializer110422 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01000078311A4248L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer110438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer110457 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x01000078300A4248L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer110460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001100000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer110510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RBRACE_in_arrayInitializer110524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName10558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName10568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_innerCreator10589 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_NEW_in_innerCreator10591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0100000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator10602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_innerCreator10623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000020000L});
    public static final BitSet FOLLOW_typeArguments_in_innerCreator10634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator10655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest10716 = new BitSet(new long[]{0x0000000000000002L,0x0040800000000000L,0x0100000000080000L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest10727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_nonWildcardTypeArguments10759 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments10761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_GT_in_nonWildcardTypeArguments10771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments10807 = new BitSet(new long[]{0x0000000000000000L,0x2A05104A0007FE00L,0x0120007830064248L});
    public static final BitSet FOLLOW_expressionList_in_arguments10810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments10823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classHeader10966 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_CLASS_in_classHeader10968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_classHeader10970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_enumHeader10990 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000200L});
    public static final BitSet FOLLOW_set_in_enumHeader10992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumHeader10998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceHeader11018 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceHeader11020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interfaceHeader11022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationHeader11042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_annotationHeader11044 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationHeader11046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_annotationHeader11048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_typeHeader11068 = new BitSet(new long[]{0x0000000000000000L,0x0400408000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_CLASS_in_typeHeader11071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ENUM_in_typeHeader11073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_typeHeader11076 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_INTERFACE_in_typeHeader11080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_typeHeader11084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_methodHeader11104 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0100000000004008L});
    public static final BitSet FOLLOW_typeParameters_in_methodHeader11106 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000004008L});
    public static final BitSet FOLLOW_type_in_methodHeader11110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_VOID_in_methodHeader11112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodHeader11116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_methodHeader11118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_fieldHeader11138 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_fieldHeader11140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fieldHeader11142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000009A00000L});
    public static final BitSet FOLLOW_LBRACKET_in_fieldHeader11145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_fieldHeader11146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000009A00000L});
    public static final BitSet FOLLOW_set_in_fieldHeader11150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableHeader11176 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_localVariableHeader11178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_localVariableHeader11180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000009A00000L});
    public static final BitSet FOLLOW_LBRACKET_in_localVariableHeader11183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_localVariableHeader11184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000009A00000L});
    public static final BitSet FOLLOW_set_in_localVariableHeader11188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred2_Java586 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_packageDeclaration_in_synpred2_Java615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred12_Java1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers1_in_synpred13_Java1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_synpred28_Java1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_synpred44_Java2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred53_Java2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred54_Java2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred55_Java2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred58_Java2840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_synpred60_Java2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L,0x0100000000000000L});
    public static final BitSet FOLLOW_typeParameters_in_synpred60_Java2763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred60_Java2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_formalParameters_in_synpred60_Java2794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080800L});
    public static final BitSet FOLLOW_THROWS_in_synpred60_Java2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_qualifiedNameList_in_synpred60_Java2807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred60_Java2828 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred60_Java2840 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_blockStatement_in_synpred60_Java2862 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078309BF7FFL});
    public static final BitSet FOLLOW_RBRACE_in_synpred60_Java2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_synpred69_Java3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaration_in_synpred70_Java3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred71_Java3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred72_Java3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ellipsisParameterDecl_in_synpred97_Java4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalParameterDecl_in_synpred99_Java4482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred99_Java4493 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000000008L});
    public static final BitSet FOLLOW_normalParameterDecl_in_synpred99_Java4496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_normalParameterDecl_in_synpred100_Java4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred100_Java4528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred103_Java4717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000240L});
    public static final BitSet FOLLOW_thisOrSuper_in_synpred103_Java4743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_arguments_in_synpred103_Java4753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_SEMI_in_synpred103_Java4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodDeclaration_in_synpred118_Java5557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_synpred119_Java5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_synpred120_Java5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_synpred121_Java5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_synpred122_Java5597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_synpred123_Java5607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred126_Java5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred127_Java5831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred132_Java6098 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_synpred132_Java6100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred152_Java6724 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_FINALLY_in_synpred152_Java6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080010L});
    public static final BitSet FOLLOW_block_in_synpred152_Java6728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred153_Java6742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_synpred156_Java6980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred156_Java6982 = new BitSet(new long[]{0x0000000000000000L,0x0A05104A00000200L,0x0020000000000008L});
    public static final BitSet FOLLOW_variableModifiers_in_synpred156_Java6984 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_in_synpred156_Java6986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred156_Java6988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_in_synpred156_Java6990 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_synpred156_Java7001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred156_Java7003 = new BitSet(new long[]{0x0000000000000000L,0xBA2D1A4F8007FE00L,0x01200078308BF7FFL});
    public static final BitSet FOLLOW_statement_in_synpred156_Java7005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred160_Java7370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred201_Java9082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred205_Java9196 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_primitiveType_in_synpred205_Java9198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred205_Java9200 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred205_Java9202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred207_Java9309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred207_Java9311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred208_Java9333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred210_Java9389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred210_Java9391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred211_Java9413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred223_Java9786 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_synpred223_Java9788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred223_Java9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_synpred236_Java10068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred236_Java10070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_synpred236_Java10072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred236_Java10074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_synpred237_Java10116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_synpred237_Java10118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred237_Java10120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_synpred239_Java10184 = new BitSet(new long[]{0x0000000000000000L,0x0A04104A00000200L,0x0000000000000008L});
    public static final BitSet FOLLOW_createdName_in_synpred239_Java10187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred239_Java10197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred239_Java10199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred239_Java10211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred239_Java10213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000280000L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred239_Java10235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred240_Java10285 = new BitSet(new long[]{0x0000000000000000L,0x2A04104A0007FE00L,0x0100007830024248L});
    public static final BitSet FOLLOW_expression_in_synpred240_Java10287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred240_Java10301 = new BitSet(new long[]{0x0000000000000002L});

}