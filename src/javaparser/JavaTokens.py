AdditiveExpression=4
Annotation=5
AnnotationArgument=6
AnnotationMethodDeclaration=7
Annotations=8
AnnotationTypeBody=9
AnnotationTypeDeclaration=10
Arguments=11
ArrayAccess=12
ArrayCreator=13
ArrayInitializer=14
AssignExpr=15
BitAndExpression=16
BitOrExpression=17
BitXorExpression=18
Block=19
CastExpression=20
ClassBody=21
ClassBlock=22
ClassCreator=23
ClassDeclaration=24
ClassOrInterfaceType=25
CompilationUnit=26
ConditionalAndExpression=27
ConditionalExpression=28
ConditionalOrExpression=29
EnhancedForVar=30
EnhancedForExpr=31
EnhancedForStmt=32
EnumBody=33
EnumConstant=34
EnumDeclaration=35
EqualityExpression=36
Expression=37
FieldDeclaration=38
ForInit=39
ForExpr=40
ForUpdate=41
ForStmt=42
FormalParameters=43
InnerCreator=44
InterfaceBody=45
InterfaceDeclaration=46
InterfaceFieldDeclaration=47
InterfaceMethodDeclaration=48
Label=49
LocalVariableDeclaration=50
MethodDeclaration=51
Modifiers=52
MultiplicativeExpression=53
ParameterDecl=54
ParExpression=55
PostOperator=56
QualifiedName=57
PrimitiveType=58
RelationalExpression=59
Selector=60
ShiftExpression=61
Statement=62
SuperSuffix=63
SwitchEntry=64
Type=65
TypeArguments=66
TypedSuffix=67
TypeList=68
TypeParameters=69
UnaryExpression=70
VariableDeclarator=71
IDENTIFIER=72
INTLITERAL=73
LONGLITERAL=74
FLOATLITERAL=75
DOUBLELITERAL=76
CHARLITERAL=77
STRINGLITERAL=78
TRUE=79
FALSE=80
NULL=81
IntegerNumber=82
LongSuffix=83
HexPrefix=84
HexDigit=85
Exponent=86
NonIntegerNumber=87
FloatSuffix=88
DoubleSuffix=89
EscapeSequence=90
WS=91
COMMENT=92
LINE_COMMENT=93
ABSTRACT=94
ASSERT=95
BOOLEAN=96
BREAK=97
BYTE=98
CASE=99
CATCH=100
CHAR=101
CLASS=102
CONST=103
CONTINUE=104
DEFAULT=105
DO=106
DOUBLE=107
ELSE=108
ENUM=109
EXTENDS=110
FINAL=111
FINALLY=112
FLOAT=113
FOR=114
GOTO=115
IF=116
IMPLEMENTS=117
IMPORT=118
INSTANCEOF=119
INT=120
INTERFACE=121
LONG=122
NATIVE=123
NEW=124
PACKAGE=125
PRIVATE=126
PROTECTED=127
PUBLIC=128
RETURN=129
SHORT=130
STATIC=131
STRICTFP=132
SUPER=133
SWITCH=134
SYNCHRONIZED=135
THIS=136
THROW=137
THROWS=138
TRANSIENT=139
TRY=140
VOID=141
VOLATILE=142
WHILE=143
LPAREN=144
RPAREN=145
LBRACE=146
RBRACE=147
LBRACKET=148
RBRACKET=149
SEMI=150
COMMA=151
DOT=152
ELLIPSIS=153
EQ=154
BANG=155
TILDE=156
QUES=157
COLON=158
EQEQ=159
AMPAMP=160
BARBAR=161
PLUSPLUS=162
SUBSUB=163
PLUS=164
SUB=165
STAR=166
SLASH=167
AMP=168
BAR=169
CARET=170
PERCENT=171
PLUSEQ=172
SUBEQ=173
STAREQ=174
SLASHEQ=175
AMPEQ=176
BAREQ=177
CARETEQ=178
PERCENTEQ=179
MONKEYS_AT=180
BANGEQ=181
GT=182
LT=183
IdentifierStart=184
IdentifierPart=185
SurrogateIdentifer=186

strings = {
    'package':125,
    ';':150,
    'import':118,
    'static':131,
    '.':152,
    '*':166,
    'public':128,
    'protected':127,
    'private':126,
    'abstract':94,
    'final':111,
    'native':123,
    'synchronized':135,
    'transient':139,
    'volatile':142,
    'strictfp':132,
    'class':102,
    'extends':110,
    'implements':117,
    '<':183,
    ',':151,
    '>':182,
    '&':168,
    'enum':109,
    '{':146,
    '}':147,
    'interface':121,
    'throws':138,
    'void':141,
    '[':148,
    ']':149,
    '=':154,
    'boolean':96,
    'char':101,
    'byte':98,
    'short':130,
    'int':120,
    'long':122,
    'float':113,
    'double':107,
    '?':157,
    'super':133,
    '(':144,
    ')':145,
    '...':153,
    'this':136,
    '@':180,
    'default':105,
    'assert':95,
    ':':158,
    'if':116,
    'else':108,
    'while':143,
    'do':106,
    'switch':134,
    'return':129,
    'throw':137,
    'break':97,
    'continue':104,
    'case':99,
    'try':140,
    'finally':112,
    'catch':100,
    'for':114,
    '+=':172,
    '-=':173,
    '*=':174,
    '/=':175,
    '&=':176,
    '|=':177,
    '^=':178,
    '%=':179,
    '||':161,
    '&&':160,
    '|':169,
    '^':170,
    '==':159,
    '!=':181,
    'instanceof':119,
    '+':164,
    '-':165,
    '/':167,
    '%':171,
    '++':162,
    '--':163,
    '~':156,
    '!':155,
    'new':124,
}

rev_strings = {}
for k, v in strings.iteritems():
    rev_strings[v] = k
