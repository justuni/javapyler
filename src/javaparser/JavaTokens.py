AdditiveExpression=4
Annotation=5
AnnotationArgument=6
AnnotationMethodDeclaration=7
Annotations=8
AnnotationTypeBody=9
AnnotationTypeDeclaration=10
Arguments=11
ArrayAccess=12
ArrayCreator=13
ArrayInitializer=14
AssignExpr=15
BitAndExpression=16
BitOrExpression=17
BitXorExpression=18
Block=19
CastExpression=20
ClassBody=21
ClassBlock=22
ClassCreator=23
ClassDeclaration=24
ClassOrInterfaceType=25
CompilationUnit=26
ConditionalAndExpression=27
ConditionalExpression=28
ConditionalOrExpression=29
EnhancedForVar=30
EnhancedForExpr=31
EnhancedForStmt=32
EnumBody=33
EnumConstant=34
EnumDeclaration=35
EqualityExpression=36
Expression=37
FieldDeclaration=38
ForInit=39
ForExpr=40
ForUpdate=41
ForStmt=42
FormalParameters=43
InterfaceBody=44
InterfaceDeclaration=45
InterfaceFieldDeclaration=46
InterfaceMethodDeclaration=47
Label=48
LocalVariableDeclaration=49
MethodDeclaration=50
Modifiers=51
MultiplicativeExpression=52
ParameterDecl=53
ParExpression=54
PostOperator=55
QualifiedName=56
PrimitiveType=57
RelationalExpression=58
Selector=59
ShiftExpression=60
Statement=61
SuperSuffix=62
SwitchEntry=63
Type=64
TypeArguments=65
TypedSuffix=66
TypeList=67
TypeParameters=68
UnaryExpression=69
VariableDeclarator=70
IDENTIFIER=71
INTLITERAL=72
LONGLITERAL=73
FLOATLITERAL=74
DOUBLELITERAL=75
CHARLITERAL=76
STRINGLITERAL=77
TRUE=78
FALSE=79
NULL=80
IntegerNumber=81
LongSuffix=82
HexPrefix=83
HexDigit=84
Exponent=85
NonIntegerNumber=86
FloatSuffix=87
DoubleSuffix=88
EscapeSequence=89
WS=90
COMMENT=91
LINE_COMMENT=92
ABSTRACT=93
ASSERT=94
BOOLEAN=95
BREAK=96
BYTE=97
CASE=98
CATCH=99
CHAR=100
CLASS=101
CONST=102
CONTINUE=103
DEFAULT=104
DO=105
DOUBLE=106
ELSE=107
ENUM=108
EXTENDS=109
FINAL=110
FINALLY=111
FLOAT=112
FOR=113
GOTO=114
IF=115
IMPLEMENTS=116
IMPORT=117
INSTANCEOF=118
INT=119
INTERFACE=120
LONG=121
NATIVE=122
NEW=123
PACKAGE=124
PRIVATE=125
PROTECTED=126
PUBLIC=127
RETURN=128
SHORT=129
STATIC=130
STRICTFP=131
SUPER=132
SWITCH=133
SYNCHRONIZED=134
THIS=135
THROW=136
THROWS=137
TRANSIENT=138
TRY=139
VOID=140
VOLATILE=141
WHILE=142
LPAREN=143
RPAREN=144
LBRACE=145
RBRACE=146
LBRACKET=147
RBRACKET=148
SEMI=149
COMMA=150
DOT=151
ELLIPSIS=152
EQ=153
BANG=154
TILDE=155
QUES=156
COLON=157
EQEQ=158
AMPAMP=159
BARBAR=160
PLUSPLUS=161
SUBSUB=162
PLUS=163
SUB=164
STAR=165
SLASH=166
AMP=167
BAR=168
CARET=169
PERCENT=170
PLUSEQ=171
SUBEQ=172
STAREQ=173
SLASHEQ=174
AMPEQ=175
BAREQ=176
CARETEQ=177
PERCENTEQ=178
MONKEYS_AT=179
BANGEQ=180
GT=181
LT=182
IdentifierStart=183
IdentifierPart=184
SurrogateIdentifer=185

strings = {
    'package':124,
    ';':149,
    'import':117,
    'static':130,
    '.':151,
    '*':165,
    'public':127,
    'protected':126,
    'private':125,
    'abstract':93,
    'final':110,
    'native':122,
    'synchronized':134,
    'transient':138,
    'volatile':141,
    'strictfp':131,
    'class':101,
    'extends':109,
    'implements':116,
    '<':182,
    ',':150,
    '>':181,
    '&':167,
    'enum':108,
    '{':145,
    '}':146,
    'interface':120,
    'throws':137,
    'void':140,
    '[':147,
    ']':148,
    '=':153,
    'boolean':95,
    'char':100,
    'byte':97,
    'short':129,
    'int':119,
    'long':121,
    'float':112,
    'double':106,
    '?':156,
    'super':132,
    '(':143,
    ')':144,
    '...':152,
    'this':135,
    '@':179,
    'default':104,
    'assert':94,
    ':':157,
    'if':115,
    'else':107,
    'while':142,
    'do':105,
    'switch':133,
    'return':128,
    'throw':136,
    'break':96,
    'continue':103,
    'case':98,
    'try':139,
    'finally':111,
    'catch':99,
    'for':113,
    '+=':171,
    '-=':172,
    '*=':173,
    '/=':174,
    '&=':175,
    '|=':176,
    '^=':177,
    '%=':178,
    '||':160,
    '&&':159,
    '|':168,
    '^':169,
    '==':158,
    '!=':180,
    'instanceof':118,
    '+':163,
    '-':164,
    '/':166,
    '%':170,
    '++':161,
    '--':162,
    '~':155,
    '!':154,
    'new':123,
}

rev_strings = {}
for k, v in strings.iteritems():
    rev_strings[v] = k
