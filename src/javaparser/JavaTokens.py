AdditiveExpression=4
Annotation=5
AnnotationArgument=6
AnnotationMethodDeclaration=7
Annotations=8
AnnotationTypeBody=9
AnnotationTypeDeclaration=10
Arguments=11
ArrayAccess=12
ArrayCreator=13
ArrayInitializer=14
AssignExpr=15
BitAndExpression=16
BitOrExpression=17
BitXorExpression=18
Block=19
CastExpression=20
ClassBody=21
ClassBlock=22
ClassCreator=23
ClassDeclaration=24
ClassOrInterfaceType=25
CompilationUnit=26
ConditionalAndExpression=27
ConditionalExpression=28
ConditionalOrExpression=29
ElementValueArrayInitializer=30
EnhancedForVar=31
EnhancedForExpr=32
EnhancedForStmt=33
EnumBody=34
EnumConstant=35
EnumDeclaration=36
EqualityExpression=37
Expression=38
FieldDeclaration=39
ForInit=40
ForExpr=41
ForUpdate=42
ForStmt=43
FormalParameters=44
InnerCreator=45
InterfaceBody=46
InterfaceDeclaration=47
InterfaceFieldDeclaration=48
InterfaceMethodDeclaration=49
Label=50
LocalVariableDeclaration=51
MethodDeclaration=52
Modifiers=53
MultiplicativeExpression=54
ParameterDecl=55
ParExpression=56
PostOperator=57
QualifiedName=58
PrimitiveType=59
RelationalExpression=60
Selector=61
ShiftExpression=62
Statement=63
SuperSuffix=64
SwitchEntry=65
Type=66
TypeArguments=67
TypedSuffix=68
TypeList=69
TypeParameters=70
UnaryExpression=71
VariableDeclarator=72
IDENTIFIER=73
INTLITERAL=74
LONGLITERAL=75
FLOATLITERAL=76
DOUBLELITERAL=77
CHARLITERAL=78
STRINGLITERAL=79
TRUE=80
FALSE=81
NULL=82
IntegerNumber=83
LongSuffix=84
HexPrefix=85
HexDigit=86
Exponent=87
NonIntegerNumber=88
FloatSuffix=89
DoubleSuffix=90
EscapeSequence=91
WS=92
COMMENT=93
LINE_COMMENT=94
ABSTRACT=95
ASSERT=96
BOOLEAN=97
BREAK=98
BYTE=99
CASE=100
CATCH=101
CHAR=102
CLASS=103
CONST=104
CONTINUE=105
DEFAULT=106
DO=107
DOUBLE=108
ELSE=109
ENUM=110
EXTENDS=111
FINAL=112
FINALLY=113
FLOAT=114
FOR=115
GOTO=116
IF=117
IMPLEMENTS=118
IMPORT=119
INSTANCEOF=120
INT=121
INTERFACE=122
LONG=123
NATIVE=124
NEW=125
PACKAGE=126
PRIVATE=127
PROTECTED=128
PUBLIC=129
RETURN=130
SHORT=131
STATIC=132
STRICTFP=133
SUPER=134
SWITCH=135
SYNCHRONIZED=136
THIS=137
THROW=138
THROWS=139
TRANSIENT=140
TRY=141
VOID=142
VOLATILE=143
WHILE=144
LPAREN=145
RPAREN=146
LBRACE=147
RBRACE=148
LBRACKET=149
RBRACKET=150
SEMI=151
COMMA=152
DOT=153
ELLIPSIS=154
EQ=155
BANG=156
TILDE=157
QUES=158
COLON=159
EQEQ=160
AMPAMP=161
BARBAR=162
PLUSPLUS=163
SUBSUB=164
PLUS=165
SUB=166
STAR=167
SLASH=168
AMP=169
BAR=170
CARET=171
PERCENT=172
PLUSEQ=173
SUBEQ=174
STAREQ=175
SLASHEQ=176
AMPEQ=177
BAREQ=178
CARETEQ=179
PERCENTEQ=180
MONKEYS_AT=181
BANGEQ=182
GT=183
LT=184
IdentifierStart=185
IdentifierPart=186
SurrogateIdentifer=187

strings = {
    'package':126,
    ';':151,
    'import':119,
    'static':132,
    '.':153,
    '*':167,
    'public':129,
    'protected':128,
    'private':127,
    'abstract':95,
    'final':112,
    'native':124,
    'synchronized':136,
    'transient':140,
    'volatile':143,
    'strictfp':133,
    'class':103,
    'extends':111,
    'implements':118,
    '<':184,
    ',':152,
    '>':183,
    '&':169,
    'enum':110,
    '{':147,
    '}':148,
    'interface':122,
    'throws':139,
    'void':142,
    '[':149,
    ']':150,
    '=':155,
    'boolean':97,
    'char':102,
    'byte':99,
    'short':131,
    'int':121,
    'long':123,
    'float':114,
    'double':108,
    '?':158,
    'super':134,
    '(':145,
    ')':146,
    '...':154,
    'this':137,
    '@':181,
    'default':106,
    'assert':96,
    ':':159,
    'if':117,
    'else':109,
    'while':144,
    'do':107,
    'switch':135,
    'return':130,
    'throw':138,
    'break':98,
    'continue':105,
    'case':100,
    'try':141,
    'finally':113,
    'catch':101,
    'for':115,
    '+=':173,
    '-=':174,
    '*=':175,
    '/=':176,
    '&=':177,
    '|=':178,
    '^=':179,
    '%=':180,
    '||':162,
    '&&':161,
    '|':170,
    '^':171,
    '==':160,
    '!=':182,
    'instanceof':120,
    '+':165,
    '-':166,
    '/':168,
    '%':172,
    '++':163,
    '--':164,
    '~':157,
    '!':156,
    'new':125,
}

rev_strings = {}
for k, v in strings.iteritems():
    rev_strings[v] = k
